feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
DataCamp Community,https://www.datacamp.com/community,"This New AI Incubator Gives Social Impact Startups Access to 1,700 Data Scientists",https://www.datacamp.com/community/blog/ai-incubator,Omdena’s AI Incubator connects early-stage impact startups with the data science talent and platform they need to collaborate on the world’s most important problems.,NA,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,We Salute Our Women-Focused DataCamp Donates Partners,https://www.datacamp.com/community/blog/datacamp-donates-women-partners,These trailblazing organizations are using DataCamp to bring more women into STEM education and careers.,NA,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,"New Year, New LinkedIn Cover Image",https://www.datacamp.com/community/blog/linkedin-covers,Is your New Year’s resolution to land a data role or get to the next level in your career? Tell the world that you’re a data enthusiast by updating your LinkedIn cover image.,NA,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Leave Your Data Where It Is And Automate Feature Extraction With Molecula - Episode 175,https://www.dataengineeringpodcast.com/molecula-feature-store-episode-175/#utm_source=rss&utm_medium=rss,"A majority of the time spent in data engineering is copying data between systems to make the information available for different purposes. This introduces challenges such as keeping information synchronized, managing schema evolution, building transformations to match the expectations of the destination systems. H.O. Maycotte was faced with these same challenges but at a massive scale, leading him to question if there is a better way. After tasking some of his top engineers to consider the problem in a new light they created the Pilosa engine. In this episode H.O. explains how using Pilosa as the core he built the Molecula platform to eliminate the need to copy data between systems in able to make it accessible for analytical and machine learning purposes. He also discusses the challenges that he faces in helping potential users and customers understand the shift in thinking that this creates, and how the system is architected to make it possible. This is a fascinating conversation about what the future looks like when you revisit your assumptions about how systems are designed.",2021-03-09T00:32:48Z,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,New Hire Spotlight: Selling the Best Platform to Build Data Skills,https://www.datacamp.com/community/blog/jake,"Q&A with Jake Sigman, Business Development Representative at DataCamp",NA,#datascience #tutorials
DEV Community,https://dev.to,Unit testing Python code in Jupyter notebooks,https://dev.to/wrighter/unit-testing-python-code-in-jupyter-notebooks-32l6,"Most of us agree that we should write unit tests, and many of us actually do. This should be especially true for production code, library code, or if you ascribe to test driven development, during the entire development process.Often Jupyter notebooks with Python are used for data exploration, and so users may not choose (or need) to write unit tests for their notebook code since they typically may be looking at results for each cell as they progress through the notebook, then coming to a conclusion, and moving on. However, in my experience what typically happens with notebooks is soon the code in the notebook moves beyond data exploration and is useful for further work. Or, perhaps the notebook itself produces results that are useful and need to be run on a regular basis. Perhaps the code needs to be maintained and integrated with external data sources. Then it becomes important to ensure that the code in the notebook can be tested and verified. In this case, what are our options for unit testing notebook code? In this article I’ll cover several options for unit testing Python code in a Jupyter notebook.      Maybe just don’t do it?The first option of Jupyter notebook unit testing is to just not do it at all. By this, I don’t mean don’t unit test your code, but rather extract it from the notebook into separate Python modules that you import back into your notebook. That code should be tested the way you usually unit test your code, whether that be with unittest, pytest, doctest, or another unit testing framework. This article won’t cover all those frameworks in detail, but a great choice for python developers is to not test inside their Jupyter notebooks, but to use the rich assortment of testing frameworks already available for Python code, and to move code to external modules as soon as possible in the development process.      OK, so you can test in a notebookIf you end up deciding you want to leave your code inside a Jupyter notebook, there actually are some unit testing options. Before reviewing a few of them, let’s just setup a code example that we might encounter in a Jupyter notebook. Let’s say your notebook pulls some data from an API, calculates some results from it, then produces some graphs and other data summaries that it persists elsewhere. Maybe there’s a function that produces the proper API URL, and we want to unit test that function. This function has some logic that changes the URL format based on the date for the report. Here’s a debugged version.import datetimeimport dateutildef make_url(date):    """"""Return the url for our API call based on date.""""""    if isinstance(date, str):        date = dateutil.parser.parse(date).date()    elif not isinstance(date, datetime.date):        raise ValueError(""must be a date"")    if date &gt;= datetime.date(2020, 1, 1):        return f""https://api.example.com/v2/{date.year}/{date.month}/{date.day}""    else:        return f""https://api.example.com/v1/{date:%Y-%m-%d}""      Unit testing with unittestNormally, when we test with unittest we would either put our test methods in a separate test module, or possibly we’d mix those methods inside the main module. Then we’d need to execute the unittest.main method, possibly as the default method inside a __main__ guard. We can basically do the same thing in our Jupyter notebook. We can make a unitest.TestCase class, perform the tests we want, and then just execute the unit tests in any cell. The results of the tests can even be inspected or asserted to include no failures if you want the notebook execution to fail on errors. You just need to save the output of the unittest.main method and inspect it for errors.import unittestclass TestUrl(unittest.TestCase):    def test_make_url_v2(self):        date = datetime.date(2020, 1, 1)        self.assertEqual(make_url(date), ""https://api.example.com/v2/2020/1/1"")    def test_make_url_v1(self):        date = datetime.date(2019, 12, 31)        self.assertEqual(make_url(date), ""https://api.example.com/v1/2019-12-31"")res = unittest.main(argv=[''], verbosity=3, exit=False)# if we want our notebook to stop processing due to failures, we need a cell itself to failassert len(res.result.failures) == 0test_make_url_v1 ( __main__.TestUrl) ... oktest_make_url_v2 ( __main__.TestUrl) ... ok---------------------------------------------------------------------------Ran 2 tests in 0.001sOKThis turns out to be fairly straightforward, and if you don’t mind comingling code and tests in your notebook, it works fine.      Unit testing with doctestAnother way to include tests in your code is to use doctest. Doctest uses specially formatted code documentation that includes our tests and the expected results. Below is an updated method with this special code documentation included, both for positive and negative test cases. This is a simple way to test and document code in one place, and often will be used in python modules where the main guard will just run the doct test, like this:if __name__ == __main__ :    doctest.testmod()Since we’re in a notebook, we will just add this to a cell below where our code is defined, and it will also work. First, here’s our updated make_urlmethod with the doctest comments.def make_url(date):    """"""Return the url for our API call based on date.    &gt;&gt;&gt; make_url(""1/1/2020"")    'https://api.example.com/v2/2020/1/1'    &gt;&gt;&gt; make_url(""1-1-x1"")    Traceback (most recent call last):        ...    dateutil.parser._parser.ParserError: Unknown string format: 1-1-x1    &gt;&gt;&gt; make_url(""1/1/20001"")    Traceback (most recent call last):        ...    dateutil.parser._parser.ParserError: year 20001 is out of range: 1/1/20001    &gt;&gt;&gt; make_url(datetime.date(2020,1,1))    'https://api.example.com/v2/2020/1/1'    &gt;&gt;&gt; make_url(datetime.date(2019,12,31))    'https://api.example.com/v1/2019-12-31'    """"""    if isinstance(date, str):        date = dateutil.parser.parse(date).date()    elif not isinstance(date, datetime.date):        raise ValueError(""must be a date"")    if date &gt;= datetime.date(2020, 1, 1):        return f""https://api.example.com/v2/{date.year}/{date.month}/{date.day}""    else:        return f""https://api.example.com/v1/{date:%Y-%m-%d}""import doctestdoctest.testmod()TestResults(failed=0, attempted=5)      Unit testing with testbookThe testbook project is a different take on notebook unit testing. It allows you to refer to your notebooks in pure Python code from outside a notebook. This allows you to use any testing framework you like (for example, pytest, or unittest) in separate Python modules. You may have a situation where allowing users to modify and update notebook code is the best way to keep code updated and to allow for flexibility for end users. But you may prefer that the code still be tested and verified separately. Testbook makes this an option.First, you have to install it in your environment:pip install testbookor in your notebook%pip install testbookNow, in a separate python file, you can import your notebook code and test it there. In that file, you’ll create code that looks like the following, and then you’ll use whichever unit testing framework you prefer to actually execute the unit test. You might create the following code in a Python file (say jupyter_unit_tests.py).import datetimeimport testbook@testbook.testbook('./jupyter_unit_tests.ipynb', execute=True)def test_make_url(tb):    func = tb.ref(""make_url"")    date = datetime.date(2020, 1, 2)    assert make_url(date) == ""https://api.example.com/v2/2020/1/1""In this case, you can now run the tests with any unit testing framework. For example, with pytest, you would just run the following:pytest jupyter_unit_tests.pyThis works as a normal unit test, and the tests should pass. However, in developing this article, I realized that the testbook code has limited support for passing arguments in the unit test back into the notebook kernel for testing. These arguments are JSON serialized, and the current code knows how to handle a wide array of Python types. But it doesn’t pass a datetime as an object, for example, but as a string. Since our code makes an attempt to parse strings into dates (after I modified it), it works. In other words, the unit test above is not passing in a datetime.date to the make_url method, but rather a string (2020-01-02) that is then parsed into a date. How could you pass in a date from the unit test into the notebook code? You have several options. First, you can make a date object in your notebook just for testing purposes and then refer to that in your unit tests.testdate1 = datetime.date(2020,1,1) # for unit testThen, you could write your unit test to use that variable in the test.A second option is to inject Python code into the notebook, then refer to it back in your unit test. Both options are shown in the final version of the external unit test. Just save that over jupyter_unit_tests.py and run it using your favorite unit testing framework.import datetimeimport testbook@testbook.testbook('./jupyter_unit_tests.ipynb', execute=True)def test_make_url(tb):    f = tb.ref(""make_url"")    d = ""2020-01-02""    assert f(d) == ""https://api.example.com/v2/2020/1/2""    # note that this is actually converted to a string    d = datetime.date(2020, 1, 2)    assert f(d) == ""https://api.example.com/v2/2020/1/2""    # this one will be testing the date functionality    d2 = tb.ref(""testdate1"")    assert f(d2) == ""https://api.example.com/v2/2020/1/1""    # this one will inject similar code as above, then use it    tb.inject(""d3 = datetime.date(2020, 2, 3)"")    d3 = tb.ref(""d3"")    assert f(d3) == ""https://api.example.com/v2/2020/2/3""      SummarySo whether you are a unit testing purist or you just want to sprinkle a few unit tests into your notebooks, there are several options for you to consider. Don’t let your use of notebooks prevent you from doing the right thing in terms of testing your code.The post Unit testing Python code in Jupyter notebooks appeared first on wrighters.io.",2021-03-23T03:01:33Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,BI and Data Science: Matching Approaches to Applications,http://feedproxy.google.com/~r/RBloggers/~3/V6GuBpZATr8/,"Photo by Jamie Street on UnsplashIn the previous posts in our series on Data Science and Business Intelligence, we first discussed how data science can either complement or augment self-service BI tools to deliver more combined value. We then explored the strengths and challenges of the two approaches, both ...The post BI and Data Science: Matching Approaches to Applications first appeared on R-bloggers.",2021-03-17T18:00:00Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,handbook of mixture analysis [review],http://feedproxy.google.com/~r/RBloggers/~3/o-MXaFXOnZ4/,"“In my opinion, the editors have done an excellent job when selecting the contents of the handbook and putting the different chapters together. For instance, this can be appreciated by the fact that, despite the large number of authors and contributions, all chapters have kept the same notation. Furthermore, in ...The post handbook of mixture analysis [review] first appeared on R-bloggers.",2021-03-18T17:21:55Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,A growing number of governments are spreading disinformation online,https://www.economist.com/graphic-detail/2021/01/13/a-growing-number-of-governments-are-spreading-disinformation-online,Such campaigns are becoming more sophisticated and harder to stop,2021-01-13T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,New Coronavirus COVID-19 Interactive Visuals,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/TRu5yXT_1AI/,We&#8217;ve revised our live generative Coronavirus data-visuals and added a new Country Comparer and Hotspot Map. Great code &#038; design work from UniversLab and Nueker. &#187; see the visualisations &#187; see the visualisations,2021-01-19T18:31:55Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Why are American politicians more pious than their constituents?,https://www.economist.com/graphic-detail/2021/02/08/why-are-american-politicians-more-pious-than-their-constituents,"As Americans ditch the church, Congress still fills the pews",2021-02-08T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Our covid-19 model estimates odds of hospitalisation and death,https://www.economist.com/graphic-detail/2021/03/13/our-covid-19-model-estimates-odds-of-hospitalisation-and-death,"Death rates depend mostly on age, whereas comorbidities sharply raise chances of hospitalisation in young people",2021-03-13T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,157. Why Are Japanese Homes Disposable?,https://omny.fm/shows/freakonomics-radio/why-are-japanese-homes-disposable,"In most countries, houses get more valuable over time. In Japan, a new buyer will often bulldoze the home. We'll tell you why.",2014-02-27T05:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,314. What Does a C.E.O. Actually Do?,https://omny.fm/shows/freakonomics-radio/what-does-a-c-e-o-actually-do,"They're paid a fortune — but for what, exactly? What makes a good C.E.O. — and how can you even tell? Is ""leadership science"" a real thing — or just airport-bookstore mumbo jumbo? We put these questions to Mark Zuckerberg, Richard Branson, Indra Nooyi, Satya Nadella, Jack Welch, Ray Dalio, Carol Bartz, David Rubenstein, and Ellen Pao. (Part 1 of a special series, ""The Secret Life of C.E.O.'s."")",2018-01-18T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,"Freakonomics Radio Live: “The World’s a Mess. But Oysters, They Hold it Down.”",https://omny.fm/shows/freakonomics-radio/freakonomics-radio-live-the-world-s-a-mess-but-oys,"Celebrity chef Alex Guarnaschelli joins us to co-host an evening of delicious fact-finding: where a trillion oysters went, whether a soda tax can work, and how beer helped build an empire. Washington Post columnist Alexandra Petri is our real-time fact-checker.",2018-12-15T13:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,292. Why Hate the Koch Brothers? (Part 1),https://omny.fm/shows/freakonomics-radio/why-hate-the-koch-brothers-part-1,"Charles Koch, the mega-billionaire CEO of Koch Industries and half of the infamous political machine, sees himself as a classical liberal. So why do most Democrats hate him so much? In a rare series of interviews, he explains his political awakening, his management philosophy and why he supports legislation that goes against his self-interest.",2017-06-22T03:00:00Z,#economics #podcast
Dr. Sebastian Raschka,https://sebastianraschka.com/,Generating Gender-Neutral Face Images with Semi-Adversarial Neural Networks to Enhance Privacy,https://sebastianraschka.com/blog/2018/semi-adversarial-nets-1.html,"I thought that it would be nice to have short and concise summaries of recent projects handy, to share them with a more general audience, including colleagues and students. So, I challenged myself to use fewer than 1000 words without getting distracted by the nitty-gritty details and technical jargon. In this post, I mainly cover some of my recent research in collaboration with the [iPRoBe Lab](http://iprobe.cse.msu.edu) that falls under the broad category of developing approaches to hide specific information in face images. The research discussed in this post is about ""maximizing privacy while preserving utility.""",2018-08-02T05:00:00Z,#tech #engineering
Yelp Engineering and Product Blog,https://engineeringblog.yelp.com/,Now You See Me: How NICE and PDQ plots Uncover Model Behaviors Hidden by Partial Dependence Plots,https://engineeringblog.yelp.com/2020/12/now-you-see-me-how-nice-and-pdq-plots-uncover-model-behaviors-hidden-by-partial-dependence-plots.html,"Many machine learning (ML) practitioners use partial dependence plots (PDP) to gain insights into model behaviors. But have you run into situations where PDPs average two groups with different behaviors and produce curves applicable to none? Are you longing for tools that help you understand detailed model behavior in a visually manageable way? Look no further! We are thrilled to share with you our newest model interpretation tools: the Nearby Individual Conditional Expectation plot and its companion, the Partial Dependence at Quantiles plot. They highlight local behaviors and hint at how much we may trust such readings. A not NICE...",2020-12-17T00:00:00Z,#tech #engineering
Stories by Pinterest Engineering on Medium,https://medium.com/@Pinterest_Engineering?source=rss-ef81ef829bcb------2,The top Pinterest Engineering blog posts of 2020,https://medium.com/pinterest-engineering/the-top-pinterest-engineering-blog-posts-of-2020-32da5445c121?source=rss-ef81ef829bcb------2,NA,2020-12-22T17:56:45Z,#tech #engineering
Google AI Blog,http://ai.googleblog.com/,PAIRED: A New Multi-agent Approach for Adversarial Environment Generation,http://ai.googleblog.com/feeds/5957816276916721057/comments/default,PAIRED: A New Multi-agent Approach for Adversarial Environment Generation,2021-03-05T12:57:14Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,The T-cell immune response to covid lasts at least six months,https://www.economist.com/science-and-technology/2020/11/07/the-t-cell-immune-response-to-covid-lasts-at-least-six-months,That is good news,2020-11-07T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,EU countries pause AstraZeneca’s covid-19 jab over safety fears,https://www.economist.com/science-and-technology/2021/03/15/eu-countries-pause-astrazenecas-covid-19-jab-over-safety-fears,An abundance of caution could well backfire,2021-03-15T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Using television screens as loudspeakers,https://www.economist.com/science-and-technology/2021/01/30/using-television-screens-as-loudspeakers,In your face,2021-01-30T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,An animal that can regrow its entire body,https://www.economist.com/science-and-technology/2021/03/08/an-animal-that-can-regrow-its-entire-body,"For some species of sea slug, decapitation is a mere annoyance",2021-03-08T00:00:00Z,#tech #news
