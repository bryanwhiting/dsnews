feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#290 Side Hustles for Data Scientists,https://talkpython.fm/episodes/show/290/side-hustles-for-data-scientists,"Are you a data scientist looking to branch out on your own and start something new? Maybe you're just looking for a way to work with those exciting libraries that aren't yet in play at the day job. Rather than putting everything on the line, quitting your job, and hoping things work out, maybe you should start with a side-hustle. On this episode, you'll meet Keith McCormick, a data scientist who has many irons in the fire and he's here to tell us about different types of side hustles and why you may want to try or avoid one.Links from the showKeith on Twitter: @kmccormickblogKeith on LinkedIn: linkedin.comKeith's courses: linkedin.comSide Hustle Strategies for Data Science and Analytics Experts course: linkedin.com/learningTalk Python's Excel to Python course: talkpython.fm/excelSponsorsLinodeTalk Python Training",2020-11-13T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Cutting Through The Noise And Focusing On The Fundamentals Of Data Engineering With The Data Janitor - Episode 151,https://www.dataengineeringpodcast.com/pipeline-data-engineering-academy-episode-151/#utm_source=rss&utm_medium=rss,"Data engineering is a constantly growing and evolving discipline. There are always new tools, systems, and design patterns to learn, which leads to a great deal of confusion for newcomers. Daniel Molnar has dedicated his time to helping data professionals get back to basics through presentations at conferences and meetups, and with his most recent endeavor of building the Pipeline Data Engineering Academy. In this episode he shares advice on how to cut through the noise, which principles are foundational to building a successful career as a data engineer, and his approach to educating the next generation of data practitioners. This was a useful conversation for anyone working with data who has found themselves spending too much time chasing the latest trends and wishes to develop a more focused approach to their work.",2020-09-22T00:14:08Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,"#266 Refactoring your code, like magic with Sourcery",https://talkpython.fm/episodes/show/266/refactoring-your-code-like-magic-with-sourcery,"Refactoring your code is a fundamental step on the path to professional and maintainable software. We rarely have the perfect picture of what we need to build when we start writing code and attempts to over plan and overdesign software often lead to analysis paralysis rather than ideal outcomes. Join me as I discuss refactoring with Brendan Maginnis and Nick Thapen as well as their tool, Sourcery, to automate refactoring in the popular Python editors.Links from the showGuestsBrendan Maginnis: @brendan_m6sNick Thapen: @nthapenSourcerySourcery: sourcery.aiSourcery on Twitter: @sourceryaiVS Code and PyCharm Plugins: sourcery.ai/editorGitHub Bot: sourcery.ai/githubFor an instant demo ‚≠ê this repo, and Sourcery will refactor your most popular Python repo: github.com/sourcery-ai/sourceryPython Refactorings article: sourcery.ai/blogNuitkaTalk Python episode: talkpython.fmNuitka site: github.comGilded Rose Kata: github.comSponsorsDatadogLinodeTalk Python Training",2020-05-29T00:00:00Z,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,What is SQL?,https://www.datacamp.com/community/tutorials/what-is-sql,,NA,#datascience #ds #podcast
R-bloggers,https://www.r-bloggers.com,Updated Apache Drill R JDBC Interface Package {sergeant.caffeinated} With {dbplyr} 2.x Compatibility,http://feedproxy.google.com/~r/RBloggers/~3/a9nqTlHT1xE/,"While the future of the Apache Drill ecosystem is somewhat in-play (MapR ‚Äî a major sponsoring org for the project ‚Äî is kinda dead), I still use it almost daily (on my local home office cluster) to avoid handing over any more money to Amazon than I/we already do. The latest (...The post Updated Apache Drill R JDBC Interface Package {sergeant.caffeinated} With {dbplyr} 2.x Compatibility first appeared on R-bloggers.",2020-11-20T19:59:33Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,A/B testing my resume,http://feedproxy.google.com/~r/RBloggers/~3/BhqbJLxaNEg/,"Internet wisdom is divided on whether one-page resumes are more effective at landing you an interview than two-page ones. Most of the advice out there seems much opinion- or anecdotal-based, with very little scientific basis. Well, let‚Äôs fix that. Being currently open to work, I thought this would be ...The post A/B testing my resume first appeared on R-bloggers.",2020-11-24T01:35:39Z,#datascience #tutorials
DEV Community,https://dev.to,My thoughts after using React for the past 3 months: Tips for new developers! üë®‚Äçüíª,https://dev.to/fahadimran/my-thoughts-after-using-react-for-the-past-3-months-tips-for-new-developers-567g,"ü§∑‚Äç‚ôÇÔ∏è Hang on... What's React?React is one of the most popular Front-End JavaScript frameworks. Developed by Facebook in 2013, it is actively maintained as an open-source project and has made building complex user interfaces easier. That's why it is one of the most loved frameworks even in 2020.      üå≥ Why I started learning React?I, like many front-end developers, started learning React after I had become comfortable writing HTML, CSS, and JavaScript. Because of their extensive usage in the market, I knew I had to learn a JavaScript framework as well. I thought long and hard before making my decision between React, Vue, and Angular. I finally settled on React because I liked the flexibility it provided and I knew that, because of its popularity, I would have no trouble finding help online in case I got stuck.Thus, I have been using React for the past 3 months, in various projects, to learn what's it all about. Naturally, as a new developer starting out with React, I gained much-needed insights into the state of the React ecosystem. I am sharing some of my thoughts for new developers who are learning React or are considering switching to it.OK, enough blabbering. Let's jump into the fun stuff!      üîß FlexibilityThe first thing I noticed when I started working with React is, how flexible it was, and how much freedom it provided to the developers. At the core, React is just a basic library, but the functionality can be easily added on top of it by different libraries and packages.The best thing about React is that there are no restrictions or strict guidelines in terms of coding style that you have to follow. You can choose to create your components however you want, whether it be a class or functional components, you can adopt styled-components or choose to split your application into dumb and smart components to ensure separation of concerns. Everything is up to the developer. Sure, there are some recommended best practices that you can follow, but no one is going to shove a certain application structure, down your throat if you don't like it.While this flexibility is definitely welcome to some developers, others might argue that it makes it difficult for newbies to get started. I, also somewhat agree with this point of view. As a new React developer myself, I was initially quite confused at what the correct way was to create Apps with React. Since every tutorial and article I looked at was telling me a different way of doing things. It was only later that I realized that there is no best way to write React. As long as you become comfortable with the core concepts like Components, State, props, JSX, etc. you can pretty much adopt the style that works best for you. So, that's what I have been doing for some time now, and it is working fine so far.      üòÆ JavaScript in HTML? Say Hello to JSX!React uses what we call JSX, which is a mixture of JavaScript and HTML. Though, at first I despised the idea of JSX, since, we have been taught from the beginning that it's a bad practice to mix in JavaScript with your markup. Here's what it looks like:&lt;form  onSubmit={editInput === """" ? getTodoText : getEdittedText}  className=""mt-4""&gt;  &lt;div className=""input-group""&gt;    &lt;input      type=""text""      placeholder=""Add a todo item...""      className=""form-control""      onChange={editInput === """" ? getInputValue : changeEditValue}      value={editInput === """" ? input : editInput}    /&gt;    &lt;div className=""input-group-append""&gt;      &lt;button        type=""submit""        className={getClassName()}        disabled={input === """" &amp;&amp; editInput === """" ? true : false}      &gt;        {getButtonName()}      &lt;/button&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/form&gt;    Enter fullscreen mode        Exit fullscreen mode    But after some practice, I realized the power it brings to the table. By having your markup and JavaScript together, you can effectively control the entire functioning of the App from a single source. Here's the reasoning that React provides:""Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called ‚Äúcomponents‚Äù that contain both.""In simpler terms, instead of separating the entire app logic from markup, React separates out the app into different components which contain both their respective logic and markup. This ensures that even though individual components contain both HTML and JavaScript, yet the entire App is well separated into different components that handle separate functionalities.üëâ While writing JSX might seem daunting at first, trust me, you'll get used to it in no time and will enjoy it too.      üôè Learn JavaScript before React Please!When you start learning React, one thing you will quickly understand is the importance of having strong grasp over JavaScript Fundamentals.While React might use JSX, but at its core, it's just a mash-up of HTML and Vanilla JavaScript. Without a sound knowledge of JavaScript, you'll have a hard time understanding and using React. Because you will be learning both React and JavaScript at the same time and you won't be able to master either of them.In order to excel at React, a good understanding of JavaScript is must. Especially the new ES6 syntax. It is essential that you understand concepts like arrow functions, object destructing, higher-order array methods, JavaScript objects, arrays, etc. As more often than not you will have to use them in your React Apps.I cannot tell how many times I had to use higher-order array methods like map() and filter() or how many times I created functions using the arrow function syntax.      map() higher order methodreturn (  &lt;React.Fragment&gt;    &lt;ul className=""list-group mt-4""&gt;      {itemList.map((item) =&gt; {        return &lt;Item name={item} key={item} /&gt;;      })}    &lt;/ul&gt;  &lt;/React.Fragment&gt;);    Enter fullscreen mode        Exit fullscreen mode          Arrow functionexport const About = ({ history }) =&gt; {  return (    &lt;div&gt;      &lt;p className=""m-3""&gt;You are on the About Page üòé&lt;/p&gt;      &lt;button        className=""btn btn-dark mx-3 my-2""        onClick={() =&gt; {          history.push(""/"");        }}      &gt;        Back To Home      &lt;/button&gt;    &lt;/div&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    Thus, my advice to new devs, starting out with React is, to first master the basics of JavaScript before moving on to React. It will not only make your life easier, but you will also understand the core concepts of React better, instead of fiddling around with JavaScript concepts.      üõ†Ô∏è Class Vs Functional ComponentsWhen I was starting out with React, I got confused between choosing Class components and Functional Components for my projects. The major difference between them apart from their syntax, was that if you were using class components, then you could use State in your component, something which was not possible in functional components at that time. Furthermore, with class components, you had access to life cycle methods like componentDidMount(), componentDidUpdate() etc.Here's a quick comparison between a very simple class and functional component:      A typical Class Componentimport React from ""react"";export class YourComponentName extends React.Component {  state = {};  render() {    return &lt;div&gt;Hi, I am a class component.&lt;/div&gt;;  }}    Enter fullscreen mode        Exit fullscreen mode          A typical Functional Componentimport React from ""react"";export const YourComponentName = () =&gt; {  return &lt;div&gt;Hi, I am a functional component.&lt;/div&gt;;};    Enter fullscreen mode        Exit fullscreen mode    So, the easy recommendation was that, if you wanted to make your component stateful, you would use class components, if not then you would use functional components. Easy, right? Well... not necessarily.Just as this concept was about to make sense, I discovered React Hooks. I will go more into detail about what Hooks are, and why they are awesome in a later section, but the long and short is that, React Hooks allow us to add state and life cycle methods to functional components.So, your functional components now look like this:import React, { useState } from ""react"";export const YourComponentName = () =&gt; {  const state = useState({});  return &lt;div&gt;Hi, I am a stateful functional component.&lt;/div&gt;;};    Enter fullscreen mode        Exit fullscreen mode    At first, I was quite bummed, to say the least, as I had become accustomed to using class components. But, after using functional components with hooks for some time, I was hooked üòâ. Now, I have switched to exclusively using functional components in all my applications as they are short and concise and anytime I need state in my components, I can easily add it through hooks.      ‚ö° The Power of React Hooks!Now let's talk about React Hooks. Hooks were introduced in React 16.8. Hooks allow you to use state and life cycle methods in functional components. Thus, they allow you to write functional components that are essentially the same as class components since they can include state and other React features.According to the official documentation:""Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.""There are different types of hooks and each is as useful as the next. I won't go into details about each and every hook but will show a brief example of how I have used them. If you want more information about Hooks consider looking up the official documentation.The most common hook is the useState hook which allows you to add state to any functional component. It is extremely easy to use and comes in handy more often than not.import React, { useState } from ""react"";export const MyComponent = () =&gt; {  const [msg, setMsg] = useState(""Hello World!"");  return &lt;div&gt;The message is {msg}&lt;/div&gt;;};    Enter fullscreen mode        Exit fullscreen mode    Another hook which I have used in my projects is the useEffect hook which is similar to the life cycle methods componentDidMount and componentDidUpdate. So, if you want to make API calls or use any other side effects, useEffect is the hook to use.useEffect(() =&gt; {  fetch(""/api/stationeryItems"")    .then((res) =&gt; res.json())    .then((data) =&gt; {      setData(data);    })    .catch((err) =&gt; {      console.log(err.message);    });}, []);    Enter fullscreen mode        Exit fullscreen mode    Finally, if you want to add Redux like functionality in your application, there are 2 hooks which mimic the core state management features. These are useContext and useReducer hooks. These along with the new Context API allow for complete state management without using Redux.      useReducer hook// useReducer() hookconst [state, dispatch] = useReducer(LibraryReducer, initialState);    Enter fullscreen mode        Exit fullscreen mode          useContext hookexport const Book = () =&gt; {  // useContext() hook  const context = useContext(LibraryContext);  return (    &lt;React.Fragment&gt;      &lt;p&gt;I am inside the Book Component ü•≥&lt;/p&gt;      {/* Book Information */}      &lt;p&gt;Book Name: {context.state.name} &lt;/p&gt;      &lt;p&gt;Quantity: {context.state.quantity}&lt;/p&gt;      &lt;p&gt;Book Shelf: {context.state.shelf}&lt;/p&gt;      &lt;button onClick={context.incrementQuantity}&gt;Increment Quantity&lt;/button&gt;    &lt;/React.Fragment&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    I will talk more about state management in the next section but suffice it to say that hooks have really changed the way I write React code. They have allowed me to add any functionality, I think of in my functional components. React Hooks have drastically reduced the amount of code I write, while increasing my productivity along the way.      üîñ Let's talk State ManagementNaturally, as with any JavaScript Framework, whether it be Angular, React or Vue, state management is an important concern. In Single Page Applications, it is essential to keep the state consistent between different components and ensure that it gets updated correctly. React is no different.Therefore, an important concept all React devs should understand is how to effectively manage state in their applications. When I was starting out with React, I was stressed about state management since I knew that React did not include a built-in state management solution at that time. Therefore, most of the online articles and tutorials recommended using Redux. And I had heard that Redux was difficult to learn, it required a lot of boilerplate code and made your application size larger, and so on... So state management was one of my biggest concerns as a new React developer.But now, after working with React for some time, I realized that state management is not actually as difficult as it seems. From what I have gathered there are essentially 3 ways to manage state in your React apps. I will not go into details here, but will briefly touch on the different methods you can use.      üëâ Lifting the stateThe first method is to lift the state to the parent component and pass it to child components through props. This is by far the easiest method to implement but it is only suitable for small applications and does not scale well.      üëâ State management libraries like ReduxThe second and most common method is to use a third-party library for state management. The most common library used with React is Redux. It is one of the most popular state management solutions and has become an industry standard. Though it scales well to larger applications it involves a lot of boilerplate code and adds to the package size.      üëâ Context APIThe third and newest method of State Management in React is using the Context API. This is by far my favorite method of state management, as it is built in to React and therefore, it does not require any third-party library to be installed.Here's what the official documentation says about Context API:""Context provides a way to pass data through the component tree without having to pass props down manually at every level.""Thus, Context allows you to keep the state separate from the Components and access it in whichever component you want without having to pass it as props.Context API by itself is a pretty powerful tool. But Hooks like useReducer and useContext take it to a whole new level and make it a viable alternative to even Redux. Combining Context API with Hooks provides you an effective and elegant solution to state management which is built directly into React.Thus, I have been playing around with Context API for some time now, and in my opinion, it is a worthwhile state management solution for small react apps. For more complex applications, redux remains a good option. But new react devs should at least give context API a shot before jumping into Redux.      üí≠ Closing ThoughtsIn the end, I would say that using React has been a great experience for me. I am still a beginner and I am learning a lot of new things every day. But I wanted to share some of the important points and tips that I have discovered since I started using React. Some of these things drove me absolutely crazy, while I was starting out since I found very conflicting advice on the internet. Therefore, my goal was to share a one-stop guide for programmers who are starting to learn React, like I was, enlisting what I believe, are the most important things to keep in mind as you progress üòä.      ‚ú® Helpful Resources to learn React!Here are some resources that can help you learn React.js and level up as a developer:      YouTube Videos:React Crash CourseReact Projects Playlist by Traversy MediaReact Tutorials Playlist by Dev EdPractical React Playlist by Ben AwadReact tutorial for Beginners by Programming with Mosh      Udemy Courses:Brad Traversy's React Front to Back CourseDevelopedByEd The Creative React and Redux Course      Articles:A Complete Beginner's Guide to React by Ali Spittel",2020-11-23T20:15:22Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Lake Erie Pileup,http://feedproxy.google.com/~r/RBloggers/~3/zQUtLXgVyEg/,"¬†Strong winds caused substantial water surface elevation differences in Lake Erie around November 15, 2020.¬† Here's an animated plot of elevations measured by NOAA.¬† Plot was developed using R and Windows Live Movie MakerThe post Lake Erie Pileup first appeared on R-bloggers.",2020-11-19T18:11:00Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Gamers are logging millions of hours a day on Roblox,https://www.economist.com/graphic-detail/2020/08/21/gamers-are-logging-millions-of-hours-a-day-on-roblox,"The platform, popular with tweens, allows developers to cash in on its success",2020-08-21T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Protestant Christianity is booming in China,https://www.economist.com/graphic-detail/2020/09/15/protestant-christianity-is-booming-in-china,President Xi does not approve,2020-09-15T00:00:00Z,#dataviz
FlowingData,https://flowingdata.com,Where there are hospital staff shortages,https://flowingdata.com/2020/11/23/where-there-are-hospital-staff-shortages/,"Reporting for NPR, Sean McMinn and Selena Simmons-Duffins on staffing shortages:On data&#8230;Tags: coronavirus, curve, hospital, NPR",2020-11-23T12:19:44Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,COVID-19 Coronavirus Infographic Data Pack,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/xxIWC6DPqSc/,"We made an infographic of the best COVID-19 / Coronavirus charts floating around, plus some of our own &#8211; all with the latest data We‚Äôll plan to keep it updated every few days. &#187; See the graphic &#187; Explore the Data: bit.ly/COVID19-DATA related &#187; Look at all infectious diseases in context under the Microbescope &#187; [&#8230;]",2020-03-09T21:15:11Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,436. Forget Everything You Know About Your Dog,https://omny.fm/shows/freakonomics-radio/forget-everything-you-know-about-your-dog,"As beloved and familiar as they are, we rarely stop to consider life from the dog‚Äôs point of view. That stops now. In this latest installment of the Freakonomics Radio Book Club, we discuss Inside of a Dog with the cognitive scientist (and dog devotee) Alexandra Horowitz.",2020-10-22T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,America‚Äôs Hidden Duopoly (Ep. 356 Rebroadcast),https://omny.fm/shows/freakonomics-radio/america-s-hidden-duopoly-ep-356-rebroadcast,"We all know our political system is ‚Äúbroken‚Äù ‚Äî but what if that‚Äôs not true? Some say the Republicans and Democrats constitute a wildly successful industry that has colluded to kill off competition, stifle reform, and drive the country apart. So what are you going to do about it?",2020-09-03T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,426. Should America (and FIFA) Pay Reparations?,https://omny.fm/shows/freakonomics-radio/should-america-and-fifa-pay-reparations,"The racial wealth gap in the U.S. is massive. We explore the causes, consequences, and potential solutions. Also: another story of discrimination and economic disparity, this one perpetrated by an international sporting authority. The first of a two-part series.",2020-07-16T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,423. The Doctor Will Zoom You Now,https://omny.fm/shows/freakonomics-radio/the-doctor-will-zoom-you-now,"Thanks to the pandemic, the telehealth revolution we‚Äôve been promised for decades has finally arrived. Will it stick? Will it cut costs ‚Äî and improve outcomes? We ring up two doctors and, of course, an economist to find out.",2020-06-25T03:00:00Z,#economics #podcast
Google Developers Blog,http://developers.googleblog.com/,Coral makes edge AI even more accessible in 2020,http://developers.googleblog.com/feeds/8146879799949039759/comments/default,Coral makes edge AI even more accessible in 2020,2020-11-19T16:07:34Z,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,Engineering SQL Support on Apache Pinot at Uber,https://eng.uber.com/engineering-sql-support-on-apache-pinot/,"Uber leverages real-time analytics on aggregate data to improve the user experience across our products, from fighting fraudulent behavior on Uber Eats to forecasting demand on our platform.¬†¬†As Uber‚Äôs operations became more complex and we offered additional features and &#8230;The post Engineering SQL Support on Apache Pinot at Uber appeared first on Uber Engineering Blog.",2020-01-15T17:00:35Z,#tech #engineering
Capital One Tech - Medium,https://medium.com/capital-one-tech?source=rss----3db3a67cb648---4,Guardrails for AWS Event-Driven Serverless Architectures,https://medium.com/capital-one-tech/guardrails-for-aws-event-driven-serverless-architectures-f9bc12ad689f?source=rss----3db3a67cb648---4,NA,2020-11-18T16:17:13Z,#tech #engineering
Google AI Blog,http://ai.googleblog.com/,Measuring Gendered Correlations in Pre-trained NLP Models,http://ai.googleblog.com/feeds/2914444782363684520/comments/default,Measuring Gendered Correlations in Pre-trained NLP Models,2020-10-23T13:58:41Z,#tech #engineering
Startups ‚Äì TechCrunch,https://techcrunch.com,Founders seeking their first check need a fundraising sales funnel,https://techcrunch.com/2020/11/23/founders-seeking-their-first-check-need-a-fundraising-sales-funnel/,CEO and co-founder of music tech startup Stem Milana Lewis explains how she landed several superstar investors and raised a little under $22 million.,2020-11-23T18:12:58Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Flying people to the Space Station is SpaceX‚Äôs biggest deal yet,https://www.economist.com/science-and-technology/2020/05/30/flying-people-to-the-space-station-is-spacexs-biggest-deal-yet,It ought also to end NASA‚Äôs old way of commissioning hardware,2020-05-30T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Have Siberian fires been smouldering underground all winter?,https://www.economist.com/science-and-technology/2020/06/06/have-siberian-fires-been-smouldering-underground-all-winter,If so it could be a warning,2020-06-06T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Trials of a vaccine and new drug raise hope of beating covid-19,https://www.economist.com/science-and-technology/2020/07/20/trials-of-a-vaccine-and-new-drug-raise-hope-of-beating-covid-19,"The latest tests with Oxford University‚Äôs vaccine, and interferon beta, look promising",2020-07-20T00:00:00Z,#tech #news
