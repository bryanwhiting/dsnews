feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#289 Discovering exoplanets with Python,https://talkpython.fm/episodes/show/289/discovering-exoplanets-with-python,"When I saw the headline ""Machine learning algorithm confirms 50 new exoplanets in historic first"" I knew the Python angle of this story had to be told! And that's how this episode was born. Join David Armstrong and Jev Gamper as they tell us how they use Python and machine learning to discover not 1, but 50 new exoplanets in pre-existing Keplar satellite data.Links from the showJev Gamper on Twitter: @brutforcimagMachine learning algorithm confirms 50 new exoplanets in historic first article: techrepublic.comSponsorsBrilliantTalk Python Training",2020-11-09T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,"#287 Testing without dependencies, mocking in Python",https://talkpython.fm/episodes/show/287/testing-without-dependencies-mocking-in-python,"We know our unit tests should be relatively independent from other parts of the system. For example, running a test shouldn't generally call a credit card possessing API and talk to a database when your goal is just to test the argument validation. And yet, your method does all three of those and more. What do you do? Some languages use elaborate dependency passing frameworks that go under the banner of inversion of control (IoC) and dependency injections (DI). In Python, the most common fix is to temporarily redefine what those two functions do using patching and mocking.On this episode, we welcome back Anna-Lena Pokes to talk us through the whole spectrum of test doubles, dummies, mocks, and more.Links from the showAnna-Lena's personal site: alpopkes.com100 Days of Code episode: talkpython.fm/186Anna-Lena on Github: github.comPyCon talk from Lisa Road (2018) - “Demystifying the patch function”: youtube.comPyCon talk from Edwin Jung (2019) - Mocking and Patching Pitfalls: youtube.comKeynote talk “Finding Magic in Python” (about magical universeproject): youtube.comBlog post about mocking in Python: alpopkes.comStackoverflow post on difference between stubs and mocks: stackoverflow.comFreezegun project: github.comKI Macht Schule (AI goes to school): ki-macht-schule.deCode Combat: codecombat.comPDB++: github.comSponsorsLinodeMonday.comTalk Python Training",2020-10-21T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Self Service Real Time Data Integration Without The Headaches With Meroxa - Episode 153,https://www.dataengineeringpodcast.com/meroxa-data-integration-episode-153/#utm_source=rss&utm_medium=rss,"Analytical workloads require a well engineered and well maintained data integration process to ensure that your information is reliable and up to date. Building a real-time pipeline for your data lakes and data warehouses is a non-trivial effort, requiring a substantial investment of time and energy. Meroxa is a new platform that aims to automate the heavy lifting of change data capture, monitoring, and data loading. In this episode founders DeVaris Brown and Ali Hamidi explain how their tenure at Heroku informed their approach to making data integration self service, how the platform is architected, and how they have designed their system to adapt to the continued evolution of the data ecosystem.",2020-10-05T23:33:06Z,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,How to Switch Into a Data Science Career,https://www.datacamp.com/community/blog/switching-into-data-science,Six powerful lessons we wish we’d known before switching into data science six months ago.,NA,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,What is SQL?,https://www.datacamp.com/community/tutorials/what-is-sql,,NA,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Trees and forests,http://feedproxy.google.com/~r/RBloggers/~3/t_FXU8EwQwI/,"For my ACT6100 weekly quiz, I usually generate some datasets, and then ask students to compare various predictive algorithms. Last week, it was about classification trees and random forests. And students were surprised to have such differences (they had to estimate the probability to have a specific label, for the ...The post Trees and forests first appeared on R-bloggers.",2020-11-30T15:51:24Z,#datascience #tutorials
Blog – Machine Learning Mastery,https://machinelearningmastery.com,Books on Genetic Programming,https://machinelearningmastery.com/books-on-genetic-programming/,"Genetic Programming (GP) is an algorithm for evolving programs to solve specific well-defined problems. It is a type of automatic programming intended for challenging problems where the task is well defined and solutions can be checked easily at a low cost, although the search space of possible solutions is vast, and there is little intuition [&#8230;]The post Books on Genetic Programming appeared first on Machine Learning Mastery.",2020-12-01T18:00:39Z,#datascience #tutorials
DEV Community,https://dev.to,A comparison of state management in React with Mobx vs  State lifting,https://dev.to/ndrean/a-comparison-of-state-management-in-react-with-mobx-vs-state-lifting-54l4,"This post is an attempt to compare state management between Mobx and the standard state lifting method on a tiny example. It exposes a starter's viewpoint on how both methods can be used and focuses on not using classes  since most if not all examples of code use classes.Cost of MobxBefore starting, we firstly note that using Mobx adds 45 kB to the code as seen in VS Code. We check this on the production build code. We can use the 'source-map-explorer' tool. For the code using only React, we find that the React-Dom bundle is 115 kB out of 133 kB. When we use Mobx, on top of React, Mobx adds 45 kB and the total code is 182 kB.Then it may be interesting to quote Mobx: ""using observables inside React components adds value as soon as they are either 1) deep, 2) have computed values or 3) are shared with other observer components"". Let's work on the tiny example found at  Mobx's todo list which seems to be a good candidate with regard to the above criterias. This example handles a list of items where:every item can be checked or not,checking will change the style of the item (additional feature)we can add a new item,and we count the number of unchecked items.We define 5 components: App, TodoListView, TodoView, NewTodo and the TodosCount. We also use the tiny library clsx for conditional class rendering.      Mobx version      Debugging toolWe may want to enable the very useful debugging config to track errors (unneeded decorators, unwatched actions...) by using:import { configure } from ""mobx"";configure({  enforceActions: ""always"",  computedRequiresReaction: true,  reactionRequiresObservable: true,  observableRequiresReaction: false,  disableErrorBoundaries: true});    Enter fullscreen mode        Exit fullscreen mode    For example, if you get a message like ""Derivation observer is created/updated without reading any observable value"", this means that some component is wrongly decorated with  observer. However, I have seen some issues in Github so I would stay prudent with some conclusions. Anyway, still learning!      Domain storeWe define our domain store, the list of todos. It is an object that will be proxied by the observable method. Here we remove the logic from the components and move it into the store. This store contains: the attribute todos=[], an array of objects in the form  { id: Math.random(), title: ""first"", finished: false }three functions:  a getter named 'unfinished' that returns just a value, and two action 'addTodo' and 'toggle' that modifies the store. These functions mutate directly the state within the store, and these methods are named ""actions"". This is the big difference with pur React: we don't have to write pur functions where we use copies of the state to manipulate it.Wrapping it with observable defines what Mobx should monitor.# mobx-store.jsimport { observable, action } from ""mobx"";const store = observable({  todos: [],  get unfinished() {    return this.todos.filter((todo) =&gt; todo.finished === false).length;  },  addTodo: action((todo) =&gt; store.todos.push(todo)),  toggle: action((todoid) =&gt; {    const id = store.todos.findIndex((todo) =&gt; todo.id === todoid);    return (store.todos[id].finished = !store.todos[id].finished);  }),});    Enter fullscreen mode        Exit fullscreen mode    We instantiate the store by using the 'addTodo' method we created:store.addTodo({ id: Math.random(), title: ""first"", finished: false });...    Enter fullscreen mode        Exit fullscreen mode    This store will be imported into the main file along with the libraries so the object store and it's methods are available to each component.import { observer } from ""mobx-react-lite"";import store from './mobx-store';import clsx from ""clsx"";import ""./index.css"";    Enter fullscreen mode        Exit fullscreen mode          Decorate Components with observerThe arrow functions components will be proxied (or not) with the observer decorator to create a reactive context. The rule is: Mobx should only read observable within an observer component. The debug config helps to define which component should be proxied with observer.With the closure/import, the store is available within each component. Not everything should be handled by the store. Mobx encourages to use local state with React.useState whenever local state is needed. These are Mobx's recommendations.This proxying makes the code cleaner compared to the state lifting technique where we have to explicitly pass down the references to the methods. It is also shorter compared to the useContext hook. We just use the methods defined in the store where needed. For example, the component that renders each todo uses the method 'toggle' on the boolean 'finished'. The code for this 'toggle' method has be written to react in the context it is called, namely within the grandchild component 'TodoView' of 'App'.const TodoView = observer(({ todo }) =&gt; {  const mystyle = clsx({ ischecked: todo.finished,    notchecked: !todo.finished,  });  return (    &lt;&gt;      &lt;li&gt;        &lt;label htmlFor={todo.title} className={mystyle}&gt;          &lt;input            type=""checkbox""            id={todo.title}            defaultChecked={todo.finished}            onChange={() =&gt; store.toggle(todo.id)}          /&gt;          {todo.title}        &lt;/label&gt;      &lt;/li&gt;    &lt;/&gt;  );});    Enter fullscreen mode        Exit fullscreen mode    The todo creation uses the method addTodo defined in the store. (Note: curiously, no decorating is expected here as per the debugging tool settings).const NewTodo = () =&gt; {  const [newTitle, setNewTitle] = React.useState("""");  return (    &lt;form      onSubmit={(e) =&gt; {        e.preventDefault();        store.addTodo({ title: newTitle, id: Math.random(), finished: false });        setNewTitle("""");      }}    &gt;      &lt;input        type=""text""        value={newTitle}        onChange={(e) =&gt; setNewTitle(e.target.value)}      /&gt;      &lt;input type=""submit"" value=""New item"" /&gt;    &lt;/form&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    The component that renders the list of todos is a classic map:const TodoListView = observer(({ todoList }) =&gt; {  return (    &lt;ul&gt;      {todoList.todos &amp;&amp; todoList.todos.map((todo) =&gt; &lt;TodoView todo={todo} key={todo.id} /&gt;)}    &lt;/ul&gt;  );});    Enter fullscreen mode        Exit fullscreen mode    This component renders the count of unchecked todos and calls the  'unfinished' method defined in the store.const TodosCount = observer(() =&gt; {  return &lt;h3&gt;Mobx: UnFinished todos count: {store.unfinished}&lt;/h3&gt;;});    Enter fullscreen mode        Exit fullscreen mode    Mobx recommends to 'grab values from objects as late as possible': so instead of just passing store.todos, we pass the whole store object to the higher component App. (Note: curiously, no decorator is needed here as per to the debug config).const AppMobx = () =&gt; {  return(   &lt;&gt;    &lt;TodosCount /&gt;      &lt;TodoListView todoList={store} /&gt;   &lt;/&gt;  )};    Enter fullscreen mode        Exit fullscreen mode          State lifting methodWith the method, the higher component App will handle state, namely the 'todos': it is an array of objects in the form {id:number, title:string, finished: boolean}. While with Mobx the actions are in the store and we just call them where needed, here the actions that modify state are defined in the higher component and we pass references along to the children.For the component that renders each todo, we just use the reference to the function 'toggle':const TodoView = ({ todo, onToggle }) =&gt; {  const mystyle = clsx({    ischecked: todo.finished,    not checked: !todo.finished,  });  return (    &lt;li&gt;      &lt;label htmlFor={todo.title} className={mystyle}&gt;        &lt;input          type=""checkbox""          id={todo.title}          defaultChecked={todo.finished}          onChange={() =&gt; onToggle(todo.id)}        /&gt;        {todo.title}      &lt;/label&gt;    &lt;/li&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    This todo creation is very similar:function NewTodo({ onhandleAddTodo }) {  const [newTitle, setNewTitle] = React.useState("""");  return (    &lt;form      onSubmit={(e) =&gt; {        e.preventDefault();        onhandleAddTodo({ title: newTitle, id: Math.random(), finished: false });        setNewTitle("""");      }}    &gt;      &lt;input        type=""text""        value={newTitle}        onChange={(e) =&gt; setNewTitle(e.target.value)}      /&gt;      &lt;input type=""submit"" value=""Submit"" /&gt;    &lt;/form&gt;  );}    Enter fullscreen mode        Exit fullscreen mode    and the todolist rendering identical:const TodoListView = ({ todoList, onhandleToggle }) =&gt; {  return (      &lt;ul&gt;        {todoList &amp;&amp;          todoList.map((todo) =&gt; (            &lt;TodoView todo={todo} key={todo.id} onToggle={onhandleToggle} /&gt;          ))}      &lt;/ul&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    function TodosCount({ count }) {  return &lt;h3&gt;State lift: UnFinished todos count: {count}&lt;/h3&gt;;}    Enter fullscreen mode        Exit fullscreen mode    The higher component holds state, the todos. All the actions that modify state are defined here.const AppStateLift = () =&gt; {  const [todos, setTodos] = React.useState(initList);  const [count, setCount] = React.useState(0);  React.useEffect(() =&gt; {    setCount(todos.filter((todo) =&gt; todo.finished === false).length);  }, [todos]);  function hanleToggle(id) {    setTodos((previous) =&gt; {      const foundId = previous.findIndex((todo) =&gt; todo.id === id);      const todoAtFoundId = previous[foundId];      const newTodos = [...previous];      newTodos[foundId] = {        ...todoAtFoundId,        finished: !todoAtFoundId.finished,      };      return newTodos;    });  }  function handleAddTodo(todo) {    setTodos((previous) =&gt; [...previous, todo]);  }  return (    &lt;div&gt;      &lt;TodosCount/&gt;      &lt;NewTodo onhandleAddTodo={handleAddTodo} /&gt;      &lt;TodoListView        todoList={todos}        onhandleToggle={handleToggle}      /&gt;    &lt;/div&gt;  );};    Enter fullscreen mode        Exit fullscreen mode    and finally:ReactDOM.render(  &lt;div&gt;    &lt;AppMobx /&gt;    &lt;AppStateLift /&gt;  &lt;/div&gt;,  document.getElementById(""app""));    Enter fullscreen mode        Exit fullscreen mode    Thanks for reading!",2020-12-02T13:52:43Z,#datascience #tutorials
Information is Beautiful,https://informationisbeautiful.net,40+ Coronavirus Myths & Misconceptions Debunked,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/n6tiAagTF40/,A round-up of the most contagious falsehoods circulating in the population. Let us know if we missed any! &#187; See the graphic &#187; Check the sources,2020-03-25T20:51:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Where are the world’s most expensive cities?,https://www.economist.com/graphic-detail/2020/11/18/where-are-the-worlds-most-expensive-cities,Paris and Zurich rejoin Hong Kong at the top of the latest ranking,2020-11-18T00:00:00Z,#dataviz
FlowingData,https://flowingdata.com,"Mapping 250,000 people",https://flowingdata.com/2020/12/01/mapping-250000-people/,"As we&#8217;ve talked about before, it can be hard to really understand the&#8230;Tags: coronavirus, deaths, scale, Washington Post",2020-12-01T08:11:37Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Facebook offers a distorted view of American news,https://www.economist.com/graphic-detail/2020/09/10/facebook-offers-a-distorted-view-of-american-news,Partisan news sites attract more attention on the platform than they do elsewhere on the web,2020-09-10T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,424. How to Make Your Own Luck,https://omny.fm/shows/freakonomics-radio/how-to-make-your-own-luck,"Before she decided to become a poker pro, Maria Konnikova didn’t know how many cards are in a deck. But she did have a Ph.D. in psychology, a brilliant coach, and a burning desire to know whether life is driven more by skill or chance. She found some answers in poker — and in her new book The Biggest Bluff, she’s willing to tell us everything she learned.",2020-07-02T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,"""I Started Crying When I Realized How Beautiful the Universe Is” | People I (Mostly) Admire Ep. 2: Mayim Bialik",https://omny.fm/shows/freakonomics-radio/i-started-crying-when-i-realized-how-beautiful-the,"She’s best known for playing neurobiologist Amy Farrah Fowler on The Big Bang Theory, but the award-winning actress has a rich life outside of her acting career, as a teacher, mother — and a real-life neuroscientist.  Steve Levitt tries to learn more about this one-time academic and Hollywood non-conformist, who is both very similar to him and also quite his opposite.",2020-09-05T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,430. Will a Covid-19 Vaccine Change the Future of Medical Research?,https://omny.fm/shows/freakonomics-radio/will-a-covid-19-vaccine-change-the-future-of-medic,"We explore the science, scalability, and (of course) economics surrounding the global vaccine race. Guests include the chief medical officer of the first U.S. firm to go to Phase 3 trials with a vaccine candidate; a former F.D.A. commissioner who’s been warning of a pandemic for years; and an economist who thinks Covid-19 may finally change how diseases are cured.",2020-08-27T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,434. Is New York City Over?,https://omny.fm/shows/freakonomics-radio/is-new-york-city-over,"The pandemic has hit America's biggest city particularly hard. Amidst a deep fiscal hole, rising homicides, and a flight to the suburbs, some people think the city is heading back to the bad old 1970s. We look at the history — and the data — to see why that’s probably not the case.",2020-10-08T03:00:00Z,#economics #podcast
Stories by Pinterest Engineering on Medium,https://medium.com/@Pinterest_Engineering?source=rss-ef81ef829bcb------2,Redesigning the Pinterest Homepage,https://medium.com/pinterest-engineering/redesigning-the-pinterest-homepage-b269dbd97692?source=rss-ef81ef829bcb------2,NA,2020-11-02T18:19:22Z,#tech #engineering
Netflix TechBlog - Medium,https://netflixtechblog.com?source=rss----2615bd06b42e---4,How Netflix Scales its API with GraphQL Federation (Part 1),https://netflixtechblog.com/how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2?source=rss----2615bd06b42e---4,NA,2020-11-09T16:09:23Z,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,"Designing Edge Gateway, Uber’s API Lifecycle Management Platform",https://eng.uber.com/gatewayuberapi/,"The making of Edge Gateway, the highly-available and scalable self-serve gateway to configure, manage, and monitor APIs of every business domain at Uber.Evolution of Uber&#8217;s API gatewayIn October 2014, Uber had started its journey of scale in what &#8230;The post Designing Edge Gateway, Uber’s API Lifecycle Management Platform appeared first on Uber Engineering Blog.",2020-08-18T16:00:33Z,#tech #engineering
Data Science in Airbnb Engineering &amp; Data Science on Medium,https://medium.com/airbnb-engineering/tagged/data-science?source=rss----53c7c27702d5--data_science,Machine Learning-Powered Search Ranking of Airbnb Experiences,https://medium.com/airbnb-engineering/machine-learning-powered-search-ranking-of-airbnb-experiences-110b4b1a0789?source=rss----53c7c27702d5--data_science,NA,2019-02-05T21:01:00Z,#tech #engineering
Startups – TechCrunch,https://techcrunch.com,Jitsu nabs $2M seed to build open-source data integration platform,https://techcrunch.com/2020/12/02/jitsu-nabs-2m-seed-to-build-open-source-data-integration-platform/,"Jitsu, a graduate of the Y Combinator Summer 2020 cohort, is developing an open-source data integration platform that helps developers send data to a data warehouse. Today, the startup announced a $2 million seed investment. Costanoa Ventures led the round with participation from Y Combintaor, The House Fund and SignalFire. In addition to the open-source [&#8230;]",2020-12-02T15:00:30Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Sieve-toothed seals may be whales in the making,https://www.economist.com/science-and-technology/2020/11/21/sieve-toothed-seals-may-be-whales-in-the-making,They filter small crustaceans from the water,2020-11-21T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,The T-cell immune response to covid lasts at least six months,https://www.economist.com/science-and-technology/2020/11/07/the-t-cell-immune-response-to-covid-lasts-at-least-six-months,That is good news,2020-11-07T00:00:00Z,#tech #news
Startups – TechCrunch,https://techcrunch.com,AgentSync lands consecutive rounds as insurtech booms,https://techcrunch.com/2020/12/02/agentsync-lands-consecutive-rounds-as-insurtech-booms/,"This morning AgentSync, an insurtech startup focused on agent compliance management, announced a new funding round worth $6.7 million. The financing event, led by well-known SaaS founder David Sacks&#8217; Craft Ventures, included dollars from both Operator Collective and prior investors. The new capital will help AgentSync move faster, with co-founder and CEO Niranjan Sabharwal saying [&#8230;]",2020-12-02T16:00:22Z,#tech #news
