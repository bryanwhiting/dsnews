feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
DataCamp Community,https://www.datacamp.com/community,How Data Science is Used in Every Step of the Automotive Lifecycle,https://www.datacamp.com/community/blog/automotive-data-science,"Making better, safer vehicles requires a data-driven approach. Data science unlocks better mobility solutions for all with connected and autonomous vehicles.",NA,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,How Shopify Is Building Their Production Data Warehouse Using DBT - Episode 171,https://www.dataengineeringpodcast.com/shopify-data-warehouse-with-dbt-episode-171/#utm_source=rss&utm_medium=rss,"With all of the tools and services available for building a data platform it can be difficult to separate the signal from the noise. One of the best ways to get a true understanding of how a technology works in practice is to hear from people who are running it in production. In this episode Zeeshan Qureshi and Michelle Ark share their experiences using DBT to manage the data warehouse for Shopify. They explain how the structured the project to allow for multiple teams to collaborate in a scalable manner, the additional tooling that they added to address the edge cases that they have run into, and the optimizations that they baked into their continuous integration process to provide fast feedback and reduce costs. This is a great conversation about the lessons learned from real world use of a specific technology and how well it lives up to its promises.",2021-02-09T01:43:41Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,"#307 Python from 1994 to 2021, my how you've grown!",https://talkpython.fm/episodes/show/307/python-from-1994-to-2021-my-how-youve-grown,"Python has changed a lot since its inception 30 years ago. On this episode, you'll meet Paul Everitt and Barry Warsaw. They have both been involved with Python since the very first Python conference (called SPAM1 even). We discuss how it's changed but also how so many of the pressures and ideas from the very early days are still playing out in 2021. I'm sure you'll enjoy all the stories and reminiscing.Links from the showPaul on Twitter: @paulweverittBarry on Twitter: @pumpichankEpisode live stream: youtube.comA Python Developer Explores Apple's M1 video: youtube.comLet's Build a Fast, Modern Python API with FastAPI webcast: youtube.comPython.org 1997: python.orgPython is eating the world: How one developer's side project became the hottest programming language on the planet: techrepublic.comSome of Barry's music: soundcloud.comBarry’s early history of Python slides from BayPiggies: slides.comBackstory and liner notes for the Zen of Python song: wefearchange.orgZen of Python song: youtube.comPyCon Ticket Giveaway: talkpython.fm/pycon2021SponsorsSquareLinodeTalk Python Training",2021-03-11T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#303 Python for Astronomy with Dr. Becky,https://talkpython.fm/episodes/show/303/python-for-astronomy-with-dr.-becky,"If you are involved in science or use computational tools in your work, you should be using code to solve your problem. On this episode, we have Dr. Becky Smethurst who's an astrophysicist at Oxford University. She uses Python to explore galaxies and black holes. Learn how she's using Python to make new discoveries at the cutting edge of research and dive into a couple of her YouTube videos aimed at spreading scientific truth in an entertaining wrapper.Links from the showDr. Becky on Twitter: @drbecky_Dr. Becky's YouTube channel: youtube.com5 ways I use code as an astrophysicist video: youtube.comAstrophysicist reacts to funny space MEMES video: youtube.comA day in the life of an Oxford University Astrophysicist: youtube.comBook: Space: 10 things you should know: amazon.comSpaceMemesApple maps: imageOtter space: imageEclipses: imageSteals a cow: imageBlack holes: imageYouTube live stream: youtube.comSponsorsLinodeCloudEnvTalk Python Training",2021-02-12T00:00:00Z,#datascience #ds #podcast
DEV Community,https://dev.to,"React Custom Hooks Tutorial - Creating useOnline, Testing and Publishing It",https://dev.to/shahednasser/react-custom-hooks-tutorial-creating-useonline-testing-and-publishing-it-1bbl,"This was originally posted on my personal blogIn this tutorial, we'll go over how to create a simple custom React hook, testing it locally, and then publishing it on NPM. The React hook we'll create isuseOnlinewhich detects if the user goes offline and shows them a message that they're offline.After implementing it, we'll check how we can test it locally, then publishing it on NPM.If you're checking out this tutorial to learn only how to create a custom hook to use it in an existing project without intending on publishing it as a package on NPM, then you can stop before the testing and publishing part of this tutorial. You probably also won't need to go through the Setup part as well.The code for this tutorial is available on this GitHub Repository.      What are Custom Hooks?Custom hooks hold a certain logic that makes use of React's hooks like useState, useEffect, etc... You usually create custom hooks when a certain part of your project is reusable and makes use of React's hooks. So, you create a custom hook that you can use throughout your project just like you would use React's hooks. It should also start with use.      SetupLet's start by creating a new directory and changing to it:mkdir use-onlinecd use-onlineThen, we'll initialize our NPM project:npm initYou'll have to enter some information that will go into package.json like package name, description, author, main entry, etc... You can use the default settings for now.Once you're done, you'll have an empty NPM package at your hand. Let's now install the dependencies we'll be using to develop our custom React hook:npm i --save-dev react @babel/cli copyfilesWe're installing React since we are developing a custom hook. We're also installing babel's CLI to build our code later on, and we're installing copyfiles which we will use later as well when we are getting our package ready for publishing.Once we're done with that, we're ready to implement our custom hook.      Implementing useOnlineAs I mentioned in the beginning,useOnlinewill detect whenever the user is online or offline. This means that it will manage a state for the user's connectivity status, and listen to any changes in the user's connectivity and update it accordingly.So,useOnlinewill make use ofuseStatusto keep track of the user's connectivity, and will useuseEffectto register event listeners for the eventsonlineandofflineto set the state accordingly. In the end,useOnlinewill just return the state which we can use in other components to track the user's connectivity without repeating the logic behind it.Let's start by creating the file that will hold our custom hook. Createsrc/useOnline.jswith the following content:import { useState, useEffect } from 'react'function useOnline () {}export default useOnlineWe're just importinguseStateanduseEffectto use them in a bit, declaring the custom hookuseOnlineand exporting it.Now, let's get to the code of the hook. First, let's create the state that will hold the user's connectivity:function useOnline () {    const [online, setOnline] = useState(navigator.onLine);}onlinewill hold the state of the user's connectivity and it will be a boolean. If the user is online it will be true, if not it will be false. For its initial value, we are using the value ofnavigator.onLinewhich returns the online status of the browser.Next, we need to listen to theonlineandofflineevents. Theonlineevent occurs when the user goes online, and theofflineevent occurs when the user goes offline. To add the listeners, we will useuseEffect:function useOnline () {    const [online, setOnline] = useState(navigator.onLine)    useEffect (() =&gt; {        window.addEventListener('online', function () {            //TODO change state to online        });        window.addEventListener('offline', function () {            //TODO change state to offline        });    }, [])}So, we are adding event listeners to the online and offline events insideuseEffectcallback. We are also passing an empty array as a second parameter foruseEffect. This ensures that the callback is only called on mounting the component.Now, let's add the logic inside each of the listeners. We just need to change the value ofonlinebased on the event. To do this, we will usesetOnline:useEffect (() =&gt; {    window.addEventListener('online', function () {        setOnline(true)    });    window.addEventListener('offline', function () {        setOnline(false)    });}, [])Pretty easy. Our code now adds an event listener to both online and offline events, which changes the value of our state online based on the user's connectivity.When adding event listeners or adding any kind of subscriptions, we need to make sure that we are cleaning up after the component unmounts. To do that, we return a function inuseEffectthat removes the event listeners on unmount.Since we will be usingremoveEventListenerto remove the event listeners, which takes the event listener we are moving as a second parameter, let's remove our event listeners to functions that we can reference:function offlineHandler () {    setOnline(false)}function onlineHandler () {    setOnline(true)}useEffect (() =&gt; {    window.addEventListener('online', onlineHandler)    window.addEventListener('offline', offlineHandler)    return () =&gt; {        window.removeEventListener('online', onlineHandler)        window.removeEventListener('offline', offlineHandler)    }}, [])We moved our event listeners to functions outsideuseEffect(you can also add them inside instead) and we are passing them as the event listeners inaddEventListenerandremoveEventListenerinsideuseEffectfor both theonlineandofflineevents.The last thing we need to do in our custom hook is return the state we are changing. This way we can use this state in other components with all the logic behind it in one place.So, the full code foruseOnlinewill be:import { useState, useEffect } from 'react'function useOnline () {    const [online, setOnline] = useState(navigator.onLine)    function offlineHandler () {        setOnline(false)    }    function onlineHandler () {        setOnline(true)    }    useEffect (() =&gt; {        setOnline(navigator.onLine)        window.addEventListener('online', onlineHandler)        window.addEventListener('offline', offlineHandler)        return () =&gt; {            window.removeEventListener('online', onlineHandler)            window.removeEventListener('offline', offlineHandler)        }    }, [])    return online}export default useOnline;That's it! We created a custom hook that makes use of React hooks likeuseStateanduseEffectto determine the user's connectivity.      Preparing the NPM PackageIf you want to publish your custom hook on NPM, you need to prepare the package to be published and used. There are certain things that need to be done, especially inpackage.json.In the beginning, we installed@babel/cliandcopyfiles. This is where we'll put them into use.Package InformationWhen you first runnpm inityou are asked to enter a few information like package name, description, author, version, license, etc... If you've used the default information, or you want to change this information, make sure you change them prior to publishing. You can do that in thepackage.jsonfile.Note that thenameinpackage.jsonis the package name that people will use to install it. So, make sure it's exactly what you want to call it.DependenciesWhen publishing a package, make sure you are listing the dependencies required correctly. If some dependencies are only required during development and are not necessary to install when they are being used, then include them underdevDependencies.In our example, we should have:""devDependencies"": {    ""react"": ""^17.0.1"",    ""@babel/cli"": ""^7.13.14"",    ""copyfiles"": ""^2.4.1""  }Note that the versions might be different in your project but that's fine.There's one more thing to note: In a React project, only one installation or instance ofreactis allowed. Meaning that your package shouldn't install React as well when installing it in a project.So, let's changereactto be a peer dependency like this:""peerDependencies"": {    ""react"": ""^16.8.0 || ^17.0.1""  },  ""devDependencies"": {    ""@babel/cli"": ""^7.13.14"",    ""copyfiles"": ""^2.4.1""  }When adding a dependency inpeerDependencies, thereactpackage you are using in your project that will include this package will be used instead of installing a new one. We are also allowing the version to be at least16.8.0since that's when React Hooks were introduced.ScriptsTo make sure our package is ready for use, we will add scripts that will build our React custom hook usingbabel:""scripts"": {    ""prebuild"": ""npm i"",    ""build"": ""babel src --out-dir dist"" },Now, whenever we runbuild,prebuildwill run first to ensure that the dependencies required are installed, then the build script will compile the Javascript files in oursrcdirectory (which isuseOnline.js) and outputs the result indist.mainIf we want our package to be used like this:import useOnline from 'use-online'Then we need to specify what we are exporting and which file will be used for the import. It's themainfile in our package.In our case, it will be the output of thebuildscript:""main"": ""dist/useOnline.js""filesWhen publishing a package, by default, it will publish all the files and directories starting from the root directory. This can increase the package's size significantly, especially if there are a lot of redundant files or files that are not necessary for the package to be used.In our example, if you look at theGitHub Repository,  you can see that there's anexampledirectory. We will get to what that holds later, but a lot of times you might have examples, images, or other files that might be necessary for the package development-wise, but not when it's published.To decrease the package size and make sure only relevant files are included, we use thefileskey:""files"": [    ""dist"" ],filestakes an array that holds all the files or directories that should be included in the package once published. In our case, it will just be thedistdirectory that will hold our built code.typesThis one is purely optional and I'm using it in its simplest form. You can add a Typescript declaration for your package. To do so, we'll createsrc/useOnline.d.tswith the following content:declare module 'use-online' {    export default function useOnline (): boolean}This will declare the moduleuse-onlinewhich exports the functionuseOnlinethat returns boolean which is the online status.Next, we will add a new script inpackage.json:""scripts"": {    ""prebuild"": ""npm i"",    ""build"": ""babel src --out-dir dist"",    ""postbuild"": ""copyfiles -u 1 ./src/useOnline.d.ts ./dist""  },Thepostbuildscript will run after thebuildscript is finished. It will copysrc/useOnline.d.tsto thedistdirectory.Last, we will add thetypeskey inpackage.json:""types"": ""dist/useOnline.d.ts"",This will make your package a Typescript package, although in Typescript packages you wouldn't really be doing it this way. This is just a simple form of how to do it.      Testing Our Custom Hook LocallyIf you are adding your custom hook to your existing project, then you can probably just test it there. However, if you are creating a custom hook to publish online, and you want to test it as a separate package, this section is for you.In theGitHub RepositoryI created for this tutorial,  you can see anexamplefolder. This folder holds a website built usingcreate-react-appthat is just used to test ouruse-onlinepackage that holds theuseOnlinehook.If you don't have a project to testuse-online, let's create one just for the purpose by running the following command:npx create-react-app exampleThis will create a new directoryexamplethat will hold a Single Page Application (SPA) built with React.Before changing into that directory. Let's look into how we'd useuse-onlineif it's not actually a package on NPM. As you probably already know, you can install any package on NPM using theinstalloricommand like this:npm install &lt;PACKAGE_NAME&gt;However, how do we install a package that is only available locally? We will youlinking.npm-linkallows us to create a symlink of our package in the global folder on our machine. This way, we can ""install"" local packages in other projects on our machine for purposes like testing.What we will do is we will create a link ofuse-online, then use it in theexampleproject we just created.Inside the root directory ofuse-onlinerun the following:npm linkOnce this is done, a symbolic link will be created to this package. We can now change to the example directory and ""install"" theuse-onlinepackage by linking to it:cd examplenpm link use-onlineOnce linked, you can now useuse-onlinein this project as if it was installed like any other NPM package. Any changes you make inuse-onlinewill automatically be portrayed in the package.Before we can useuse-online, let's go its root directory and run the build command:npm run buildThis will run NPM install, compiles the code withbabel, then (if you followed along with the typescript part) copies the typescript declaration file todistI recommend before testing it you remove thenode_modulesdirectory. As we mentioned before, when usingpeerDependenciesReact will not be installed if the project you are installinguse-onlineinto already has it installed. However, when we ran the build command, the package was on its own and there was noreactdependencies installed so it installedreact. Since we are linking to it and not actually installing it inexample, thenode_modulesdirectory ofuse-onlinewill be inside thenode_modulesdirectory ofexample, which will lead to tworeactinstances insideexample. So, make sure to deletenode_modulesinuse-onlinebefore testing it.We will just be adding three 3 lines inexample/src/App.js. First, we will import our custom hook:import useOnline from 'use-online'Second, inside theAppcomponent, we will use theuseOnlinehook to get theonlinestate:function App() {  const online = useOnline()  //... rest of the code}Third and last, we will add in the rendered part a condition to display to the user that they're offline:return (    &lt;div className=""App""&gt;      &lt;header className=""App-header""&gt;        {!online &amp;&amp; &lt;p&gt;You're Offline&lt;/p&gt;}        &lt;img src={logo} className=""App-logo"" alt=""logo"" /&gt;        &lt;p&gt;          Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.        &lt;/p&gt;        &lt;a          className=""App-link""          href=""https://reactjs.org""          target=""_blank""          rel=""noopener noreferrer""        &gt;          Learn React        &lt;/a&gt;      &lt;/header&gt;    &lt;/div&gt;  );Notice the line we added:{!online &amp;&amp; &lt;p&gt;You're Offline&lt;/p&gt;}Whenonlineis false, it means that the user is offline so we're showing them the message. Remember that the logic behind changing the state based on the user's connectivity is actually done insideuseOnline. We just have to use the returnedonlinevalue and everything else is done inside the custom hook.Let's now start the development server by running:npm startIt will just be the default React page that we see everytime we start a newcreate-react-appproject:The best way to testuseOnlineby simulating going offline. To do that, open the devtools then go to the Application tabAs you can see there's a checkbox to simulate an offline browser. This is used for testing service workers but it will still work for any kind of testing regarding the user's connectivity.Once you check the Offline checkbox, you should see the ""You're Offline"" message we added:Our custom hook works! Try turning it on and off. When you check the Offline checkbox, the message will show. When you check it off, the message will be removed.      Publishing Your Custom HookNow that we're done testing our custom hook, and we configured everything in our package, we are ready to publish it on NPM.First, make sure you have an account onNPM. If you don't, you need to create one first.In your terminal run:npm loginYou'll have to enter your username, password, and email. If it's all correct, you will be authenticated and authorized to publish your package.In the root directory of your package, run:npm publishUnless any errors occur, that's all you'll have to do! Your package will be live once this command is done running.If you get an error regarding an existing package with a similar name, make sure to rename your package insidepackage.json:""name"": ""NEW_PACKAGE_NAME""Then try again.If your package was published successfully, you will receive an email to notify you about it and you can go ahead and view it on NPM. You can then inside your project run:npm install PACKAGE_NAMEAnd it will be installed just like any package out there!Updating Your PackageIf you later on decided to fix some bugs or make any changes in your package and you want to update it, just run in the root directory of the package:npm version TYPEWhere TYPE can either bepatch(for small bug fixes),minor(for small changes), andmajorfor big changes. You can read more about it here.",2021-04-08T10:02:58Z,#datascience #tutorials
DataCamp Community,https://www.datacamp.com/community,DataCamp's new workspace product lets you start your own data analysis in seconds,https://www.datacamp.com/community/blog/collaboration,"Doing data science work should be easy, enjoyable, and collaborative. That’s why we’re building a collaboration product for data professionals and data-fluent teams.",NA,#datascience #tutorials
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,Understanding PyTorch Loss Functions: The Maths and Algorithms (Part 2),https://towardsdatascience.com/understanding-pytorch-loss-functions-the-maths-and-algorithms-part-2-104f19346425?source=rss----7f60cf5620c9---4,"A step-by-step guide to the mathematical definitions, algorithms, and implementations of loss functions in PyTorchContinue reading on Towards Data Science »",2021-04-08T05:24:29Z,#datascience #tutorials
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,Data Smoothing for Data Science Visualization (The Goldilocks Trio) (Part 1),https://towardsdatascience.com/data-smoothing-for-data-science-visualization-the-goldilocks-trio-part-1-867765050615?source=rss----7f60cf5620c9---4,The first in a series explaining lowess and B-spline smoothingContinue reading on Towards Data Science »,2021-04-08T03:33:03Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Joe Biden is taking executive action at a record pace,https://www.economist.com/graphic-detail/2021/01/22/joe-biden-is-taking-executive-action-at-a-record-pace,In two days he has signed more executive orders than Donald Trump did in nearly two months in office,2021-01-22T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Is the lot of female executives improving?,https://www.economist.com/graphic-detail/2021/03/04/is-the-lot-of-female-executives-improving,Our glass-ceiling index shows some progress in some places. But not enough,2021-03-04T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Will reopening schools in America cause covid-19 cases to spike?,https://www.economist.com/graphic-detail/2021/02/17/will-reopening-schools-in-america-cause-covid-19-cases-to-spike,The spread of the virus in schools will depend on the communities those schools are in,2021-02-17T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Covid-19’s second wave has devastated eastern European countries,https://www.economist.com/graphic-detail/2021/02/15/covid-19s-second-wave-has-devastated-eastern-european-countries,They now have some of the world’s worst excess-mortality rates,2021-02-15T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,34. Things Our Fathers Gave Us,https://omny.fm/shows/freakonomics-radio/things-our-fathers-gave-us,What did Levitt and Dubner learn as kids from their dads?,2011-06-08T16:39:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,190. Time to Take Back the  Toilet,https://omny.fm/shows/freakonomics-radio/time-to-take-back-the-toilet,"Public bathrooms are noisy, poorly designed, and often nonexistent. What to do?",2016-06-09T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,122. How Much Does Your Name Matter?,https://omny.fm/shows/freakonomics-radio/how-much-does-your-name-matter,"A kid's name can tell us something about his parents -- their race, social standing, even their politics. But is your name really your destiny?",2013-04-08T13:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,281. Big Returns from Thinking Small,https://omny.fm/shows/freakonomics-radio/big-returns-from-thinking-small,"By day, two leaders of Britain's famous Nudge Unit use behavioral tricks to make better government policy. By night, they repurpose those tricks to improve their personal lives. They want to help you do the same.",2017-03-30T03:00:00Z,#economics #podcast
Squarespace / Engineering,https://engineering.squarespace.com/,The Nuts and Bolts with Polina Giralt,https://engineering.squarespace.com/blog/2019/the-nuts-and-bolts-with-polina-giralt,“The Nuts and Bolts” is a reoccurring Q&A with Squarespace engineers. Questions are compiled by their peers to guarantee we get right to the good stuff.,2019-05-07T20:50:07Z,#tech #engineering
Python,https://devblogs.microsoft.com/python,Python in Visual Studio Code – March 2021 Release,https://devblogs.microsoft.com/python/python-in-visual-studio-code-march-2021-release/,"We are pleased to announce that the March 2021 release of the Python Extension for Visual Studio Code is now available. You can  download the Python extension  from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.The post Python in Visual Studio Code – March 2021 Release appeared first on Python.",2021-03-16T20:45:13Z,#tech #engineering
Medium Engineering - Medium,https://medium.engineering?source=rss----2817475205d3---4,Counting your followers,https://medium.engineering/counting-your-followers-facbfafe45d9?source=rss----2817475205d3---4,NA,2020-11-24T21:28:01Z,#tech #engineering
Yelp Engineering and Product Blog,https://engineeringblog.yelp.com/,Minimizing read-write MySQL downtime,https://engineeringblog.yelp.com/2020/11/minimizing-read-write-mysql-downtime.html,"The relational database of choice at Yelp is MySQL and it powers much of the Yelp app and yelp.com. MySQL does not include a native high-availability solution for the replacement of a primary server, which is a single point of failure. This is a tradeoff of its dedication to ensuring consistency. Replacing a primary server is sometimes necessary due to planned or unplanned events, like an operating system upgrade, a database crash or hardware failure. This requires pausing data modifications to the database while the server is restarted or replaced and can mean minutes of downtime. Pausing data modifications means...",2020-11-09T00:00:00Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,Two arthritis medicines prove effective for covid-19,https://www.economist.com/science-and-technology/2021/01/14/two-arthritis-medicines-prove-effective-for-covid-19,A pair of aces,2021-01-14T00:00:00Z,#tech #news
Startups – TechCrunch,https://techcrunch.com,TrueLayer raises $70M for its open banking platform,https://techcrunch.com/2021/04/08/truelayer-70m/,"TrueLayer, the London startup that offers a developer-friendly platform for companies, including other fintechs, to utilise open banking, is disclosing $70 million in new funding. The Series D round is led by new investor Addition. Existing investors, including Anthemis Group, Connect Ventures, Mouro Capital, Northzone and Temasek, also participated. New investors include Visionaries Club, Zack [&#8230;]",2021-04-08T07:00:13Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,How to sterilise scalpels when no electricity is available,https://www.economist.com/science-and-technology/2020/11/26/how-to-sterilise-scalpels-when-no-electricity-is-available,Sunlight is the best disinfectant,2020-11-26T16:00:52Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,"With millions vaccinated, rare side-effects of jabs are emerging",https://www.economist.com/science-and-technology/2021/04/07/with-millions-vaccinated-rare-side-effects-of-jabs-are-emerging,Sorting signal from noise,2021-04-07T00:00:00Z,#tech #news
