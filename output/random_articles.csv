feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#288 10 tips to move from Excel to Python,https://talkpython.fm/episodes/show/288/10-tips-to-move-from-excel-to-python,"Excel is one of the most used and most empowering piece of software out there. But that doesn't make it a good fit for every data processing need. And when you outgrow Excel, a really good option for a next step is Python and the data science tech stack: Pandas, Jupyter, and friends. Chris Moffitt is back on Talk Python to give us concrete tips and tricks for moving from Excel to Python!Links from the showChris on Twitter: @chris1610Practical Business Python: pbpython.comEscaping Excel Hell with Python and Pandas Episode 200: talkpython.fmSideTable package: pbpython.comLearn more and go deeperMove from Excel to Python with Pandas Course: training.talkpython.fmExcel to Python webcast: crowdcast.ioSponsorsVoyager gameLinodeTalk Python Training",2020-10-31T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Enabling Version Controlled Data Collaboration With TerminusDB - Episode 167,https://www.dataengineeringpodcast.com/terminusdb-data-collaboration-episode-167/#utm_source=rss&utm_medium=rss,"As data professionals we have a number of tools available for storing, processing, and analyzing data. We also have tools for collaborating on software and analysis, but collaborating on data is still an underserved capability. Gavin Mendel-Gleason encountered this problem first hand while working on the Sesshat databank, leading him to create TerminusDB and TerminusHub. In this episode he explains how the TerminusDB system is architected to provide a versioned graph storage engine that allows for branching and merging of data sets, how that opens up new possibilities for individuals and teams to work together on building new data repositories. This is a fascinating conversation on the technical challenges involved, the opportunities that such as system provides, and the complexities inherent to building a successful business on open source.",2021-01-11T23:56:22Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,How Shopify Is Building Their Production Data Warehouse Using DBT - Episode 171,https://www.dataengineeringpodcast.com/shopify-data-warehouse-with-dbt-episode-171/#utm_source=rss&utm_medium=rss,"With all of the tools and services available for building a data platform it can be difficult to separate the signal from the noise. One of the best ways to get a true understanding of how a technology works in practice is to hear from people who are running it in production. In this episode Zeeshan Qureshi and Michelle Ark share their experiences using DBT to manage the data warehouse for Shopify. They explain how the structured the project to allow for multiple teams to collaborate in a scalable manner, the additional tooling that they added to address the edge cases that they have run into, and the optimizations that they baked into their continuous integration process to provide fast feedback and reduce costs. This is a great conversation about the lessons learned from real world use of a specific technology and how well it lives up to its promises.",2021-02-09T01:43:41Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#292 Pythonic identity (auth in Python ecosystem),https://talkpython.fm/episodes/show/292/pythonic-identity-auth-in-python-ecosystem,"So you're excited about that next app you're about to build. You can visualize the APIs with the smooth scalability taking to the mobile apps. You can see how, finally, this time, you'll get deployment right and it'll be pure continuous delivery out of GitHub with zero downtime. What you're probably not dreaming about is writing yet another password reset form and integrating mail capabilities just for this purpose. Or how you'll securely store user accounts the right way this time.Don't worry, we got you covered. Our guests, Christos Matskas and John Patrick Dandison are here to cover a bunch of different libraries and techniques we can use for adding identity to our Python applications.Links from the showChristos on Twitter: @christosmatskasJohn Patrick Dandison on Twitter: @azureandchillshhgit live: shhgit.comTwitch channel for Christos and JP: twitch.tv/425showPasslib & Folding: passlib.readthedocs.ioMicrosoft Authentication Library: github.com/AzureADauthlib - JavaScript Object Signing and Encryption draft implementation: github.comdjango-allauth - Authentication app for Django that ""just works"": github.comdjango-oauth-toolkit - OAuth 2 goodies for Django: github.compython-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers: github.compython-social-auth - An easy-to-setup social authentication mechanism: github.comSponsorsTalk Python TrainingLinode",2020-11-26T00:00:00Z,#datascience #ds #podcast
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,Saving Animal Lives with Data,https://towardsdatascience.com/saving-animal-lives-with-data-d815c6e854eb?source=rss----7f60cf5620c9---4,NA,2021-03-02T22:13:50Z,#datascience #tutorials
DEV Community,https://dev.to,RSpec: do not verify hash keys separately,https://dev.to/vasily/rspec-do-not-verify-hash-keys-separately-3ami,"Sometimes I come across three separate checks in specs to make sure the hash is OK: there are keys, there are values, values have the right type.RSpec.describe UserSerializer do  describe ""#as_json"" do    let(:user) do      build(:user,        first_name: ""Bart"",        last_name: ""Simpson"",        tel: ""+777123"")    end    let(:json) { described_class.new(user).as_json }    it ""has keys"" do      expect(json).to include(:first_name, :last_name, :tel)    end    it ""has types"" do      expect(json[:first_name]).to be_kind_of(String)      expect(json[:last_name]).to be_kind_of(String)      expect(json[:tel]).to be_kind_of(String)    end    it ""has values"" do      expect(json[:first_name]).to eq(user.first_name)      expect(json[:last_name]).to eq(user.last_name)      expect(json[:tel]).to eq(user.tel)    end  endend    Enter fullscreen mode        Exit fullscreen mode    This spec is more confusing than helpful: when you change fields, you have to update three tests; it's hard to immediately understand what the serializer returns.Better to use include matcher and skip type checks (it's not the responsibility of the test):RSpec.describe UserSerializer do  describe ""#as_json"" do    it ""includes first name, last name and tel"" do      user = build(:user,        first_name: ""Bart"",        last_name: ""Simpson"",        tel: ""+777123"")      json = described_class.new(user).as_json      expect(json).to include(        first_name: ""Bart"",        last_name: ""Simpson"",        tel: ""+777123""      )    end  endend    Enter fullscreen mode        Exit fullscreen mode",2021-03-02T10:03:42Z,#datascience #tutorials
DEV Community,https://dev.to,15 minutes to create a personal assistant that can search on wikipedia (and tell some horrible jokes),https://dev.to/leonardbonetti/15-minutes-to-create-a-personal-assistant-that-can-search-on-wikipedia-and-tell-some-horrible-jokes-1bc7,"IntroductionOn a boring day at work, a colleague and I were talking to Alexa, when a bet arose due to the joke, creating a virtual assistant in 15 minutes.Alexa has a multitude of functions, so to make the challenge possible ours should just take questions about common topics.      Then we choose the following rules:The assistant must interact with you by speaking your nameResponses must be in audioSearches must be carried out using wikipediaTell some jokes      Let's code      Create projectI can't code without typescript anymore, so...npm init -y &amp;&amp; npx ts-init    Enter fullscreen mode        Exit fullscreen mode    Check that your tsconfig.json file is as follows{  ""compilerOptions"": {    ""lib"": [      ""es6"",      ""DOM""    ],    ""alwaysStrict"": true,    ""strictNullChecks"": true,    ""noImplicitAny"": true,    ""esModuleInterop"": true,    ""resolveJsonModule"": true  },  ""files"": [    ""src/index.ts""  ]}    Enter fullscreen mode        Exit fullscreen mode          Lets get our packagesnpm i --save say Say is an amazing TTS (Text-to-Speech) library, it will help us with a voice to our robot.npm i --save wikipedia Wikipedia is a simple lib that abstract the wiki endpoints and make our lives easier      Add some JokesCreate a file named src/jokes.json, copie the content of this gist to your file      Finally we will codeInside your src/index.ts import all librariesimport say from 'say';import wikipedia from ""wikipedia"";import jokes from './jokes.json';import readline from ""readline"";...    Enter fullscreen mode        Exit fullscreen mode    Our personal assistant will receive the commands by text, like the old waysSo, w'll need a interface to interact with our user by terminal...const rl = readline.createInterface({    input: process.stdin,    output: process.stdout});    Enter fullscreen mode        Exit fullscreen mode    The main goal here is create an assistant that can make searchs on wikipedia, so, lets create this func...const wikisearch = async (topic: string) =&gt; {    const search = await wikipedia.search(topic);    const page = await wikipedia.page(search.results[0].title);    const summary = await page.summary();    return summary.extract;}    Enter fullscreen mode        Exit fullscreen mode    Now let's give our assistant a voice...const speak = (text: string) =&gt; {    return new Promise((resolve, reject) =&gt; {        say.speak(text, 'Samantha', 0.9, (err) =&gt; {            if(err) reject(err);            resolve(true);        });    })}    Enter fullscreen mode        Exit fullscreen mode    As my assistant is a woman, I decided to give her the voice of Samantha, and to make it more audible, I leave the playback speed at 0.9, but feel free to change any of these properties, you can check the full list of voices available hereOk, lets interact.By the first rule of the challenge, the bot need to know our name, so...let name = """";rl.question(""What is your name ? "", async function(received: string) {        name = received;        await speak(`Hello ${received}, my name is Clotilde`);        ask();});    Enter fullscreen mode        Exit fullscreen mode    Now, lets code the final function...const ask = () =&gt; {    rl.question(""ask me something: "", async function(rQuery: string) {        if(rQuery == 'stop') {            say.stop();            return rl.close();        }        if(rQuery.toLocaleLowerCase().split(' ').findIndex(item =&gt; item == 'joke') &gt; -1) {            const jokeIndex = Math.floor(Math.random() * jokes.length);            const joke = jokes[jokeIndex];            await speak(joke.text);        } else {            const searchTopic = await wikisearch(rQuery);            await speak(`According to wikipedia, ${searchTopic}`);        }        ask();    });}    Enter fullscreen mode        Exit fullscreen mode    The idea here is very simple, if the user asks something that contains the word joke, we tell a joke, if not, we search on wikipedia.And, for finally, when we shutdown our assistant:...rl.on(""close"", async function() {    console.log(""\nBYE BYE !!!"");    await speak(""Bye Bye"");    process.exit(0);});    Enter fullscreen mode        Exit fullscreen mode    She will say ""Bye Bye""Your code should now look like this:import say from 'say';import wikipedia from ""wikipedia"";import jokes from './jokes.json';import readline from ""readline"";const rl = readline.createInterface({    input: process.stdin,    output: process.stdout});const wikisearch = async (topic: string) =&gt; {    const search = await wikipedia.search(topic);    const page = await wikipedia.page(search.results[0].title);    const summary = await page.summary();    return summary.extract;}const speak = (text: string) =&gt; {    return new Promise((resolve, reject) =&gt; {        say.speak(text, 'Samantha', 0.9, (err) =&gt; {            if(err) reject(err);            resolve(true);        });    })}let name = """";rl.question(""What is your name ? "", async function(received: string) {        name = received;        await speak(`Hello ${received}, my name is Clotilde`);        ask();});const ask = () =&gt; {    rl.question(""ask me something: "", async function(rQuery: string) {        if(rQuery == 'stop') {            say.stop();            return rl.close();        }        if(rQuery.toLocaleLowerCase().split(' ').findIndex(item =&gt; item == 'joke') &gt; -1) {            const jokeIndex = Math.floor(Math.random() * jokes.length);            const joke = jokes[jokeIndex];            await speak(joke.text);        } else {            const searchTopic = await wikisearch(rQuery);            await speak(`According to wikipedia, ${searchTopic}`);        }        ask();    });}rl.on(""close"", async function() {    console.log(""\nBYE BYE !!!"");    await speak(""Bye Bye"");    process.exit(0);});    Enter fullscreen mode        Exit fullscreen mode    The complete repo of this project can be found on hereThank you very much, let us know in the comments section how long it took you to create this bot",2021-03-02T14:32:42Z,#datascience #tutorials
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,Transforming Your Business Spreadsheets Into Data Analytics View Using kibana and logstash!,https://towardsdatascience.com/transforming-your-business-spreadsheets-into-data-analytics-view-using-kibana-and-logstash-efbc2d598f51?source=rss----7f60cf5620c9---4,NA,2021-03-02T23:54:02Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Democrats are more likely than Republicans to have heard of QAnon,https://www.economist.com/graphic-detail/2021/01/19/democrats-are-more-likely-than-republicans-to-have-heard-of-qanon,Americans who have tend to hold it in an unfavourable light,2021-01-19T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,Snake oil Supplements? Superfoods? Sports sups? Sativa?,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/L_9P8-ZGMoU/,"Updated our interactive ‘bubble race’ diagrams summarising the medical efficacy of: &#187; nutritional supplements (189) &#187; superfoods (99) &#187; sports performance enhancers (95) &#187; cannabis / marijuana (68 conditions) We’ve been curating these data graphics for some years now. Focusing on health areas where evidence is scattered, or spotty, or unreliably reported in the media. [&#8230;]",2020-12-09T16:39:19Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,We’re hiring full-time and trainee data journalists,https://www.economist.com/graphic-detail/2020/12/19/were-hiring-full-time-and-trainee-data-journalists,Come and join The Economist’s quantitative-journalism department,2020-12-19T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,Vitamin D,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/WbAn3pshfeg/,The latest data &#038; research on dose and deficiency &#8211; plus impact on COVID-19 and other diseases &#038; disorders. It’s been 10 years since I created the Snake Oil Supplement visualisation and I’m still a little obsessed with optimising my diet. Vitamin D pops up in a lot of headlines and research. Especially recently in [&#8230;],2020-11-12T16:05:03Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,229. Ben Bernanke Gives Himself a Grade,https://omny.fm/shows/freakonomics-radio/ben-bernanke-gives-himself-a-grade,"He was handed the keys to the global economy just as it started heading off a cliff. Fortunately, he'd seen this movie before.",2015-12-03T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,169. Failure Is Your Friend,https://omny.fm/shows/freakonomics-radio/failure-is-your-friend,In which we argue that failure should not only be tolerated but celebrated.,2014-06-05T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,205. Could the Next Brooklyn Be ... Las Vegas?!,https://omny.fm/shows/freakonomics-radio/could-the-next-brooklyn-be-las-vegas,Zappos CEO Tony Hsieh has a wild vision and the dollars to try to make it real. But it still might be the biggest gamble in town.,2015-05-07T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,187. The Man Who Would Be Everything,https://omny.fm/shows/freakonomics-radio/the-man-who-would-be-everything,"Boris Johnson -- mayor of London, biographer of Churchill, cheese-box painter and tennis-racket collector -- answers our FREAK-quently Asked Questions.",2014-11-20T05:00:00Z,#economics #podcast
strava-engineering - Medium,https://medium.com/strava-engineering?source=rss----89d4108ce2a3---4,"Whole lot of heat, not a lot of maps",https://medium.com/strava-engineering/whole-lot-of-heat-not-a-lot-of-maps-2268635f3f6c?source=rss----89d4108ce2a3---4,NA,2020-09-09T17:19:51Z,#tech #engineering
OpenAI,https://openai.com/,"Improving Verifiability
in AI Development",https://openai.com/blog/improving-verifiability/,"We’ve contributed to a multi-stakeholder report by 58 co-authors at 30 organizations, including the Centre for the Future of Intelligence, Mila, Schwartz Reisman Institute for Technology and Society, Center for Advanced Study in the Behavioral Sciences, and Center for Security and Emerging Technologies. This report describes 10 mechanisms to",2020-04-16T15:59:39Z,#tech #engineering
Google Open Source Blog,http://opensource.googleblog.com/,SoD and technical documentation in an open source organization,http://www.blogger.com/feeds/8698702854482141883/posts/default/5896071884221935738,SoD and technical documentation in an open source organization,2021-03-02T09:00:08Z,#tech #engineering
Dr. Sebastian Raschka,https://sebastianraschka.com/,The key differences between Python 2.7.x and Python 3.x with examples,https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html,"Many beginning Python users are wondering with which version of Python they should start. My answer to this question is usually something along the lines 'just go with the version your favorite tutorial was written in, and check out the differences later on.'\ But what if you are starting a new project and have the choice to pick? I would say there is currently no 'right' or 'wrong' as long as both Python 2.7.x and Python 3.x support the libraries that you are planning to use. However, it is worthwhile to have a look at the major differences between those two most popular versions of Python to avoid common pitfalls when writing the code for either one of them, or if you are planning to port your project.",2014-06-01T09:00:00Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,Elon Musk’s latest rocket launch is a successful failure,https://www.economist.com/science-and-technology/2020/12/10/elon-musks-latest-rocket-launch-is-a-successful-failure,It crashed. But the data collected will help improve the next attempt,2020-12-10T15:53:35Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Britain becomes the first country to license a fully tested covid-19 vaccine,https://www.economist.com/science-and-technology/2020/12/05/britain-becomes-the-first-country-to-license-a-fully-tested-covid-19-vaccine,Inoculations with the Pfizer-BioNTech jab could start in less than a week,2020-12-05T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Kill one unwanted species and another arises,https://www.economist.com/science-and-technology/2020/10/29/kill-one-unwanted-species-and-another-arises,A tale of rats and palms on an atoll in the Pacific,2020-10-29T15:53:27Z,#tech #news
VentureBeat,https://venturebeat.com,"Voice assistants enable enterprise automation, CRM, and data intelligence",https://venturebeat.com/2021/03/02/voice-assistants-enable-enterprise-automation-crm-and-data-intelligence/,"During the pandemic, enterprise users are increasingly adopting voice assistant technologies to accelerate workloads.",2021-03-02T22:17:06Z,#tech #news
