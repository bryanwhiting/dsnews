feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
DataCamp Community,https://www.datacamp.com/community,Learner Spotlight: How I Became a Data Analyst with DataCamp [Testimonial],https://www.datacamp.com/community/blog/chris-murphy,Chris Murphy studied international business and worked at a Chinese e-commerce startup. He used DataCamp to land a role as a Data Analyst at UMass Medical School.,NA,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,DataCamp Donates Spotlight: Ingressive For Good,https://www.datacamp.com/community/blog/ingressive-for-good,"A conversation with the executives at Ingressive for Good who are helping us donate DataCamp scholarships to 6,000 Nigerians.",NA,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Bridging The Gap Between Machine Learning And Operations At Iguazio - Episode 174,https://www.dataengineeringpodcast.com/iguazio-machine-learning-operations-episode-174/#utm_source=rss&utm_medium=rss,"The process of building and deploying machine learning projects requires a staggering number of systems and stakeholders to work in concert. In this episode Yaron Haviv, co-founder of Iguazio, discusses the complexities inherent to the process, as well as how he has worked to democratize the technologies necessary to make machine learning operations maintainable.",2021-03-02T03:00:04Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Making It Easier To Stick B2B Data Integration Pipelines Together With Hotglue - Episode 169,https://www.dataengineeringpodcast.com/hotglue-data-integration-episode-169/#utm_source=rss&utm_medium=rss,"Businesses often need to be able to ingest data from their customers in order to power the services that they provide. For each new source that they need to integrate with it is another custom set of ETL tasks that they need to maintain. In order to reduce the friction involved in supporting new data transformations David Molot and Hassan Syyid built the Hotlue platform. In this episode they describe the data integration challenges facing many B2B companies, how their work on the Hotglue platform simplifies their efforts, and how they have designed the platform to make these ETL workloads embeddable and self service for end users.",2021-01-26T02:05:21Z,#datascience #ds #podcast
DEV Community,https://dev.to,üìà Working with RabbitMQ in Golang by examples,https://dev.to/koddr/working-with-rabbitmq-in-golang-by-examples-2dcn,"IntroductionHey, DEV people! üòâ Today, I'll cover the topic of working with a Message broker called RabbitMQ in your Go projects. There will be both a theoretical part and practice.Of course, the article is more aimed at those who just want to understand this topic. But I call on more experienced people to help cover this topic even better in the comments on this article. Together we can do a lot!      üìù Table of contentsWhat is a message broker?What problems will be able to solve?Full project codeSetting up RabbitMQSetting up Fiber as a senderSetting up a message consumerRunning the project      What is a message broker?This is an architectural pattern in distributed systems, where a message broker is an application that converts a single protocol message from the source application to a protocol message from the destination application, thereby acting as an intermediary between them.Also, the tasks of the message broker include:Checking the message for errors;Routing to specific receiver(s);Splitting the message into several smaller ones, and then aggregating the receivers' responses and sending the result to the source;Saving the messages to a database;Calling web services;Distributing messages to subscribers;ü§î But what is it anyway? Well, let's translate it into our language.If you simplify this huge description, you can portray the message broker as a post office in real life (which you have encountered many times):A sender (user of your product) brings a parcel (any data) to the post office and specifies the addressee for receipt (another service).A post office employee accepts the parcel and places it in the storage area (puts it in the queue to be sent) and issues a receipt that the parcel has been successfully accepted from the sender.After some time, the parcel is delivered to the addressee (another service), and he doesn't have to be at home to accept the parcel. In this case, his parcel will wait in a mailbox until he receives it.‚Üë Table of contents      What problems will be able to solve?One of the most important problems that can be solved by using this architectural pattern is to parallelize tasks with a guaranteed result, even if the receiving service is unavailable at the time of sending the data.With the total dominance of microservice architecture in most modern projects, this approach can maximize the performance and resilience of the entire system.üëå It sounds a bit confusing... but let's use the post office analogy again! Once the sender gives his parcel to the post office employee, he no longer cares how his parcel will be delivered, but he does know that it will be delivered anyway!‚Üë Table of contents      Full project codeFor those who want to see the project in action:                          koddr       /         tutorial-go-fiber-rabbitmq                    üìñ Tutorial: Working with RabbitMQ in Golang by examples      ‚Üë Table of contents      Setting up RabbitMQAs usual, let's create a new Docker Compose file:# ./docker-compose.ymlversion: ""3.9""services:  # Create service with RabbitMQ.  message-broker:    image: rabbitmq:3-management-alpine    container_name: message-broker    ports:      - 5672:5672   # for sender and consumer connections      - 15672:15672 # for serve RabbitMQ GUI    volumes:      - ${HOME}/dev-rabbitmq/data/:/var/lib/rabbitmq      - ${HOME}/dev-rabbitmq/log/:/var/log/rabbitmq    restart: always    networks:      - dev-networknetworks:  # Create a new Docker network.  dev-network:    driver: bridge‚òùÔ∏è Please note! For the initial introduction to RabbitMQ we will not create a cluster and use a load balancer. If you want to know about it, write a comment below.‚Üë Table of contents      Setting up Fiber as a senderTo connect to the message broker, we will use the Advanced Message Queuing Protocol or AMQP for short. The standard port for RabbitMQ is 5672.Okay, let's write a simple data sender using Fiber web framework:// ./sender/main.gopackage mainimport (    ""log""    ""os""    ""github.com/gofiber/fiber/v2""    ""github.com/gofiber/fiber/v2/middleware/logger""    ""github.com/streadway/amqp"")func main() {    // Define RabbitMQ server URL.    amqpServerURL := os.Getenv(""AMQP_SERVER_URL"")    // Create a new RabbitMQ connection.    connectRabbitMQ, err := amqp.Dial(amqpServerURL)    if err != nil {        panic(err)    }    defer connectRabbitMQ.Close()    // Let's start by opening a channel to our RabbitMQ    // instance over the connection we have already    // established.    channelRabbitMQ, err := connectRabbitMQ.Channel()    if err != nil {        panic(err)    }    defer channelRabbitMQ.Close()    // With the instance and declare Queues that we can    // publish and subscribe to.    _, err = channelRabbitMQ.QueueDeclare(        ""QueueService1"", // queue name        true,            // durable        false,           // auto delete        false,           // exclusive        false,           // no wait        nil,             // arguments    )    if err != nil {        panic(err)    }    // Create a new Fiber instance.    app := fiber.New()    // Add middleware.    app.Use(        logger.New(), // add simple logger    )    // Add route.    app.Get(""/send"", func(c *fiber.Ctx) error {        // Create a message to publish.        message := amqp.Publishing{            ContentType: ""text/plain"",            Body:        []byte(c.Query(""msg"")),        }        // Attempt to publish a message to the queue.        if err := channelRabbitMQ.Publish(            """",              // exchange            ""QueueService1"", // queue name            false,           // mandatory            false,           // immediate            message,         // message to publish        ); err != nil {            return err        }        return nil    })    // Start Fiber API server.    log.Fatal(app.Listen("":3000""))}As you can see, at the beginning we create a new connection to RabbitMQ and a channel to send data to the queue, called QueueService1. With a GET request to localhost:3000/send, we can pass a needed text in a msg query parameter, which will be sent to the queue and next to the consumer.Now create a new Dockerfile called Dockerfile-sender in the root of the project in which we describe the process of creating the container for sender:# ./Dockerfile-senderFROM golang:1.16-alpine AS builder# Move to working directory (/build).WORKDIR /build# Copy and download dependency using go mod.COPY go.mod go.sum ./RUN go mod download# Copy the code into the container.COPY ./sender/main.go .# Set necessary environment variables needed # for our image and build the sender.ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64RUN go build -ldflags=""-s -w"" -o sender .FROM scratch# Copy binary and config files from /build # to root folder of scratch container.COPY --from=builder [""/build/sender"", ""/""]# Command to run when starting the container.ENTRYPOINT [""/sender""]All that remains is to update the Docker Compose file so that it takes this Dockerfile into account when creating a container with RabbitMQ:# ./docker-compose.ymlversion: ""3.9""services:  # ...  # Create service with Fiber sender.  sender:    container_name: sender    ports:      - 3000:3000    build:      context: .      dockerfile: Dockerfile-sender    environment:      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/    restart: always    networks:      - dev-network    depends_on:      - message-broker  # ...# ...      Setting up a message consumerThe message consumer should be able to accept messages from the broker's queue and output in the logs the message sent from the sender.Let's implement such a consumer:// ./consumer/main.gopackage mainimport (    ""log""    ""os""    ""github.com/streadway/amqp"")func main() {    // Define RabbitMQ server URL.    amqpServerURL := os.Getenv(""AMQP_SERVER_URL"")    // Create a new RabbitMQ connection.    connectRabbitMQ, err := amqp.Dial(amqpServerURL)    if err != nil {        panic(err)    }    defer connectRabbitMQ.Close()    // Opening a channel to our RabbitMQ instance over    // the connection we have already established.    channelRabbitMQ, err := connectRabbitMQ.Channel()    if err != nil {        panic(err)    }    defer channelRabbitMQ.Close()    // Subscribing to QueueService1 for getting messages.    messages, err := channelRabbitMQ.Consume(        ""QueueService1"", // queue name        """",              // consumer        true,            // auto-ack        false,           // exclusive        false,           // no local        false,           // no wait        nil,             // arguments    )    if err != nil {        log.Println(err)    }    // Build a welcome message.    log.Println(""Successfully connected to RabbitMQ"")    log.Println(""Waiting for messages"")    // Make a channel to receive messages into infinite loop.    forever := make(chan bool)    go func() {        for message := range messages {            // For example, show received message in a console.            log.Printf("" &gt; Received message: %s\n"", message.Body)        }    }()    &lt;-forever}Okay, in the same way with sender, let's create a new Dockerfile called Dockerfile-consumer to describe the process of creating a container for the message consumer:# ./Dockerfile-consumerFROM golang:1.16-alpine AS builder# Move to working directory (/build).WORKDIR /build# Copy and download dependency using go mod.COPY go.mod go.sum ./RUN go mod download# Copy the code into the container.COPY ./consumer/main.go .# Set necessary environment variables needed # for our image and build the consumer.ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64RUN go build -ldflags=""-s -w"" -o consumer .FROM scratch# Copy binary and config files from /build # to root folder of scratch container.COPY --from=builder [""/build/consumer"", ""/""]# Command to run when starting the container.ENTRYPOINT [""/consumer""]Yes, you guessed it! üòÖ Once again, we will have to put a description in the Docker Compose file to create the container for the consumer:# ./docker-compose.ymlversion: ""3.9""services:  # ...  # ...  # Create service with message consumer.  consumer:    container_name: consumer    build:      context: .      dockerfile: Dockerfile-consumer    environment:      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/    restart: always    networks:      - dev-network    depends_on:      - sender      - message-broker# ...Great! Finally, we're ready to put everything together and run the project.‚Üë Table of contents      Running the projectJust run this Docker Compose command:docker-compose up --buildWait about 1-2 minutes and make a few HTTP request to the API endpoint with different text in msg query:curl \    --request GET \    --url 'http://localhost:3000/send?msg=test'Next, go to this address: http://localhost:15672. Enter guest both as login and password. You should see the RabbitMQ user interface, like this:To simply view the logs and metrics inside the Docker containers, I recommend to use a command line utility, called ctop:If you turn off the consumer container, but continue to make HTTP requests, you will see that the queue starts to accumulate messages. But as soon as the consumer is started up again, the queue will clear out because the consumer will get all the messages sent.üéä Congratulations, you have fully configured the message broker, sender, consumer and wrapped it all in isolated Docker containers!‚Üë Table of contents      Photos and videos byVic Sh√≥stak https://shostak.devFatos Bytyqi https://unsplash.com/photos/Agx5_TLsIf4      P.S.If you want more ‚Üí write a comment below &amp; follow me. Thanks! üòò",2021-03-31T20:59:59Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Heatmapping My New York City Marathon Training,http://feedproxy.google.com/~r/RBloggers/~3/lesSs9oYkP0/,"MotivationThis post was inspired by my wife who used the GPS data from her Strava app to plot her running routes during 2020. Since I don‚Äôt run nearly as much as I used to, I need to go back to when I was training for the NYC marathon to ...The post Heatmapping My New York City Marathon Training first appeared on R-bloggers.",2021-03-31T18:00:00Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,"Visual Representation of Text Data Sets using the R tm and wordcloud packages:  part one, Beginner‚Äôs Guide",http://feedproxy.google.com/~r/RBloggers/~3/l73BSN3z8iU/,"Visual Representation of Text Data Sets Using the R tm and wordcloud Packages: Part One Douglas M. Wiig This paper is the next installment in series that examines the use of R scripts to present and analyze complex data sets using various types of visual representations. Previous papers have discussed ...The post Visual Representation of Text Data Sets using the R tm and wordcloud packages:  part one, Beginner‚Äôs Guide first appeared on R-bloggers.",2021-04-01T18:01:33Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,How to build your own image recognition app with R! [Part 2],http://feedproxy.google.com/~r/RBloggers/~3/r7RbYPWmGoY/,"Here is a screenshot of what we are going to build today. Want to see a live demo? Scroll down for the link! We are building an app that lets you upload images of birds (e.g., taken by your phone) and, with the help of a deep learning model, ...The post How to build your own image recognition app with R! [Part 2] first appeared on R-bloggers.",2021-03-30T14:51:47Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,How we built our covid-19 risk estimator,https://www.economist.com/graphic-detail/2021/03/11/how-we-built-our-covid-19-risk-estimator,"A foray into diagnostic codes, sample reweighting and gradient-boosted trees",2021-03-11T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Clubhouse is the latest firm for which traders have mixed up stocks,https://www.economist.com/graphic-detail/2021/02/09/clubhouse-is-the-latest-firm-for-which-traders-have-mixed-up-stocks,Confused investors waste millions of dollars every year buying the wrong shares,2021-02-09T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,America and the climate,https://www.economist.com/graphic-detail/2021/02/19/america-and-the-climate,Spawning SPACs ‚Ä¢ China‚Äôs slow vaccine roll-out ‚Ä¢ Another Italian government ‚Ä¢ France‚Äôs forever war,2021-02-19T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,New! Pre-Recorded ‚ÄòCreate Impactful Infographics‚Äô Trainings,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/hJlzcl9Dw98/,"Recordings of our sell-out infographic workshops are now available to download on-demand!‚Ä®‚Ä® Perfect if you missed out on a 2020 ticket, are in a far-flung timezone, or just want to learn in your own time. This is an edited, optimised version of our virtual Zoom training day: a technicolour mix of presentation, techniques &#038; exercises [&#8230;]",2020-11-13T14:08:38Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,"Freakonomics Radio Live: ‚ÄúThe World‚Äôs a Mess. But Oysters, They Hold it Down.‚Äù",https://omny.fm/shows/freakonomics-radio/freakonomics-radio-live-the-world-s-a-mess-but-oys,"Celebrity chef Alex Guarnaschelli joins us to co-host an evening of delicious fact-finding: where a trillion oysters went, whether a soda tax can work, and how beer helped build an empire. Washington Post columnist Alexandra Petri is our real-time fact-checker.",2018-12-15T13:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,173. A Better Way to Eat (Rebroadcast ),https://omny.fm/shows/freakonomics-radio/a-better-way-to-eat-rebroadcast,Takeru Kobayashi revolutionized the sport of competitive eating. What can the rest of us learn from his breakthrough?,2019-07-04T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,205. Could the Next Brooklyn Be ... Las Vegas?!,https://omny.fm/shows/freakonomics-radio/could-the-next-brooklyn-be-las-vegas,Zappos CEO Tony Hsieh has a wild vision and the dollars to try to make it real. But it still might be the biggest gamble in town.,2015-05-07T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,213. Aziz Ansari Needs Another Toothbrush,https://omny.fm/shows/freakonomics-radio/aziz-ansari-needs-another-toothbrush,"The comedian, actor -- and now, author -- answers our FREAK-quently Asked Questions",2015-07-23T03:00:00Z,#economics #podcast
Python,https://devblogs.microsoft.com/python,Python in Visual Studio Code ‚Äì November 2020 Release,https://devblogs.microsoft.com/python/python-in-visual-studio-code-november-2020-release/,"We are pleased to announce that the November 2020 release of the Python Extension for Visual Studio Code is now available. You can download the Python extension from the Marketplace, or install it directly from the extension gallery in Visual Studio Code.The post Python in Visual Studio Code ‚Äì November 2020 Release appeared first on Python.",2020-11-12T18:32:43Z,#tech #engineering
Dr. Sebastian Raschka,https://sebastianraschka.com/,MusicMood,https://sebastianraschka.com/blog/2014/musicmood.html,"In this article, I want to share my experience with a recent data mining project which probably was one of my most favorite hobby projects so far. It's all about building a classification model that can automatically predict the mood of music based on song lyrics.",2014-12-05T01:00:00Z,#tech #engineering
Lyft Engineering - Medium,https://eng.lyft.com?source=rss----25cd379abb8---4,Running Atlantis at Lyft,https://eng.lyft.com/running-atlantis-at-lyft-b95c7fa51db1?source=rss----25cd379abb8---4,NA,2021-03-30T17:25:14Z,#tech #engineering
tech-at-instacart - Medium,https://tech.instacart.com?source=rss----587883b5d2ee---4,A small engineering team with a big impact,https://tech.instacart.com/a-small-engineering-team-with-a-big-impact-40184c40d7e?source=rss----587883b5d2ee---4,NA,2020-07-15T16:31:46Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,DNA from Neanderthals affects vulnerability to covid-19,https://www.economist.com/science-and-technology/2021/02/24/dna-from-neanderthals-affects-vulnerability-to-covid-19,One genetic legacy is protective. Another is harmful,2021-02-24T00:00:00Z,#tech #news
VentureBeat,https://venturebeat.com,Sensor Tower ‚Äî Crash Bandicoot: On the Run dashes to 27 million downloads,https://venturebeat.com/2021/04/01/sensor-tower-crash-bandicoot-on-the-run-dashes-to-27-million-downloads/,"Crash Bandicoot: On the Run has garnered more than 27 million downloads, according to market analyst¬†Sensor Tower.",2021-04-01T18:07:22Z,#tech #news
BBC News - Technology,https://www.bbc.co.uk/news/,Zack Snyder‚Äôs Justice League: The visual effects challenges,https://www.bbc.co.uk/news/technology-56528052,Two Weta Digital experts explain how they updated the characters' look.,2021-03-27T17:23:20Z,#tech #news
VentureBeat,https://venturebeat.com,The metaverse needs responsible stewardship,https://venturebeat.com/2021/04/01/the-metaverse-needs-responsible-stewardship-not-greedy-predators/,"The metaverse will thrive ... as long as platforms, publishers, players, and developers don't prey on one another.",2021-04-01T14:17:44Z,#tech #news
