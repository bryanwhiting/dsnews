feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#278 Teach kids Python with real programming and fun games at Code Combat,https://talkpython.fm/episodes/show/278/teach-kids-python-with-real-programming-and-fun-games-at-code-combat,"If there is one message I've been pushing across all of the Talk Python episodes, it's that programming is a superpower. Rather than all of us abandoning what we're interested in and becoming CS majors, we can take our passion or expertise and 10x it with a little programming skill. In that case, we should be teaching kids fluency in programming at a younger age. And yet, almost every platform or example meant to do so pulls its punches. We'll teach kids programming concepts but not code itself. That's a bridge too far.But it's not! That's why I'm excited about Code Combat. It's an online coding platform that uses real Python syntax to guide your hero, visually, through a dungeon full of challenges. Yet the editor and customized error messages mean this is approachable for kids before they can even type reliably.On this episode, we'll meet Nick Winter, one of the cofounders of Code Combat. There's a lot of philosophy behind the tool and technology to make it kid-friend and real Python at the same time.Oh, and it's running Python in the browser.Links from the showCodeCombat: codecombat.comOn TwitterCode Combat: @CodeCombatNick Winter: @nwinterNick's website: nickwinter.netCode Combat on GitHub: github.com/codecombatBrett's learnable programming talk: worrydream.comOzaria: ozaria.comSponsorsTalk Python TrainingLinode",2020-08-21T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Building A Self Service Data Platform For Alternative Data Analytics At YipitData - Episode 163,https://www.dataengineeringpodcast.com/yipitdata-alternative-data-analytics-episode-163/#utm_source=rss&utm_medium=rss,"As a data engineer you're familiar with the process of collecting data from databases, customer data platforms, APIs, etc. At YipitData they rely on a variety of alternative data sources to inform investment decisions by hedge funds and businesses. In this episode Andrew Gross, Bobby Muldoon, and Anup Segu describe the self service data platform that they have built to allow data analysts to own the end-to-end delivery of data projects and how that has allowed them to scale their output. They share the journey that they went through to build a scalable and maintainable system for web scraping, how to make it reliable and resilient to errors, and the lessons that they learned in the process. This was a great conversation about real world experiences in building a successful data-oriented business.",2020-12-15T01:50:53Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#290 Side Hustles for Data Scientists,https://talkpython.fm/episodes/show/290/side-hustles-for-data-scientists,"Are you a data scientist looking to branch out on your own and start something new? Maybe you're just looking for a way to work with those exciting libraries that aren't yet in play at the day job. Rather than putting everything on the line, quitting your job, and hoping things work out, maybe you should start with a side-hustle. On this episode, you'll meet Keith McCormick, a data scientist who has many irons in the fire and he's here to tell us about different types of side hustles and why you may want to try or avoid one.Links from the showKeith on Twitter: @kmccormickblogKeith on LinkedIn: linkedin.comKeith's courses: linkedin.comSide Hustle Strategies for Data Science and Analytics Experts course: linkedin.com/learningTalk Python's Excel to Python course: talkpython.fm/excelSponsorsLinodeTalk Python Training",2020-11-13T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Bringing Feature Stores and MLOps to the Enterprise At Tecton - Episode 166,https://www.dataengineeringpodcast.com/tecton-mlops-feature-store-episode-166/#utm_source=rss&utm_medium=rss,"As more organizations are gaining experience with data management and incorporating analytics into their decision making, their next move is to adopt machine learning. In order to make those efforts sustainable, the core capability they need is for data scientists and analysts to be able to build and deploy features in a self service manner. As a result the feature store is becoming a required piece of the data platform. To fill that need Kevin Stumpf and the team at Tecton are building an enterprise feature store as a service. In this episode he explains how his experience building the Michelanagelo platform at Uber has informed the design and architecture of Tecton, how it integrates with your existing data systems, and the elements that are required for well engineered feature store.",2021-01-05T00:44:57Z,#datascience #ds #podcast
DEV Community,https://dev.to,What is CI/CD? Introduction to CI/CD for newbies,https://dev.to/realtoughcandy/what-is-ci-cd-introduction-to-ci-cd-for-newbies-1l0f,"CI/CD.You may have heard this weird little acronym floating around the web.But what the heck is it?And should you use it as a software developer?Read on to find out!      What is CI/CD?CI/CD is an acronym for continuous integration/continuous deployment.But it can also mean continuous integration/continuous delivery (more on the differences below).Basically, CI/CD automates:your buildsyour testsyour deploymentsAnd like all good pieces of software, a good CI/CD workflow is going to save you time.This gives the boss a happy face!It also prevents you, the developer, from flipping your desk over in an epic rage quit. Woot!      What are the benefits of CI/CD?A few of the benefits of CI/CD include:Reduced production &amp; staging errorsMakes bugs easier to find &amp; removeEasy rollbacks since changes are small &amp; incrementalIncrease in team productivityRapid feedback including automated code analysis &amp; code health reportCompetitive advantage: you can get feedback from customers fasterNo more manual FTP deployment      What is Continuous Integration?Continuous integration isn’t necessarily a particular tool.Think of it more as a workflow or setup. And the CI tool(s) you choose lets you execute that workflow.For example, there’s a CI tool called Jenkins.Here’s what a CI process might look like if you were using Jenkins:Developers push code to a repo frequently. This could include patches, updates, and new functionalities.Once pushed, a Jenkins build server tests that code.Jenkins shows developers if their code has passed or failed.If code fails: Fix code and repeat steps 1-3.If code passes: Send to deployment environment.In this flow, broken builds become a priority before building the next feature.      What is Continuous Deployment?Continuous deployment is the second part of the “CI/CD” equation.And it ensures your software can be released on demand. Deployments are fast and frequent.Remember the process from the CI section above?Once the code passes the tests, it’s pushed to its final phase: the deployment environment.This whole process has a name. It’s called a deployment pipeline. Further, all code changes you make go through this pipeline.      What’s a deployment pipeline?A deployment pipeline (or CI/CD pipeline) a series of validations your code flows through before it’s released to production.For example, a simple pipeline could consist of these phases:Image via semaphoreci.comAnd here’s a theoretical pipeline for a Go project:Image via semaphoreci.comThese example pipelines may look relatively straightforward. However, they can get complex quickly:Image via MediumDo remember that pipelines vary from company to company, project to project.      What is the difference between continuous deployment and continuous delivery?Continuous deployment simply means all changes go through a pipeline. They’re automatically deployed into production.On the other hand, continuous delivery means means developers must manually approve the deployment.Then once approved, the pipeline continues its automation.Image via crisp.seTo illustrate another way:Image via RedHat      What are some popular CI/CD tools?Some popular CI/CD tools include:Travis CIJenkinsCircleCIGitLabSpinnakerBuildKite      Do CI/CD tools cost money?It depends.While some CI/CD tools are totally free, some are freemium and some are paid tier only.Additionally, many are available as part of the GitHub student developer pack. This includes Travis CI.So if you’re a student, read this GitHub post to check your eligibility.Also, GitHub announced in 2019 that GitHub actions now supports CI/CD. This is a free feature available to public repos.      Should I use CI/CD as a software developer?      For complete code newbies:Not recommended.Is CI/CD is an incredibly powerful mechanism for your workflow? Yes.But learning the basics of programming and workflow management 101 (i.e. Git workflow) is more important as an aspiring developer.      For advaced beginners:Give it a try!Because if you plan on working in the industry as a software developer, there’s a good chance you’ll be using some sort of automation.Thus, getting familiar with continuous integration &amp; continuous deployment/delivery, even as a solo dev, is good practice.      For those in the industry:Absolutely. If you have a DevOps team, there’s a good chance they’ve implemented (or plan on implementing) a CI/CD workflow.But if you don’t have a DevOps team, you can still get up and running with CI/CD.      Conclusion: What is CI/CD?In summary, CI/CD is a way to automate your builds, tests and deployments.There are lots of open source tools available.But there are also paid options if you need the upgrade.At the end of the day, continuous integration and continuous deployment/delivery can save time and money. Lastly, if you’re on a dev team, it’s something you should seriously consider using.Are you using CI/CD? If so, what tools do you prefer?",2021-01-05T09:17:01Z,#datascience #tutorials
DEV Community,https://dev.to,Writing Your Own useFetch Hook in React,https://dev.to/nas5w/writing-your-own-usefetch-hook-in-react-2i3g,"React Hooks have been all the rage for a little over a year. Let's see how we can roll our own useFetch hook to abstract fetch request logic out of our components.Note: This is for academic purposes only. You could roll your own useFetch hook and use it in production, but I would highly recommend using an established library like use-http to do the heavy lifting for you!      If you enjoy this post, please give it a 💓, 🦄, or 🔖 and consider signing up for 📬 my free weekly dev newsletter      Our useFetch Function SignatureTo determine our useFetch function signature, we should consider the information we might need from the end user to actually execute our fetch request. In this case, we'll say that we need the resource url and we need the options that might go along with the request (e.g., request method).function useFetch(initialUrl, initialOptions) {  // Hook here}    Enter fullscreen mode        Exit fullscreen mode    In a more full-featured solution, we might give the user a way ot abort the request, but we're happy with our two arguments for now!      Maintaining State in Our HookOur hook is going to need to maintain some state. We will at least need to maintain url and options in state (as we'll need to give our user a way to setUrl and setOptions). There are some other stateful variable's we'll want as well!data (the data returned from our request)error (any error if our request fails)loading (a boolean indicating whether we are actively fetching)Let's create a bunch of stateful variables using the built-in useState hook. also, we're going to want to give our users the chance to do the following things:set the urlset optionssee the retrieved datasee any errorssee the loading statusTherefore, we must make sure to return those two state setting functions and three data from our hook!import { useState } from 'React';function useFetch(initialUrl, initialOptions) {  const [url, setUrl] = useState(initialUrl);  const [options, setOptions] = useState(initialOptions);  const [data, setData] = useState();  const [error, setError] = useState();  const [loading, setLoading] = useState(false);  // Some magic happens here  return { data, error, loading, setUrl, setOptions };}    Enter fullscreen mode        Exit fullscreen mode    Importantly, we default our url and options to the initialUrl and initialOptions provided when the hook is first called. Also, you might be thinking that these are a lot of different variables and you'd like to maintain them all in the same object, or a few objects—and that would be totally fine!      Running an Effect When our URL or Options ChangeThis is a pretty important part! We are going to want to execute a fetch request every time the url or options variables change. What better way to do that than the built-in useEffect hook?import { useState } from 'React';function useFetch(initialUrl, initialOptions) {  const [url, setUrl] = useState(initialUrl);  const [options, setOptions] = useState(initialOptions);  const [data, setData] = useState();  const [error, setError] = useState();  const [loading, setLoading] = useState(false);  useEffect(() =&gt; {    // Fetch here  }, [url, options]);  return { data, error, loading, setUrl, setOptions };}    Enter fullscreen mode        Exit fullscreen mode          Calling Fetch with Async AwaitI like async/await syntax over Promise syntax, so let's use the former! This, of course, works just as well using then, catch, and finally rather than async/await.import { useState } from 'React';function useFetch(initialUrl, initialOptions) {  const [url, setUrl] = useState(initialUrl);  const [options, setOptions] = useState(initialOptions);  const [data, setData] = useState();  const [error, setError] = useState();  const [loading, setLoading] = useState(false);  useEffect(() =&gt; {    setLoading(true);    setError(undefined);    async function fetchData() {      try {        const res = await fetch(url, options);        const json = await res.json();        setData(json);      } catch (e) {        setError(e);      }      setLoading(false);    }    fetchData();  }, [url, options]);  return { data, error, loading, setUrl, setOptions };}    Enter fullscreen mode        Exit fullscreen mode    That was a lot! Let's break it down a bit. When we run our effect, we know that we're starting to fetch data. Therefore we set our loading variable to true and we clear our any errors that may have previously existed.In our async function, we wrap our fetch request code with a try/catch block. Any errors we get we want to report to the user, so in our catch block we setError to whatever error is reported.In our try block, we do a fairly standard fetch request. We assume our data being returned is json because I'm lazy, but if we were trying to make this the most versatile hook we would probably give our users a way to configure the expected response type. Finally, assuming all is successful, we set our data variable to our returned JSON!      Using The HookBelieve it or not, that's all there is to creating our custom hook! Now we just need to bring it into a sample app and hope that it works.In the following example, I have an app that loads any github user's basic github profile data. This app flexes almost all the features we designed for our hook, with the exception of setting fetch options. We can see that, while the fetch request is being loaded, we can display a ""Loading"" indicator. When the fetch is finished, we either display a resulting error or a stringified version of the result.We offer our users a way to enter a different github username to perform a new fetch. Once they submit, we use the setUrl function exported from our useFetch hook, which causes the effect to run and a new request to be made. We soon have our new data!const makeUserUrl = user =&gt; `https://api.github.com/users/${user}`;function App() {  const { data, error, loading, setUrl } = useFetch(makeUserUrl('nas5w'));  const [user, setUser] = useState('');  return (    &lt;&gt;      &lt;label htmlFor=""user""&gt;Find user:&lt;/label&gt;      &lt;br /&gt;      &lt;form        onSubmit={e =&gt; {          e.preventDefault();          setUrl(makeUserUrl(user));          setUser('');        }}      &gt;        &lt;input          id=""user""          value={user}          onChange={e =&gt; {            setUser(e.target.value);          }}        /&gt;        &lt;button&gt;Find&lt;/button&gt;      &lt;/form&gt;      &lt;p&gt;{loading ? 'Loading...' : error?.message || JSON.stringify(data)}&lt;/p&gt;    &lt;/&gt;  );}    Enter fullscreen mode        Exit fullscreen mode    Feel free to check out the useFetch hook and sample application on codesandbox here.      Concluding ThoughtsWriting a custom React hook can be a fun endeavor. It's sometimes a bit tricky at first, but once you get the hang of it it's quite fun, and can result in really shortening and reducing redundancy in your component code.If you have any questions about this hook, React, or JS in general, don't hesitate to reach out to me on Twitter!",2021-01-05T12:40:58Z,#datascience #tutorials
DEV Community,https://dev.to,Every developer is self taught,https://dev.to/sarahob/every-developer-is-self-taught-1oal,"I know this might be a ""hot take"" (or whatever the kids call it) but hear me out. I see a lot in the tech community about college vs. self-taught. This got me thinking. Reflecting on my own path it's not as straight forward as one or the other.I have a degree in Business Information Systems. My degree gave me a broad range of skills and exposure to different areas of IT. In my final year I was able to focus on programming and took all the programming related modules. When I graduated I took a graduate Java Software Engineer role. That was in 2012.Today I'm a JavaScript engineer. I build interactive web apps, and love CSS and web animations. How did I get to this point? I taught myself*.I knew very little about the web even after my four year degree. I took one web development module in first year and after four years it was pretty outdated. At this role I became fascinated with the web. A colleague who shared my interest inspired me to try it out for myself. Once I got started I realised this was it for me. This was the path I wanted to follow.  By day, I wrote Java code but I spent my spare time learning everything I could about web development. I created small projects, read books and watched videos.After about 7 months I decided to take a leap. I applied for a Web engineer role in another company. The role asked for someone proficient in JavaScript. I remember feeling nervous before the interview. I didn't know JavaScript did I? I was never taught it so I couldn't know it. I went for it anyway. To my delight (and surprise) I passed the assessment and got the job.Once I was in the door I faced a new challenge. A UI framework called ExtJS, which at the time to me was a complete unknown. Up to this point I had only been playing with vanilla Javascript and a little jQuery. I felt out of my depth but also very excited. I read the documentation page by page. I made practice projects, I experimented with the app and tried to use concepts I had learned. A couple months into the role a new Senior Web developer joined the team. He was a talented engineer and very proficient in JavaScript. I reached out and he became my mentor. We paired a lot and he helped me understand different concepts and all the JavaScript quirks. From there my confidence started to grow, as well as my skills.Every year since then I've had to learn something new, D3.js, Angular.js, Angular 2, React and so on. And not only different libraries but also different concepts. MVC, MVVM, Components. Tech is always changing. The web is always changing. We have to keep learning to keep up with it. At times it can be overwhelming. It's also (at least for me) what keeps it interesting and one of the things I love about the web.So at this point being self taught or having a degree doesn't matter. Yes having a degree helps you get in the door. It's not right but that's the way it is at most places. But things are changing. Companies are realising it's not about the paper it's about the practice. It's about the commitment you put into it.Choosing college or not is a very personal decision. College offers a lot more than just the paper at the end. It's an experience and it's not for everyone. The main thing is to keep learning and keep building, get yourself a mentor, and put yourself out there. Because in the end we are all self taught developers.I taught myself but could not have done it without the help of many others. Mentors and other colleagues and especially the amazing content available online.",2021-01-05T18:42:42Z,#datascience #tutorials
DEV Community,https://dev.to,Server Rendering in JavaScript: Why SSR?,https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94,"Server-Side Rendering is all the talk with the JavaScript framework world right now. There are obvious examples like Vercel's Next.js which made the news with getting $40M in new funding. Next, Nuxt, Gatsby, Sapper have all been really popular the last few years along with the rise of JAMStack which promotes the use of Static Site Generation.But the thing you probably should be paying attention to is that the frameworks themselves have been investing heavily into this area for the past 2 years. There is a reason why we've been waiting for Suspense in React, or we see blog stories about Island's Architecture. Why Svelte and Vue have been pulling meta-framework type projects under their core's umbrella. This is the thing everyone is chasing after.So I want to take some time today to fill in the gaps, talk about the underlying technology, and overall paint a better picture of what is going on.      Why Server Rendering?Why server render at all? For some of you, this might be obvious. But it wasn't for me.I mean there are plenty of ways to mitigate the initial performance costs of JavaScript. I had even made it my personal mission to show people that a well-tuned client only Single Page App(SPA) could outperform a typical Server Rendered SPA in pretty much every metric (even First Paint). And crawlers now can crawl dynamic JavaScript pages for SEO. So what's the point?Well even with crawlers now being fully capable to crawl these JavaScript-heavy sites, they do get bumped to a second-tier that takes them longer to be indexed. This might not be a deal-breaker for everyone but it is a consideration. And meta tags rendered on the page are often used for social sharing links. These scrapers are often not as sophisticated, so you only get the tags initially present which would be the same on every page losing the ability to provide more specific content.But these are not new. So, let's take a look at what I believe are the bigger motivators for the current conversation.      Don't Go Chasing WaterfallsJavaScript bundle sizes have grown, and grown, and well, grown some more. Not every network connection is made equal. Under slow networks, SSR will be faster to show something to the user on the initial load. So if you need the absolute fastest page load there this no contest.It all boils down to the fact that nothing happens in the browser until it receives the HTML page back. It is only after starting to receive the HTML that other assets are requested.For dynamic client JavaScript pages like a SPA or even the dynamic parts of a static generated site, as you might create with a Gatsby or Next, often this means at least 3 cascading round trips before the page is settled.The thing to note is this isn't only a network bottleneck. Everything here is on the critical path from parsing the various assets, to executing the JavaScript to make the async data request. None of this gets to be parallelized.Here is the rub. This is further compounded by the desire to keep the bundle size small. Code splitting is incredibly powerful and easy to do on route boundaries, but a naive implementation ends up like this:Four consecutive round trips! The main bundle doesn't know what page chunk to request until it executes, and it takes loading and executing that chunk before it knows what async data to request.      How does Server Rendering address this?Knowing the route you are on lets the server render right into the page the assets you will need even if code split. You can add &lt;link rel=""modulepreload"" /&gt; tags or headers that will start loading your modules before the initial bundle even parses and executes.Additionally, it can start the async data loading immediately on receiving the request on the server and serialize the data back into the page. So while we can't completely remove the browser waterfalls we can reduce them to 1. However, a naive approach here actually delays the initial response of the HTML page. So it isn't a clean victory.In fact there is a lot more we can do here that I will cover in a follow-up article.      After Initial LoadThis equation completely changes after the first load. Assets can be preloaded/cached with a service worker. JavaScript is even stored as bytecode so there is no parsing cost. Everything except the async data request is static and can already be present in the browser. There are no waterfalls, which is even better than the best case from server rendering.But invalidating out of date service workers and cached assets can be a whole other sort of issue. Stale while re-validating can go a long way for certain types of applications. Sites that need to be up to date might not opt for this and use caches they have more control over.So the takeaway on this whole topic of performance/size is that the client alone has many techniques to mitigate most things other than that first load of fresh content. That will always be constrained by the speed of the network. But as our applications scale, without due consideration, it is easy for our SPA performance to degrade and a naive application of best practices only introduces other potential performance bottlenecks.Server rendering can relieve a couple of the important ones if the initial load is important to our sites and applications.      Modern Tools for EveryoneWe need to step back out a bit to put this in perspective. There are a lot more websites than web applications. This has always been the case but the mindshare around modern JavaScript frameworks has changed.When client JavaScript frameworks were first being developed there was a simple goal in mind. Find a way to do all the things in the browser that needlessly had us going back to the server. We were building ever more complex user interfaces and full-page reloads were just not acceptable in a world where people were getting used to native app experiences.These tools may have been developed with interactive web applications in mind, but there is a much larger set of potential users to tap into that appear to actively be looking to these frameworks for their simpler sites.This is a really compelling problem. Especially when you consider that the coordination between Client and Server can be really complicated to do efficiently manually. Whenever something is used outside of its original parameters it takes some special consideration.      JS Frameworks vs Server FrameworksThis struggle isn't limited to JavaScript frameworks. Adding largely dynamic JavaScript to something rendered in Rails or any classic backend has this complexity. It's just JavaScript frameworks see this as a unique opportunity to create a completely isomorphic experience. One where with a single codebase you can create a site. Sort of like the old days, but also not at all like them.The fundamental thing client-side libraries have been solving is state management. It's the whole reason MVC architectures have not been the right match for the client. Something needs to be maintaining the state. MVC with its singleton controllers is wonderful for stateless things like RESTful APIs but needs special mechanisms to handle the persistence of non-model data. Stateful clients and stateless servers mean reloading the page is not acceptable.The challenge for server frameworks is even with mechanisms like Hotwire for partial updates, it alone doesn't make the client part of the equation any less complicated. You can ignore it is a thing, and if your needs are meager this can suffice. Otherwise, you end up doing a lot of the same work anyway. This leads to essentially maintaining two applications.This is why the JavaScript frameworks are uniquely positioned to provide this single universal experience. And why it is so attractive to framework authors.      What's Next?Well, be prepared to hear about this a lot more. This has been going on for about 2 years now, but these projects are finally starting to emerge to a point people feel comfortable talking about it. This has taken time because it's a fundamental shift. While there are Next's and Nuxt's of the world the core libraries haven't been optimized for these cases.Short of really eBay's Marko we haven't seen to date the sort of sophistication you'd expect from these sort of solutions. But that is all changing. React Server Components are one example. You better believe Vue, Preact, Svelte, etc... have all been working on their own solutions in this space.Server rendering in JavaScript is the next big race for these frameworks. But it's still up to you whether you choose to use it.",2021-01-05T15:34:32Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Blasphemy laws are still common around the world,https://www.economist.com/graphic-detail/2020/12/14/blasphemy-laws-are-still-common-around-the-world,"A handful of countries, led by Pakistan, Iran and Russia, stand out as the most zealous enforcers",2020-12-14T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Only the world wars have rivalled covid-19 for news coverage,https://www.economist.com/graphic-detail/2020/12/19/only-the-world-wars-have-rivalled-covid-19-for-news-coverage,"In late March, 80% of our articles mentioned “covid” or “coronavirus”",2020-12-19T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,How the $900 Billion Dollar US Congress Stimulus Bill Breaks Down,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/FeQltVUG35Y/,Not-a-bad-deal visualized. The Democrats negotiated a lot of support in there for low-income and Native populations. Trump also got $1.4bn for his wall. &#187; see the graphic,2020-12-21T22:05:35Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Economists look at more than GDP when choosing countries to study,https://www.economist.com/graphic-detail/2020/12/12/economists-look-at-more-than-gdp-when-choosing-countries-to-study,Speaking English and sending students to study abroad draw researchers’ interest,2020-12-12T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,“One Does Not Know Where an Insight Will Come From” | People I (Mostly) Admire: Kerwin Charles,https://omny.fm/shows/freakonomics-radio/one-does-not-know-where-an-insight-will-come-from,"The dean of Yale’s School of Management grew up in a small village in Guyana. During his unlikely journey, he has researched video-gaming habits, communicable disease, and why so many African-Americans haven’t had the kind of success he’s had. Steve Levitt talks to Charles about his parents’ encouragement, his love of Sports Illustrated, and how he talks to his American-born kids about the complicated history of Blackness in America. ",2020-09-19T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,444. How Do You Cure a Compassion Crisis?,https://omny.fm/shows/freakonomics-radio/how-do-you-cure-a-compassion-crisis,Patients in the U.S. healthcare system often feel they’re treated with a lack of empathy. Doctors and nurses have tragically high levels of burnout. Could fixing the first problem solve the second? And does the rest of society need more compassion too?,2020-12-17T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,425. Remembrance of Economic Crises Past,https://omny.fm/shows/freakonomics-radio/remembrance-of-economic-crises-past,"Christina Romer was a top White House economist during the Great Recession. As a researcher, she specializes in the Great Depression. She tells us what those disasters can (and can’t) teach us about the Covid crash.",2020-07-09T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,347. Why You Shouldn’t Open a Restaurant,https://omny.fm/shows/freakonomics-radio/why-you-shouldn-t-open-a-restaurant,Kenji Lopez-Alt became a rock star of the food world by bringing science into the kitchen in a way that everyday cooks can appreciate. Then he dared to start his own restaurant — and discovered problems that even science can’t solve.,2018-08-30T03:00:00Z,#economics #podcast
Dr. Sebastian Raschka,https://sebastianraschka.com/,Kernel tricks and nonlinear dimensionality reduction via RBF kernel PCA,https://sebastianraschka.com/Articles/2014_kernel_pca.html,The focus of this article is to briefly introduce the idea of kernel methods and to implement a Gaussian radius basis function (RBF) kernel that is used to perform nonlinear dimensionality reduction via KBF kernel principal component analysis (kPCA).,2014-09-14T20:00:00Z,#tech #engineering
Uber AI Labs – Uber Engineering Blog,https://eng.uber.com,Announcing Uber Open Summit 2018: Collaboration at Scale,https://eng.uber.com/uber-open-2018/,"Like most technology companies, open source has played a large role in the growth of Uber’s business, and our teams use and contribute to numerous projects. In 2012, we released our first open source project on GitHub. Six years later, &#8230;The post Announcing Uber Open Summit 2018: Collaboration at Scale appeared first on Uber Engineering Blog.",2018-10-02T15:17:53Z,#tech #engineering
Dr. Sebastian Raschka,https://sebastianraschka.com/,Book Review: Architects of Intelligence by Martin Ford,https://sebastianraschka.com/blog/2020/book-review-1-architects-of-intelligence.html,A brief review of Martin Ford's book that features interviews with 23 of the most well-known and brightest minds working on AI.,2020-01-06T13:00:00Z,#tech #engineering
Expedia Group Technology - Medium,https://medium.com/expedia-group-tech?source=rss----38998a53046f---4,"Autoscaling in Kubernetes: Options, Features, and Use Cases",https://medium.com/expedia-group-tech/autoscaling-in-kubernetes-options-features-and-use-cases-c8a6ce145957?source=rss----38998a53046f---4,NA,2020-11-19T13:02:26Z,#tech #engineering
BBC News - Technology,https://www.bbc.co.uk/news/,Call of Duty: US and British military go head to head,https://www.bbc.co.uk/news/technology-55287915,Teams from the US and British forces compete for the first time to raise money for veteran charities.,2020-12-13T00:09:48Z,#tech #news
BBC News - Technology,https://www.bbc.co.uk/news/,Hogmanay drone swarm lights up Scottish skies,https://www.bbc.co.uk/news/uk-scotland-55492620,Edinburgh's Hogmanay has been lighting up the skies online with a drone display of Scottish icons.,2020-12-31T02:01:47Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,A failed study shows a promising treatment for blindness,https://www.economist.com/science-and-technology/2020/12/12/a-failed-study-shows-a-promising-treatment-for-blindness,A story of gene therapy and happy accidents,2020-12-12T00:00:00Z,#tech #news
BBC News - Technology,https://www.bbc.co.uk/news/,Cyberpunk 2077: The story behind the video game,https://www.bbc.co.uk/news/technology-55252658,The creators of the highly anticipated title reveal their inspirations.,2020-12-10T06:17:45Z,#tech #news
