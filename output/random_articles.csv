feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Self Service Open Source Data Integration With AirByte - Episode 173,https://www.dataengineeringpodcast.com/airbyte-open-source-data-integration-episode-173/#utm_source=rss&utm_medium=rss,"Data integration is a critical piece of every data pipeline, yet it is still far from being a solved problem. There are a number of managed platforms available, but the list of options for an open source system that supports a large variety of sources and destinations is still embarrasingly short. The team at Airbyte is adding a new entry to that list with the goal of making robust and easy to use data integration more accessible to teams who want or need to maintain full control of their data. In this episode co-founders John Lafleur and Michel Tricot share the story of how and why they created Airbyte, discuss the project's design and architecture, and explain their vision of what an open soure data integration platform should offer. If you are struggling to maintain your extract and load pipelines or spending time on integrating with a new system when you would prefer to be working on other projects then this is definitely a conversation worth listening to.",2021-02-23T02:04:59Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Using Your Data Warehouse As The Source Of Truth For Customer Data With Hightouch - Episode 168,https://www.dataengineeringpodcast.com/hightouch-customer-data-warehouse-episode-168/#utm_source=rss&utm_medium=rss,"The data warehouse has become the central component of the modern data stack. Building on this pattern, the team at Hightouch have created a platform that synchronizes information about your customers out to third party systems for use by marketing and sales teams. In this episode Tejas Manohar explains the benefits of sourcing customer data from one location for all of your organization to use, the technical challenges of synchronizing the data to external systems with varying APIs, and the workflow for enabling self-service access to your customer data by your marketing teams. This is an interesting conversation about the importance of the data warehouse and how it can be used beyond just internal analytics.",2021-01-19T02:16:10Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#293 Learning how to learn as a developer,https://talkpython.fm/episodes/show/293/learning-how-to-learn-as-a-developer,"As software developers, we live in a world of uncertainty and flux. Do you need to build a new web app? Well maybe using Django makes the most sense if you've been doing it for a long time. There is Flask, but it's more mix and match being a microframework. But you've also heard that async and await are game changers and FastAPI might be the right choice. Whatever it is you're building, there is constant pressure to stay on top of a moving target. Learning is not something you do in school then get a job as a developer. No, it a constant and critical part of your career. That's why we all need to be good, very good, at it.Matt Harrison is back on Talk Python to talk to us about some tips, tricks, and even science about learning as software developers.Links from the showMatt on Twitter: @__mharrison__Matt's Learning Course (use code TALKPYTHON20 for 20% off): mattharrison.podia.comFriends of the show: talkpython.fm/friends-of-the-showStreamlit: streamlit.ioJupyter LSP: github.com/krassowski/jupyterlab-lspSponsorsBrilliantLinodeTalk Python Training",2020-12-01T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#282 pre-commit framework,https://talkpython.fm/episodes/show/282/pre-commit-framework,"Git hook scripts are useful for identifying simple issues before committing your code. Hooks run on every commit to automatically point out issues in code such as trailing whitespace and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. As we created more libraries and projects we recognized that sharing our pre-commit hooks across projects is painful. That's why I'm happy to welcome Anthony Sottile to the show to discuss  pre-commit, a framework for managing and maintaining multi-language pre-commit hooks.Links from the showAnthony at Twitter: @codewithanthonypre-commit: pre-commit.compre-commit continuous integration: pre-commit.cipre-commit hooks: pre-commit.com/hooks.htmlpre-commit on GitHub: github.comshhgit secret discovery project: github.combabi editor: github.comTwitch stream: twitch.tvAnthony on GitHub: github.comSponsorsTalk Python TrainingLinode",2020-09-17T00:00:00Z,#datascience #ds #podcast
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,Cactus image classification using convolutional neural network (CNN) that reaches 98%+ accuracy,https://towardsdatascience.com/cactus-image-classification-using-convolutional-neural-network-cnn-that-reaches-98-accuracy-8432e068f1ea?source=rss----7f60cf5620c9---4,The goal is to build a classifier to classify an image as &#x201C;cactus&#x201D; or &#x201C;non cactus&#x201D;.Continue reading on Towards Data Science »,2021-03-15T03:38:30Z,#datascience #tutorials
DEV Community,https://dev.to,Things I wish someone had told me when I started learning how to code!,https://dev.to/fahadimran371/things-i-wish-someone-had-told-me-when-i-started-learning-how-to-code-naa,"My journey as a programmer started when I chose to pursue Software Engineering as a major after completing my High School Education. Since then, I have been programming for the better part of the last 3 years in various programming languages from Python, Java, C++, and recently JavaScript.It is important to mention that I had literally never written a single line of code before starting my bachelor's. In fact, I don't remember taking a computer course throughout my middle and high school years. Suffice it to say, I was not like those students in my class, who had been coding as a hobby for a long time, or those who had already published entire Apps to the Play Store. 🦄Thus, in all aspects, I was a complete Newbie. Therefore, I also had some misconceptions about programming and coding in general. It took me the better part of the last 2 and a half years to understand my negligence, and realize how mistaken I was. Thus, I am writing this blog post to help others who are new to programming like I was, by debunking some common misconceptions about learning to code.Enough talking, let's get into it, shall we?       🎯 Focus on the FundamentalsAs a new programmer, your number one priority should be to master the fundamentals. By this I mean, you should have a grasp over concepts like variables, data types, data structures, conditionals, loops, algorithms, etc.The reason being, once you have sound knowledge of the fundamentals, you can learn any programming language in a matter of days. At the core, all programming languages generally have the same concepts and a good knowledge of the fundamentals will help you regardless of the programming language you choose to pick up.I can say with my own example that once you know the basics, picking up a new language will be a piece of cake. So, if you take away one thing from this post, it should be to concentrate on sharpening up your fundamental programming concepts.      😨 Make Lots of MistakesFear of making mistakes is another big reason people fail at programming. I too was in the same boat. I had the notion that a good programmer knows the exact syntax of the language in addition to writing the perfect code that runs the first time around. This notion hindered my ability to learn new things because I was so afraid of making mistakes that I never even tried them.This concept of mine was blasted to smithereens in a very short span of time. Writing clean and elegant code that runs on the very first try and produces the correct output is nothing short of a fantasy. Even the most experienced developers cannot write fully functioning and error-free code on the first attempt. The sooner you realize this, the faster you will learn from your mistakes.What you must understand is that most of your time coding will be spent on debugging and looking up errors on the internet. To succeed as a developer, you are not expected to memorize the entire syntax of a language in your head. I hardly believe anyone can do that.Instead, you should focus on effectively debugging your applications. Errors are an essential part of programming. The sooner you feel comfortable with seeing red output on the screen screaming at you, the quicker you will master programming. Some of the best programmers I know or follow still spend a considerable amount of time-solving simple errors and looking up syntax that they cannot remember.Another thing you should realize is that the first time you write a piece of code, it will never be perfect. Instead, a good practice is to first write code that works and then refine and refactor that code to make it more readable and concise.      🚀 Develop a Habit of Self-LearningBy far the worst notion you could have as a new programmer is expecting the university or college to teach you everything.Universities follow a fixed curriculum, and while certain courses have greatly benefited me like Database Systems, Computer Networks, Data structures, and Algorithms, etc. Many courses were not relevant to what is required in the field.For example, most universities don't teach you about web development in detail or about tools like git and GitHub which are widely used throughout the industry.Thus, the cold truth is that you have to develop a habit of learning on your own. In my case, the entire knowledge I have about web development is through my own efforts and learning. While it may be true in other fields of Engineering, the programming landscape changes so quickly that educational institutions can't keep pace. Learning to code is a continuous process and you must keep practicing and expanding your skillset if you want to stay relevant in today's competitive market.And the best thing is the abundance of online resources available to help you in this regard. If you want to learn a language or framework there are probably a lot of tutorials and articles that you can consult. So, it's a matter of dedication and hard work which you are willing to put in, and you can master a skill in no time.      😵 Don’t Fall into Tutorial HellAnother problem that new programmers face is that they tend to fall into Tutorial Hell. Most of us resort to coding tutorials on YouTube and Udemy courses to learn any new language, framework, or skill. But these courses have a critical flaw that many of us don't realize.As you are following along with your instructor, you might feel very confident and even feel like you're getting everything. But as soon as you finish a course and try to develop something on your own, you'll feel completely blank and have no idea where to even start. This has happened to me many times and it's a very sinking feeling.The problem with these tutorials and courses is that they teach you how to build a specific application. What they don't teach you is how to develop the mindset to solve a particular problem. Additionally, you also don't understand why the instructor is using a particular framework or why he/she is writing a piece of code in that way and not the other way round.Thus, it just becomes a case of copying code that the instructor is writing and not understanding the reasoning behind it. So, while you may finish the course and build the application yet, you will be unable to code something from scratch on your own.Instead, the best way to benefit from these courses is to modify the code after you have finished the project. Try to break the code and change things around. Experiment with a different approach to implementing a specific feature. At the very least, try to add some functionality on top of the course project. By adopting this approach, you will learn why things work the way they do and will understand the purpose behind the code, instead of merely copy-pasting it as your own.      🎓 Don't try to Learn EverythingFinally, the last bit of advice I will give to upcoming programmers is that you don't have to learn everything under the sun. When you first start to code, you quickly realize that there are WAY too many fields that you can choose from and it can be quite overwhelming to decide what you want to do.Let me give you a taste of what I am talking about. Let's say you are interested in Web Development. You can choose to become a front-end web developer and work with things like HTML, CSS, JavaScript, Sass, and frameworks like React, Angular, Vue, or libraries like Bootstrap, Tailwind CSS, etc.Or you can choose to be a back-end developer and work with languages like Python, PHP, JavaScript or frameworks like Django, Flask, Express, etc, and databases like MySQL, PostgreSQL or MongoDB, etc.Or you can choose both and become a full-stack developer and handle both the front and back-end of a web app. Do you see where I am getting at? And this is just one field.Maybe you fancy Mobile Development or perhaps Game Development. You might be into Machine Learning or Artificial Intelligence and work with data analysis and training complex neural networks. Or you might want to indulge in the field of cybersecurity and work on ethical hacking and so on.Suffice it to say, whatever you want to do there is a field for it. My advice to you is to choose what you want to specialize in and go all out in it. There is a high demand for talented individuals who are great developers in a specific field instead of those who know a bit about everything. So, experiment to find what you like and then focus on mastering skills needed in that field and you'll be doing better than most.      🐹 Closing ThoughtsThus, these were some of the things I learned since I started to code. I am in no way an expert yet, this is the essence of what I have personally experienced in my 3 years of programming. I am extremely happy with my decision to choose this field as my profession and I want to give back to the community as much as possible.For all the new programmers starting, focus on fundamentals, continue learning in your time, and don't forget to have fun!      👋 That's All Folks!If you have any questions feel free to ask me in the comments and I will do my best to answer them. Feel free to read some of my other blogs @fahadimran371. Till then, thanks for reading, and happy coding! 😊",2021-03-14T13:49:05Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,From Visual Impressions to Visual Opinions,http://feedproxy.google.com/~r/RBloggers/~3/h2u2B_LiT9U/,"In The Analytics Trap I scribbled some notes on how I like using data not as a source of ""truth"", but as a lens, or a perspective, from a particular viewpoint.One idea I’ve increasingly noticed being talked about explcitly across vari...The post From Visual Impressions to Visual Opinions first appeared on R-bloggers.",2021-03-12T04:48:51Z,#datascience #tutorials
DEV Community,https://dev.to,Quick prototyping & playing with promises in one line,https://dev.to/aminnairi/quick-prototyping-playing-with-promises-in-one-line-d3c,"RationalePromises are one of my favorite features of all the ECMAScript standards and provide a clever way of dealing with asynchronous results that can either be resolved or rejected.But sometimes, when the source-code is growing, it can be tedious to work with, especially when error messages can be easily ignored.If you don't care about the error messages, but rather the end result, you can provide a simple fallback value with this simple trick.      ContextLet's say you wanted to fetch the list of users from your API.&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;script&gt;      ""use strict"";      fetch(""https://jsonplaceholder.typicode.com/users"");    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;In this short example, we are using the Fetch API to ask our API for a list of users.Of course, we need to deal with the success (resolved) and errors (rejected) cases.&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;script&gt;      ""use strict"";      fetch(""https://jsonplaceholder.typicode.com/users"").then(response =&gt; {        return response.json();      }).then(users =&gt; {        console.log(users);      }).catch(() =&gt; {        console.error(""Yep, no users."");      });    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;In this particular example, we don't really care about the reason why it would reject, we simply want to provide a default value. We could do that in a more imperative way using an async function.&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;script&gt;      ""use strict"";      const main = async () =&gt; {        let users = [];        try {          const response = await fetch(""https://jsonplaceholder.typicode.com/users"")          users = await response.json();        } catch {          // ... discarded        }        console.log(users);      };      main();    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;Here we are using an async function to imperatively handle each step of our promise. And if it fails, we simply have our default value that will kick in when we log the result.This works well and as intended, but this is a lot of work for so little. Plus, we are using a try-catch with the catch part that is being discarded and is pretty much useless.Let's see if we can find an alternative to all of this.      AlternativeSince the await keyword is used on a promise, nothing can stop you from writing all the promise instructions in one line and provide a default value right away.&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;script&gt;      ""use strict"";      const main = async () =&gt; {        const users = await fetch(""..."").then(response =&gt; response.json()).catch(() =&gt; []);        console.log(users);      };      main();    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;Let's break this down real quick.fetch(""..."");This is our promise. Nothing fancy, it will just fetch our data as earlier..then(response =&gt; response.json())This is the part where we handle any resolved value. This means that when the response can be turned into a JSON value, we will receive what's behind this call (here, the list of users)..catch(() =&gt; []);This is the part where we handle the error. Here we simply say that instead of logging anything, we simply return a default value. Here it is an empty array so that it becomes easy to work with our data even if the request fails.fetch(""..."").then(response =&gt; response.json()).catch(() =&gt; []);All of this is a single promise. This is important to understand because this is literally the heart of this technique. Because we have only one single promise here we are able to use what is coming next.It will either reject and trigger the .then part, or fail and trigger the .catch part. You handled all possible cases in one line and whatever the outcome of the promise is, you know that you have a value for one or the other.await fetch(""..."")...Here we simply make sure that anything that is being done on this line with the promise should be blocking the function until the promise is either resolved (the list of users) or rejected (the empty array).If we put this all together, this means that in one line, you can easily request data from an API, tell it how you want it to be (either JSON or Text), and provide a default value in case it fails to fetch the data.And this lets you use a nice two-liner for requesting and displaying any data from an API.const users = await fetch(""..."").then(response =&gt; response.json()).catch(() =&gt; []);console.log(users);      ConclusionThis technique is very interesting because it lets you prototype things quickly, and even if you don't really need the error message.If you are on a recent version of Node.js and using an ECMAScript Module, you can even leverage the new top-level await feature to make this a short little script.$ npm install node-fetch$ touch index.mjsimport fetch from ""node-fetch"";const users = await fetch(""https://jsonplaceholder.typicode.com/users"").then(response =&gt; response.json()).catch(() =&gt; []);console.log(users);$ node index.mjs[...] (output truncated)Be aware that any error messages will be hidden and so this technique is not well suited in a large application where you want to have controls and monitoring about what failed, and possibly file error reports to a third-party application like Sentry.Also, the goal of this technique is definitively not to be clear and readable, if you are concerned about these points, you should be writing your promises using the classic syntax instead.And of course, this technique is only usable in environments that support writing async functions so be aware of that if you are not transpiling your code.",2021-03-14T19:13:24Z,#datascience #tutorials
FlowingData,https://flowingdata.com,"Average stimulus aid, by household size and income",https://flowingdata.com/2021/03/12/average-stimulus-aid-by-household-size-and-income/,"Alicia Parlapiano and Josh Katz, reporting for NYT&#8217;s The Upshot, plotted the average&#8230;Tags: stimulus, Upshot",2021-03-12T18:23:57Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,The expanding nuclear family,https://www.economist.com/graphic-detail/2021/01/29/the-expanding-nuclear-family,Palestinian leadership • Vaccine wars • Budget-busters • Market madness,2021-01-29T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,New data show the failures of Donald Trump’s China trade strategy,https://www.economist.com/graphic-detail/2021/02/10/new-data-show-the-failures-of-donald-trumps-china-trade-strategy,American exports have fallen well short of targets in the deal’s first year,2021-02-10T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Republicans introduce a torrent of new laws to restrict voting,https://www.economist.com/graphic-detail/2021/02/24/republicans-introduce-a-torrent-of-new-laws-to-restrict-voting,There are nearly seven times as many such proposals in state legislatures as there were a year ago,2021-02-24T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,273. Did China Eat America’s Jobs?,https://omny.fm/shows/freakonomics-radio/did-china-eat-america-s-jobs,"For years, economists promised that global free trade would be mostly win-win. Now they admit the pace of change has been ""traumatic."" This has already led to a political insurrection -- so what's next?",2017-01-26T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,129. Should Tipping be Banned?,https://omny.fm/shows/freakonomics-radio/should-tipping-be-banned,"It's awkward, random, confusing -- and probably discriminatory too.",2013-06-03T13:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,362. Why Is This Man Running for President?,https://omny.fm/shows/freakonomics-radio/why-is-this-man-running-for-president,"In the American Dream sweepstakes, Andrew Yang was a pretty big winner. But for every winner, he came to realize, there are thousands upon thousands of losers — a “war on normal people,” he calls it. Here’s what he plans to do about it.",2019-01-10T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,186. Why Do People Keep Having Children?,https://omny.fm/shows/freakonomics-radio/why-do-people-keep-having-children,"Even a brutal natural disaster doesn’t diminish our appetite for procreating. This surely means we’re heading toward massive overpopulation, right? Probably not.",2014-11-13T05:00:00Z,#economics #podcast
Data Science in Airbnb Engineering &amp; Data Science on Medium,https://medium.com/airbnb-engineering/tagged/data-science?source=rss----53c7c27702d5--data_science,Data Quality at Airbnb,https://medium.com/airbnb-engineering/data-quality-at-airbnb-870d03080469?source=rss----53c7c27702d5--data_science,NA,2020-11-24T21:04:36Z,#tech #engineering
Google Open Source Blog,http://opensource.googleblog.com/,A new resource for coordinated vulnerability disclosure in open source projects,http://www.blogger.com/feeds/8698702854482141883/posts/default/1525211811333488692,A new resource for coordinated vulnerability disclosure in open source projects,2021-02-17T12:00:09Z,#tech #engineering
Yelp Engineering and Product Blog,https://engineeringblog.yelp.com/,Introducing Folium: Enabling Reproducible Notebooks at Yelp,https://engineeringblog.yelp.com/2020/10/introducing-folium-enabling-reproducible-notebooks-at-yelp.html,"Jupyter notebooks are a key tool that powers Yelp data. It allows us to do ad hoc development interactively and analyze data with visualization support. As a result, we rely on Jupyter to build models, create features, run Spark jobs for big data analysis, etc. Since notebooks play a crucial role in our business processes, it is really important for us to ensure the notebook output is reproducible. In this blog post, we’ll introduce our notebook archive and sharing service called Folium and its key integrations with our Jupyterhub that enable notebook reproducibility and improve ML engineering developer velocity. Folium...",2020-10-21T00:00:00Z,#tech #engineering
Medium Engineering - Medium,https://medium.engineering?source=rss----2817475205d3---4,Counting your followers,https://medium.engineering/counting-your-followers-facbfafe45d9?source=rss----2817475205d3---4,NA,2020-11-24T21:28:01Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,Going viral,https://www.economist.com/science-and-technology/2020/12/31/going-viral,"Covid-19 dominated the scientific news. But other stories mattered, too",2020-12-31T00:00:00Z,#tech #news
Dataconomy,https://dataconomy.com,January AI raises $8.8 million for AI that helps people manage their diabetes,https://dataconomy.com/2021/02/january-ai-raises-8-8-million-ai-helps-people-manage-diabetes/,"This article was originally published at VentureBeat and is reproduced with permission. January AI, a startup developing a platform that predicts diabetic patients’ responses to certain foods, today announced that it raised $8.8 million. Notable investors in the round included Salesforce CEO Marc Benioff, YouTube cofounder Steve Chen, and former",2021-02-26T13:05:13Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Sieve-toothed seals may be whales in the making,https://www.economist.com/science-and-technology/2020/11/19/sieve-toothed-seals-may-be-whales-in-the-making,They filter small crustaceans from the water,2020-11-19T15:56:05Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Pfizer’s and BioNTech’s vaccine is the start of the end of the pandemic,https://www.economist.com/science-and-technology/2020/11/09/pfizers-and-biontechs-vaccine-is-the-start-of-the-end-of-the-pandemic,"Its 90% effectiveness is as good as it gets, and bodes well for other vaccines. But getting them quickly to the right people will be hard",2020-11-09T00:00:00Z,#tech #news
