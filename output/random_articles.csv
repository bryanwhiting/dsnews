feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Building A Cost Effective Data Catalog With Tree Schema - Episode 158,https://www.dataengineeringpodcast.com/tree-schema-data-catalog-episode-158/#utm_source=rss&utm_medium=rss,"A data catalog is a critical piece of infrastructure for any organization who wants to build analytics products, whether internal or external. While there are a number of platforms available for building that catalog, many of them are either difficult to deploy and integrate, or expensive to use at scale. In this episode Grant Seward explains how he built Tree Schema to be an easy to use and cost effective option for organizations to build their data catalogs. He also shares the internal architecture, how he approached the design to make it accessible and easy to use, and how it autodiscovers the schemas and metadata for your source systems.",2020-11-10T02:48:31Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#289 Discovering exoplanets with Python,https://talkpython.fm/episodes/show/289/discovering-exoplanets-with-python,"When I saw the headline ""Machine learning algorithm confirms 50 new exoplanets in historic first"" I knew the Python angle of this story had to be told! And that's how this episode was born. Join David Armstrong and Jev Gamper as they tell us how they use Python and machine learning to discover not 1, but 50 new exoplanets in pre-existing Keplar satellite data.Links from the showJev Gamper on Twitter: @brutforcimagMachine learning algorithm confirms 50 new exoplanets in historic first article: techrepublic.comSponsorsBrilliantTalk Python Training",2020-11-09T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#278 Teach kids Python with real programming and fun games at Code Combat,https://talkpython.fm/episodes/show/278/teach-kids-python-with-real-programming-and-fun-games-at-code-combat,"If there is one message I've been pushing across all of the Talk Python episodes, it's that programming is a superpower. Rather than all of us abandoning what we're interested in and becoming CS majors, we can take our passion or expertise and 10x it with a little programming skill. In that case, we should be teaching kids fluency in programming at a younger age. And yet, almost every platform or example meant to do so pulls its punches. We'll teach kids programming concepts but not code itself. That's a bridge too far.But it's not! That's why I'm excited about Code Combat. It's an online coding platform that uses real Python syntax to guide your hero, visually, through a dungeon full of challenges. Yet the editor and customized error messages mean this is approachable for kids before they can even type reliably.On this episode, we'll meet Nick Winter, one of the cofounders of Code Combat. There's a lot of philosophy behind the tool and technology to make it kid-friend and real Python at the same time.Oh, and it's running Python in the browser.Links from the showCodeCombat: codecombat.comOn TwitterCode Combat: @CodeCombatNick Winter: @nwinterNick's website: nickwinter.netCode Combat on GitHub: github.com/codecombatBrett's learnable programming talk: worrydream.comOzaria: ozaria.comSponsorsTalk Python TrainingLinode",2020-08-21T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#282 pre-commit framework,https://talkpython.fm/episodes/show/282/pre-commit-framework,"Git hook scripts are useful for identifying simple issues before committing your code. Hooks run on every commit to automatically point out issues in code such as trailing whitespace and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. As we created more libraries and projects we recognized that sharing our pre-commit hooks across projects is painful. That's why I'm happy to welcome Anthony Sottile to the show to discuss  pre-commit, a framework for managing and maintaining multi-language pre-commit hooks.Links from the showAnthony at Twitter: @codewithanthonypre-commit: pre-commit.compre-commit continuous integration: pre-commit.cipre-commit hooks: pre-commit.com/hooks.htmlpre-commit on GitHub: github.comshhgit secret discovery project: github.combabi editor: github.comTwitch stream: twitch.tvAnthony on GitHub: github.comSponsorsTalk Python TrainingLinode",2020-09-17T00:00:00Z,#datascience #ds #podcast
R-bloggers,https://www.r-bloggers.com,Nearcasting: Comparison of COVID-19 Projection Methods,http://feedproxy.google.com/~r/RBloggers/~3/USkKfMCInZ0/,"Originally published in the TIBCO Community Blog, by Adam Faskowitz As COVID-19 continues to impact people’s lives, we are interested in predicting case trends of the near future. Trying to...The post Nearcasting: Comparison of COVID-19 Projection Methods appeared first on R Consortium.The post Nearcasting: Comparison of COVID-19 Projection Methods first appeared on R-bloggers.",2020-12-17T14:11:25Z,#datascience #tutorials
DEV Community,https://dev.to,APB: Demystified Destructuring,https://dev.to/ash_bergs/apb-demystified-destructuring-4gaf,"I love digital media - blogs, e-books, the more the better. But as a self-identifying bibliophile, I never go long without picking up an old-school, paper and ink book. When I want to deeply learn something I always come back to the printed word. There's something about highlighting passages, and scribbling in the margins that cements information in my mind. I'm not alone in this, and there have been several studies that suggest students of all ages learn more, and retain more of what they learn, from physical books. I'm currently working my way through the third edition of Eloquent JavaScript by Marijn Haverbeke. Though I consider JavaScript my primary language and felt comfortable with it before starting, I've learned something new, or gained a deeper understanding of something I already knew with every chapter. During my study time the other night I came to a section about the ES6 features we all know and love, specifically destructuring. The section was short, more of a summary than a deep dive, but it made me realize I needed to know more about this ES6 feature - so I added it to the All Points Bulletin Board.      Question: What is Destructuring Assignment?      Short Answer: Destructuring is a succinct way to pull values out of an object and attach them to local variables in a single statement. It can be used on arrays or objects, allowing us to provide aliases, default values, and even complex expressions to obtain or replace data.      The Long AnswerThe first time I saw destructuring was when learning React, and you'll see it in a lot of similar frameworks and libraries. It allows us to easily unpack multiple values from an array or object and assign them to variables in a single line.Despite its name, destructuring isn't destructive - nothing is being destroyed. The original array is not mutated. Destructuring assignment allows us to literally deconstruct the object into its constituent parts, make copies and assign them to new local variables. The feature came about because we had ways to construct multiple properties at the same time through object and array literals, but no comparable mechanism of extracting data - other than piecemeal assignments.const numbersArray = [1, 2]; const x = numbersArray[0]; const y = numbersArray[1];console.log(x, y);//---&gt; 1, 2    Enter fullscreen mode        Exit fullscreen mode    Destructuring assignment works on the 2 most used data structures in JavaScript - arrays and objects. Array destructuring and object destructuring are very similar, with a few notable differences. We'll talk about array destructuring first.       Array DestructuringAt first glance destructuring looks a lot like an array or object literal - but flipped. Instead of a variable declaration on the left with the assignment on the right - the extracted values appear to the left, and the sourced variable on the right.const numbersArray = [1, 2]; // array literalconst [ x, y ] = numbersArray; // destructuring assignmentconsole.log(x, y);//---&gt; [1, 2]     Enter fullscreen mode        Exit fullscreen mode    Note: I've used a subtle naming convention in the code above. When I use destructuring I pad the variables in the destructuring array between brackets or braces with a leading and trailing space. This helps me read my code later, scanning files I can easily identify when I'm using destructuring assignment.Arrays are obsessed with position, just take a look at their built-in methods, and how those methods traverse elements. Array destructuring is no different, as we saw in the example above. The variables we created were assigned their values after being mapped to the value at the same index in the sourced array. Using that syntax we know how to grab values from an array, but what else can we do? We can assign values after declarationlet [a, b]; [ a, b ] = [""dog"", ""cat""];    Enter fullscreen mode        Exit fullscreen mode    We can skip values If the source variable contains values of no interest, they can be skipped with a comma and an empty space.const dogs = [""Sparkles"", ""Rover"", ""Mosby"", ""Rufus""]; const [ a, , b, c ] = dogs;const [ , , ,favorite ] = dogs;console.log(a, b, c); //---&gt; ""Sparkles"", ""Mosby"", ""Rufus""console.log(favorite);//---&gt; ""Rufus""    Enter fullscreen mode        Exit fullscreen mode    We can manipulate values with array methodsWe can chain other methods that also return an array - like .split.const name = ""Mark Johnson""; const [ firstName, lastName ] = name.split(' '); console.log(firstName);//---&gt; ""Mark""    Enter fullscreen mode        Exit fullscreen mode    We can provide default valuesWhat if we try to unpack more values than the sourced array contains? In that case those empty variables will return undefined, and no error will be thrown.To avoid ambiguity, we can provide a default value using the assignment operator.const employeeHours = [34, 40]; const [ employeeOne = 30, employeeTwo = 30, employeeThree = 30 ] = employeeHours; console.log(employeeThree);//---&gt; 30console.log(employeeOne);//---&gt; 34    Enter fullscreen mode        Exit fullscreen mode    These default values can take on much more depth, becoming complex expressions or function calls. They will only be evaluated if a value cannot be found. Below I've used the .reduce method in a helper function to find the average of employeeHours and assigned it as a back-up for employeeThree.const employeeHours = [34, 40]; const findAvg = (hours) =&gt; hours.reduce((a, b) =&gt; a + b, 0) / hours.length;const [ employeeOne, employeeTwo, employeeThree = findAvg(employeeHours) ] = employeeHours; console.log(employeeThree);//---&gt; 37    Enter fullscreen mode        Exit fullscreen mode    We can assign the Rest If we extract only one value from the sourced iterable, then we only get that single value. What if we wanted to directly grab one or two values, but make sure the rest are still captured? We can use 2 other ES6 features - the rest parameter and spread syntax. Using spread syntax (...) before a variable name creates the rest parameter. Sometimes you'll hear this referred to as the ""rest pattern"". Using the rest pattern is like selectively placing a couple of values in special boxes that can contain only one thing, and throwing the rest into a larger, catch-all box in case we need them later on.const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; const [ first, second, ...rest ] = numbers; console.log(rest);//---&gt; [3, 4, 5, 6, 7, 8, 9, 10]const colors = [""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orangered"", ""goldenrod""];const [ primary, secondary, accent, ...others ] = colors; console.log(others); //---&gt; [""green"", ""yellow"", ""purple"", ""orangered"", ""goldenrod""]     Enter fullscreen mode        Exit fullscreen mode    Any name can be given to the rest parameter, but it must be proceeded by the spread syntax (...) and it must be the last variable in the destructuring array. If the rest parameter has a trailing comma it will throw an error. We can extract values from nested arrays So far we've been working with single layer arrays, but destructuring works on nested arrays too. As always, position is important and the corresponding item must be an array.const styles = [[""desktop"", [800, 100, ""relative""]], [""mobile"", [500, 80, ""absolute""]]]; const [ [ className, [ height, width, position ] ] ] = styles;console.log(className);//---&gt; ""desktop""console.log(height);//---&gt; 800    Enter fullscreen mode        Exit fullscreen mode    Now that we've seen the basics, let's look a couple of use cases for array destructuring. Use Case 1: Working with returned arraysFunctions commonly return an array. Using array destructuring can make working with returned arrays DRY-er and easier to read. In the function below, we return an array and assign their values using destructuring. You can see that we can skip values, assign the rest and more, just as before.function dummy() {    return [10, 50, 30, 50, 60];}const [ first, second, , ...rest ] = dummy();console.log(first);//---&gt; 10console.log(rest);//---&gt; [50, 60]     Enter fullscreen mode        Exit fullscreen mode    Use Case 2: Swapping values One very handy use case of destructuring is swapping the contents of two variables. Before ES6 this required creating a temporary variable.let first = ""one""let second = ""two""// temporary variablelet originalFirst = first;// swap the valuesfirst = second; second = originalFirst;console.log(first, second)//---&gt; ""two"" ""one""    Enter fullscreen mode        Exit fullscreen mode    First a new variable, originalFirst, is created to capture the value of first, (""one""). Then first is directly reassigned to point to the value of second, (""two""). Finally second will be pointed to the value we captured in the temporary variable. If we didn't do this the original value of first would be lost upon reassignment. Using destructuring removes the need for a temporary local variable, and several lines of code altogether. In the destructuring array we'll declare the variables, and then swap them in the assignment, effectively trading values.let first = ""one""let second = ""two"" [ first, second ] = [second, first]; console.log(first, second); //---&gt; ""two"" ""one""    Enter fullscreen mode        Exit fullscreen mode    Use Case 3: Regex patterns! Regular expressions, regex for short, provide us a way to search a string against a pattern. Using the exec function returns an array where the first element is the entire match, and the following elements are the smaller captured matches. To illustrate what I mean, we'll look at a common regex pattern - the date matcher.// this is a regex pattern - and a handy one to know!const datePattern = /^([a-z]+)\s+(\d+)\s*,\s+(\d{4})$/i; let [ fullDate, month, day, year ] = datePattern.exec(""December 20, 2020"") || []; console.log(fullDate, month, day, year); //---&gt; ""December 20, 2020"" ""December"" ""20"" ""2020""     Enter fullscreen mode        Exit fullscreen mode    The exec function takes in the pattern to be searched for, and the string to be searched. It returns an array, containing first the full match with all of its spaces and characters (""December 20, 2020""), and then the individual matches that were captured (""December"" ""20"" ""2020"").Note that after calling the exec function and passing in a string, we provided the logical || (or) operator and defaulted the return to be an empty array if no match could be found. Though this post isn't really about regular expressions, they're an incredibly valuable tool to have in your belt. They can be used to search for word, date, and other patterns in text - capable of being as broad or specific as needed. Read more about regular expressions here.       Object DestructuringObject destructuring is very similar to array destructuring, so we'll touch on it quickly, concentrating on the differences. We can extract properties much the same way we do with arrays, but instead of brackets, we use curly braces.const dogs = {good: ""Rover"", gooder: ""Sparkles"", goodest: ""Ace""}; const { good, gooder, goodest } = dogs;console.log(good, gooder, goodest); //---&gt; ""Rover"" ""Sparkles"" ""Ace""    Enter fullscreen mode        Exit fullscreen mode    If arrays are obsessed with position, objects are obsessed with name. That being the case, the property name must be spelled correctly with casing in mind, or it will return undefined.const dogs = {good: ""Rover"", gooder: ""Sparkles"", goodest: ""Ace""}; const { good, Gooder, goodest } = dogs;console.log(good, Gooder, goodest); //---&gt; ""Rover"" undefined ""Ace""    Enter fullscreen mode        Exit fullscreen mode    If we're not interested in a value we don't need to intentionally skip it. Instead, we can simply omit the property name. Position doesn't matter, we need only to be aware of the property names we're interested in, and their location relative to depth.const dogs = {good: ""Rover"", gooder: ""Sparkles"", goodest: ""Ace""}; const { good, goodest } = dogs;console.log(good, goodest); //---&gt; ""Rover"" ""Ace""    Enter fullscreen mode        Exit fullscreen mode    We can assign values after declaration - with one gotchaIf we assign a value to a variable without a declaration, we must wrap the assignment statement in parentheses.let first, second; ({ first, second } = {first: 1, second: 2}); // assignment statementconsole.log(first, second);//---&gt; 1 2    Enter fullscreen mode        Exit fullscreen mode    If these parentheses are left out the statement will be read as a block, instead of an object literal destructuring assignment. They are not required when the declaration is present.We can provide default values and assign the RestWe can capture the rest, and assign a default value, the same way we do in array destructuring - the only difference is the curly brackets.const topDogs = {  first: ""Rover"",   second: ""Marshmallow"",   third: ""Kurt"",   honorableMentions: {    costume: ""Sparkles"",     personality: ""Buccaneer""  }}; const { first, third, fourth = ""Cocoa"", ...rest } = topDogs;console.log(first, third, fourth); //---&gt; ""Rover"" ""Kurt"" ""Cocoa""console.log(rest);//---&gt; Object {honorableMentions: Object {costume: ""Sparkles"", personality: ""Buccaneer""}, second: ""Kurt""}    Enter fullscreen mode        Exit fullscreen mode    We can provide an alias If we want our identifier to have a different name than the property, we can provide an alias. Call the property name as usual, followed by a colon and the desired name.const topDogs = {  first: ""Rover"",   second: ""Marshmallow"",   third: ""Kurt"", }; const { first: gold, second: silver, third: bronze } = topDogs;console.log(gold, silver, bronze);//---&gt; ""Rover"" ""Marshmallow"" ""Kurt""    Enter fullscreen mode        Exit fullscreen mode    We can extract values from nested objectsThe properties on the objects we've seen so far have contained primitive data types, but they can also contain complex structures, like another object. We can use destructuring to access values in these nested structures.const topDogs = {  first: ""Rover"",   second: ""Marshmellow"",   third: ""Kurt"",   honorableMentions: {    costume: ""Sparkles"",     personality: ""Buccaneer""  }}; const { honorableMentions: { costume: bestDressed } } = topDogs;console.log(bestDressed); //---&gt; ""Sparkles""    Enter fullscreen mode        Exit fullscreen mode    I like to think of these statements as a map with legend. honorableMentions is not an identifier, or a variable. If we try to log it and peak at its guts, we won't find anything. It just lets the compiler know to look for a nested object with name honorableMentions on the first level of the sourced object, reach into it and grab the value of the property with name costume and copy the value found there into our identifier bestDressed. We can extract values an unlimited amount of levels down. We just need to keep track of how many levels deep we are (with the presence of brackets) and how many stops there are on the way (with property names). Without destructuring we could accomplish the same result with dot or bracket notation.const topDogs = {  first: ""Rover"",   second: ""Marshmellow"",   third: ""Kurt"",   honorableMentions: {    costume: ""Sparkles"",     personality: ""Buccaneer""  }}; console.log(topDogs.honorableMentions.costume); //---&gt; ""Sparkles""    Enter fullscreen mode        Exit fullscreen mode    Use Case: Destructuring propsWorking with the props system in React often involves working with large, complex objects. Here destructuring can really shine - making components not only easier to read, but easier to write. In this contrived example, we're passing a card object to a card viewing component through props.import React from ""react"";import ""./styles.css"";import CardViewer from './CardViewer'; const cardData = {  front: ""What does padding refer to in CSS?"",   back: ""Padding refers to the space between the border of the element and the content of the element"",   user_id: 1,   public: true,   active: true,   notes: [""if border-box sizing is used padding will not effect the size of an element"", ""padding 'pads the content'""]}; export default function App() {  const card = cardData;   return (    &lt;div className=""App""&gt;      &lt;CardViewer card={card} /&gt;    &lt;/div&gt;  );}    Enter fullscreen mode        Exit fullscreen mode    Without destructuring we have to repeatedly use the props prefix, and any further prefix needed, to get to the correct data in the CardViewer component.import React, { useState } from ""react"";const CardViewer = (props) =&gt; {   const [ flipped, setFlipped ] = useState(false);    const flipCard = (e) =&gt; {     e.preventDefault();      setFlipped(!flipped);   }  return(    &lt;div onClick={flipCard}&gt;      &lt;h3&gt; {flipped ?             `${props.card.back}` :              `${props.card.front}`}      &lt;/h3&gt;      &lt;div&gt;        &lt;p&gt;Notes:&lt;/p&gt;        &lt;ul&gt;{props.card.notes.map((note)=&gt;{          return &lt;li&gt;{note}&lt;/li&gt;        })} &lt;/ul&gt;      &lt;/div&gt;    &lt;/div&gt;  )}export default CardViewer;     Enter fullscreen mode        Exit fullscreen mode    Using destructuring we can easily grab the values we need in the component parameters, then in the return need only include the card prefix.import React, { useState } from ""react"";const CardViewer = ({ card }) =&gt; {   const [ flipped, setFlipped ] = useState(false);    const flipCard = (e) =&gt; {     e.preventDefault();      setFlipped(!flipped);   }  return(    &lt;div onClick={flipCard}&gt;      &lt;h3&gt; {flipped ?             `${card.back}` :              `${card.front}`}      &lt;/h3&gt;      &lt;div&gt;        &lt;p&gt;Notes:&lt;/p&gt;        &lt;ul&gt;{card.notes.map((note)=&gt;{          return &lt;li&gt;{note}&lt;/li&gt;        })} &lt;/ul&gt;      &lt;/div&gt;    &lt;/div&gt;  )}export default CardViewer;     Enter fullscreen mode        Exit fullscreen mode    We can take it even further with nested destructuring - grabbing only the things we're truly interested in. The resulting return reads almost like a sentence.import React, { useState } from ""react"";const CardViewer = ({ card: { front, back, notes: [ ...notes ] } }) =&gt; {   const [ flipped, setFlipped ] = useState(false);    const flipCard = (e) =&gt; {     e.preventDefault();      setFlipped(!flipped);   }  return(    &lt;div onClick={flipCard}&gt;      &lt;h3&gt; {flipped ?             `${back}` :              `${front}`}      &lt;/h3&gt;      &lt;div&gt;        &lt;p&gt;Notes:&lt;/p&gt;        &lt;ul&gt;{notes.map((note)=&gt;{          return &lt;li&gt;{note}&lt;/li&gt;        })} &lt;/ul&gt;      &lt;/div&gt;    &lt;/div&gt;  )}export default CardViewer;     Enter fullscreen mode        Exit fullscreen mode    Destructuring is another invaluable ES6 feature, allowing us to extract properties and values the same way we can construct them with object literals. Destructuring saves time, reduces confusion and can result in elegant, readable code. The next time you're working with complex data structures, keep this feature in your back pocket and you might just save yourself some time and headaches. ResourcesEloquent JavaScript - Marijn HaverbekeThe Babel Replit - Always a good place to toss some code in and learn what it does under the hoodArray Destructuring in ES6 - FreeCodeCampDestructuring Assignment - MDN Web Docs ES6 Destructuring: The Complete Guide - Glad China, CodeBurstDestructuring Assignment - Javascipt.infoDestructuring - exloringjs.com Destructuring Regular Expression Matching - Marius SchulzJavaScript Object Destructuring - Dmitri PavlutinDestructuring &amp; Function Arguments - David WalshDestructuring Props in React - Lindsay Criswell, Medium🦄 Thanks for reading!",2020-12-21T00:22:07Z,#datascience #tutorials
Blog – Machine Learning Mastery,https://machinelearningmastery.com,Perceptron Algorithm for Classification in Python,https://machinelearningmastery.com/perceptron-algorithm-for-classification-in-python/,"The Perceptron is a linear machine learning algorithm for binary classification tasks. It may be considered one of the first and one of the simplest types of artificial neural networks. It is definitely not &#8220;deep&#8221; learning but is an important building block. Like logistic regression, it can quickly learn a linear separation in feature space [&#8230;]The post Perceptron Algorithm for Classification in Python appeared first on Machine Learning Mastery.",2020-12-10T18:00:29Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Cross National Death Rates,http://feedproxy.google.com/~r/RBloggers/~3/PG94Xfg9omY/,"Data from the Short Term Morality Fluctuations dataset compiled by the Human Mortality Database continues to be very interesting. When thinking about how to interpret the 2020 data in a cross-national and longitudinal context, it’s clear that the...The post Cross National Death Rates first appeared on R-bloggers.",2020-12-18T09:55:42Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Economists look at more than GDP when choosing countries to study,https://www.economist.com/graphic-detail/2020/12/12/economists-look-at-more-than-gdp-when-choosing-countries-to-study,Speaking English and sending students to study abroad draw researchers’ interest,2020-12-12T00:00:00Z,#dataviz
FlowingData,https://flowingdata.com,Blob Opera is a machine learning model you can make music with,https://flowingdata.com/2020/12/17/blob-opera-is-a-machine-learning-model-you-can-make-music-with/,"David Li, in collaboration with Google Arts and Culture, made a fun experiment&#8230;Tags: blob, David Li, Google, machine learning, opera",2020-12-17T08:30:15Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,The covid slump,https://www.economist.com/graphic-detail/2020/10/09/the-covid-slump,Digital finance on the march • The Swedish exception • Distrusted politicians • Nagorno-Karabakh,2020-10-09T00:00:00Z,#dataviz
Information is Beautiful,https://informationisbeautiful.net,250 Days of Beautiful News,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/u9WvVO4JuCU/,"Beyond the headlines is another landscape, a place where other things are happening. Slower, gradual and sometimes beautiful things.",2020-06-18T20:02:42Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,438. How to Succeed by Being Authentic (Hint: Carefully),https://omny.fm/shows/freakonomics-radio/how-to-succeed-by-being-authentic-hint-carefully,"John Mackey, the C.E.O. of Whole Foods, has learned the perils of speaking his mind. But he still says what he thinks about everything from “conscious leadership” to the behavioral roots of the obesity epidemic. He also argues for a style of capitalism and politics that at this moment seems like a fantasy. What does he know that we don’t?",2020-11-05T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,PLAYBACK (2015): Could the Next Brooklyn Be ... Las Vegas?!,https://omny.fm/shows/freakonomics-radio/playback-2015-could-the-next-brooklyn-be-las-vegas,"Tony Hsieh, the longtime C.E.O. of Zappos, was an iconoclast and a dreamer. Five years ago, we sat down with him around a desert campfire to talk about those dreams. Hsieh died recently from injuries sustained in a house fire; he was 46.",2020-12-06T10:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,427. The Pros and Cons of Reparations,https://omny.fm/shows/freakonomics-radio/the-pros-and-cons-of-reparations,"Most Americans agree that racial discrimination has been, and remains, a big problem. But that is where the agreement ends.",2020-07-23T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,423. The Doctor Will Zoom You Now,https://omny.fm/shows/freakonomics-radio/the-doctor-will-zoom-you-now,"Thanks to the pandemic, the telehealth revolution we’ve been promised for decades has finally arrived. Will it stick? Will it cut costs — and improve outcomes? We ring up two doctors and, of course, an economist to find out.",2020-06-25T03:00:00Z,#economics #podcast
Squarespace / Engineering,https://engineering.squarespace.com/,The Nuts and Bolts with Ed Bridges,https://engineering.squarespace.com/blog/2018/the-nuts-and-bolts-with-ed-bridges,“The Nuts and Bolts” is a reoccurring Q&A with Squarespace engineers. Questions are compiled by their peers to guarantee we get right to the good stuff.,2018-11-21T18:30:00Z,#tech #engineering
QuickBooks Engineering - Medium,https://quickbooks-engineering.intuit.com?source=rss----aafcab06cc52---4,Enterprise Cloud Operations and Governance,https://quickbooks-engineering.intuit.com/enterprise-cloud-operations-and-governance-fdb614919cc5?source=rss----aafcab06cc52---4,NA,2020-02-10T08:42:23Z,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,Fostering a Culture of Sponsorship: Introducing Uber’s Engineering and Sponsorship Development Program,https://eng.uber.com/engineering-sponsorship-development-program/,"Being a strong engineer requires more than just top-notch coding. The ability to navigate interpersonal relationships with colleagues and leverage leadership skills is fundamental to your success, regardless of whether you’re an individual contributor or a manager. Mentorship and sponsorship &#8230;The post Fostering a Culture of Sponsorship: Introducing Uber’s Engineering and Sponsorship Development Program appeared first on Uber Engineering Blog.",2020-03-12T16:00:33Z,#tech #engineering
Capital One Tech - Medium,https://medium.com/capital-one-tech?source=rss----3db3a67cb648---4,Node.js Control Flow — An Overview,https://medium.com/capital-one-tech/node-js-control-flow-an-overview-68f76ef750c3?source=rss----3db3a67cb648---4,NA,2020-10-15T15:43:12Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,Comet NEOWISE lights up northern skies,https://www.economist.com/science-and-technology/2020/07/18/comet-neowise-lights-up-northern-skies,It was discovered by a satellite that monitors threats to Earth,2020-07-18T00:00:00Z,#tech #news
Startups – TechCrunch,https://techcrunch.com,Foresight raises $15M for its construction workers’ compensation platform,https://techcrunch.com/2020/12/18/foresight-raises-15m-for-its-construction-workers-compensation-platform/,"When an accident on a building site resulted in the death of their friend, the founders of Safesite were inspired to launch the platform to digitize safety programs for construction. The data from that gave birth to a new insurtech startup this year, Foresight, which covers workers&#8217; compensation. The startup has now released, for the [&#8230;]",2020-12-18T09:00:55Z,#tech #news
Dataconomy,https://dataconomy.com,Twitter text analytics reveals COVID-19 vaccine hesitancy tweets have crazy traction,https://dataconomy.com/2020/12/twitter-text-analytics-reveals-covid-19-vaccine-hesitancy-tweets-have-crazy-traction/,"Despite the good news emanating from COVID-19 vaccine trials, governments should understand hesitancy concerns to ensure a successful roll-out plan. The analysis identified 243,000 tweets from the UK and US that referred to a possible COVID-19 vaccine Hesitancy tweets were not just a more significant portion of the vaccine conversation,The post Twitter text analytics reveals COVID-19 vaccine hesitancy tweets have crazy traction appeared first on Dataconomy.",2020-12-03T15:19:40Z,#tech #news
MIT Technology Review,https://www.technologyreview.com,This is the Stanford vaccine algorithm that left out frontline doctors,https://www.technologyreview.com/2020/12/21/1015303/stanford-vaccine-algorithm/,"When resident physicians at Stanford Medical Center—many of whom work on the frontlines of the covid-19 pandemic—found out that only seven out of over 1,300 of them had been prioritized for the first 5,000 doses of the covid vaccine, they were shocked. Then, when they saw who else had made the list, including administrators and&#8230;",2020-12-21T11:00:00Z,#tech #news
