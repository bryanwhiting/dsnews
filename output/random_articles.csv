feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Keeping A Bigeye On The Data Quality Market - Episode 160,https://www.dataengineeringpodcast.com/bigeye-data-quality-market-episode-160/#utm_source=rss&utm_medium=rss,"One of the oldest aphorisms about data is ""garbage in, garbage out"", which is why the current boom in data quality solutions is no surprise. With the growth in projects, platforms, and services that aim to help you establish and maintain control of the health and reliability of your data pipelines it can be overwhelming to stay up to date with how they all compare. In this episode Egor Gryaznov, CTO of Bigeye, joins the show to explore the landscape of data quality companies, the general strategies that they are using, and what problems they solve. He also shares how his own product is designed and the challenges that are involved in building a system to help data engineers manage the complexity of a data platform. If you are wondering how to get better control of your own pipelines and the traps to avoid then this episode is definitely worth a listen.",2020-11-23T23:26:25Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#295 GIS + Python,https://talkpython.fm/episodes/show/295/gis-python,"Geography is the study of places and the relationships between people and their environments. Often we think of maps, but maps are static. GIS gets interesting when you realize that we're studying and visualizing data flowing through these locations and communities. In this episode, you'll meet Silas Toms. He's an author of several Python GIS books and the host of The Mappist Hour podcast. Are you ready to dive into GIS with Python?Links from the showSilas on twitter Twitter: @loki_presidentSilas' Books:Mastering Geospatial Analysis with Python: Explore GIS processing and learn to work with GeoDjango, CARTOframes and MapboxGL-Jupyter: amazon.comArcPy and ArcGIS – Geospatial Analysis with Python: amazon.comArcPy and ArcGIS - Second Edition: Automating ArcGIS for Desktop and ArcGIS Online with Python: amazon.comThe Mappyist Hour podcast: themappyisthour.comPackagesGeoAlchemy ORM: geoalchemy-2.readthedocs.ioLeaflet.js: leafletjs.comMapbox GL: mapbox.comDeck GL: deck.glSponsorsTalk Python TrainingLinode",2020-12-18T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Add Version Control To Your Data Lake With LakeFS - Episode 157,https://www.dataengineeringpodcast.com/lakefs-data-lake-versioning-episode-157/#utm_source=rss&utm_medium=rss,"Data lakes are gaining popularity due to their flexibility and reduced cost of storage. Along with the benefits there are some additional complexities to consider, including how to safely integrate new data sources or test out changes to existing pipelines. In order to address these challenges the team at Treeverse created LakeFS to introduce version control capabilities to your storage layer. In this episode Einat Orr and Oz Katz explain how they implemented branching and merging capabilities for object storage, best practices for how to use versioning primitives to introduce changes to your data lake, how LakeFS is architected, and how you can start using it for your own data platform.",2020-11-03T00:47:03Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Proven Patterns For Building Successful Data Teams - Episode 162,https://www.dataengineeringpodcast.com/data-teams-book-episode-162/#utm_source=rss&utm_medium=rss,"Building data products are complicated by the fact that there are so many different stakeholders with competing goals and priorities. It is also challenging because of the number of roles and capabilities that are necessary to go from idea to delivery. Different organizations have tried a multitude of organizational strategies to improve the success rate of these data teams with varying levels of success. In this episode Jesse Anderson shares the lessons that he has learned while working with dozens of businesses across industries to determine the team structures and communication styles that have generated the best results. If you are struggling to deliver value from big data, or just starting down the path of building the organizational capacity to turn raw information into valuable products then this is a conversation that you don't want to miss.",2020-12-07T23:45:54Z,#datascience #ds #podcast
DEV Community,https://dev.to,Guide to Advanced CSS Selectors - Part Two,https://dev.to/5t3ph/guide-to-advanced-css-selectors-part-two-1300,"This is episode #25 in a series examining modern CSS solutions to problems I've been solving over the last 13+ years of being a frontend developer. Visit ModernCSS.dev to view the whole series and additional resources.Continuing from part one, this episode will focus on the advanced CSS selectors categorized as pseudo classes and pseudo elements and practical applications for each. We'll especially try to make sense of the syntax for nth-child.      Part Two (this article):Pseudo classes - ex: :checked / :focusPseudo elements - ex: ::before / ::afterAdditional resources      Part One:CSS Specificity and the CascadeUniversal selector - *Attribute selector - [attribute]Child combinator - &gt;General sibling combinator - ~Adjacent sibling combinator - +      Pseudo ClassesThis is the largest category, and also the most context-dependent.Pseudo classes are keywords that are applied when they match the selected state or context of an element.These vastly increase the capabilities of CSS and enable functionality that in the past was often erroneously relegated to JavaScript.Some selectors are stateful::focus:hover:visited:target:checkedWhile others attach to the order of elements::nth-child() / :nth-of-type():first-child / :first-of-type:last-child / :last-of-type:only-child / :only-of-typeThen there's the highly useful pseudo class :not(), as well as the :root pseudo class that has come to the forefront as CSS custom properties (variables) have risen in support.Review the MDN docs for the full list of available pseudo classes including available options specific to form inputs, video captions, and language, as well as some currently in progress towards implementation.      Practical Applications For Pseudo Classes      Zebra Striped Table RowsThe nth series of selectors has endless applications. Use them for anything you want to occur in any sort of repetitive pattern using a 1-based index.An excellent candidate for this is zebra striping of table rows.The nth-child selector can use an integer, be defined using functional notation, or the keywords of even or odd. We'll use the keywords to most efficiently produce our zebra striping rule:tbody tr:nth-child(odd) {  background-color: #ddd;}    Enter fullscreen mode        Exit fullscreen mode    Which will produce the following:      Apply Alternating Background ColorsUsing the functional notation for nth-child we can alternate through a series of background colors and ensure the pattern repeats in the defined order no matter how many elements exist. So a pattern of rebeccapurple, darkcyan, lightskyblue will repeat in that order. The way this works is to define the total number of colors - 3 - alongside n, which represents all positive numbers starting from 0, and which will be multiplied by the associated number, in this case, 3. So by itself, 3n would select the 3rd item, the 6th item, the 9th item, and so on. It would not select the first in the list because 3 x 0 = 0.For our repetitive pattern, we want the first item selected to be the first color in our palette.So, we extend the notation to be 3n + (integer corresponding to color order), therefore our first color rule becomes:li:nth-child(3n + 1) {  background-color: rebeccapurple;}    Enter fullscreen mode        Exit fullscreen mode    And this selects every third element, starting with the first one:Essentially, that + [number] shifts the starting index.To complete our pattern we define the following rules, incrementing the added number to be the order of the color in the repeating pattern:li:nth-child(3n + 2) {  background-color: darkcyan;}li:nth-child(3n + 3) {  background-color: lightskyblue;}    Enter fullscreen mode        Exit fullscreen mode    Producing the following completed result:For an extended guide to nth-child checkout the recipe reference from CSS-Tricks and the nth-child tester to explore constructing these selectors.Enjoying this guide and finding some useful solutions? I'd appreciate a coffee to help keep me motivated to create more resources! I also offer front-end reviews and mentoring sessions, choose an option to support me.      Removing Extra Spacing From Child ElementsIf you are not using a reset that starts all elements with zero margin, you may encounter typography elements creating extra unwanted margins that unbalance spacing within a visual container.Pseudo classes do not always need to be directly attached to an element, meaning we can do the following rule which attaches to any element that happens to be the last child of any parent and ensures it has no margin-bottom::last-child {  margin-bottom: 0;}    Enter fullscreen mode        Exit fullscreen mode          Excluding Elements From SelectorsCareful application of :not() is very useful for excluding elements from being selected.We explored a few uses of :not() within the attribute selector section, notably a:not([class]) for targeting links that have no other classes applied.:not() is excellent for use in utility frameworks or design systems to increase specificity on classes that have the potential to be applied to anything and for which there are known issues on certain combinations.An extended example of excluding it for classes with links is when you are adjusting contrast for text, possibly in a dark mode context, and want to apply the contrast adjustment to text links as well:/* Non dark mode application */a:not([class]) {  color: blue;}/* Update text color for dark mode */.dark-mode {  color: #fff;}/* Extend the color update to links via `inherit` */.dark-mode a:not([class]) {  color: inherit;}    Enter fullscreen mode        Exit fullscreen mode    You can also chain :not() selectors, so perhaps you want to create a rule for form field inputs, but not of certain types:input:not([type=""hidden""]):not([type=""radio""]):not([type=""checkbox""])    Enter fullscreen mode        Exit fullscreen mode    It's also possible to include other pseudo selectors within :not() such as to exclude the :disabled state for buttons:button:not(:disabled)    Enter fullscreen mode        Exit fullscreen mode    This allows you to have tidier rules by defining a reset of button styles first, then only apply coloration styles, borders, etc to non-disabled buttons instead of removing those styles for button:disabled later.      Style the Current Anchor Linked ElementWhen an element is the target of an anchor link (document fragment identifier) - https://url.com/#anchor-here - you can style it using :target. I rely on anchor links for my project 11ty.Rocks, such as can be seen visiting this link to the CSS Houdini Worklet Generator.The :target pseudo class should be placed on the element that contains the id attribute. However, you can chain it with descendent selectors to affect nested elements - maybe you want to give article:target h2 a larger size or something like that.Leveraging :target I add a little extra message by combining with the pseudo element ::before to help indicate to the visitor which item they were provided a link for, which appears as follows (""It's me you're looking for..."")Bonus tip: ensure a bit of spacing prior to the top of the element on scroll by using scroll-margin-top: 2em; (or another value of your choosing). This should be considered a progressive enhancement, be sure to review browser support for scroll-margin-top.      Visually Indicate Visited Archive LinksThe :visited pseduo class is very unique because of the potential to be exploited in terms of user's privacy. To resolve this, browser makers have limited which CSS styles are allowed to be applied using :visited.Una Kravets has a much more in-depth reference exploring how to create useful :visited styles, but here's the reduced version which I have in use for visitors of Style Stage to track which styles they have already viewed.A key gotcha is that styles applied via :visited will always use the parent's alpha channel - meaning, you cannot use rgba to go from invisible to visible, you must change the whole color value.So, to hide the initial state, you need to be able to use a solid color, such as the page background color.Additionally, for accessibility, it may not be desirable for the pseudo element content to be read out if it's an icon or emoji since we cannot supply an accessible name for content values. There is inconsistencies between assistive technology in whether pseudo element content is read, so we can try to ensure it's ignored with the use of aria-hidden=""true"".Our first step then is to add a span within links and that is what we will ultimately apply the :visited stylings to:&lt;a href=""#""&gt;Article Title &lt;span aria-hidden=""true""&gt;&lt;/span&gt;&lt;/a&gt;    Enter fullscreen mode        Exit fullscreen mode    The default styling (non-visited) adds the pseudo element, and makes the color the same as the page background to hide it visually:a span[aria-hidden]::after {  content: ""✔"";  color: var(--color-background); }    Enter fullscreen mode        Exit fullscreen mode    Then, when the link has been visited, we update the color to make it visible:a:visited span[aria-hidden]::after {  color: var(--color-primary); }    Enter fullscreen mode        Exit fullscreen mode          Advanced Interactions With :focus-withinAn up and coming pseudo class is :focus-within for which a polyfill is available, but otherwise it should be used with caution or as a progressive enhancement.The :focus-within pseudo class as described by MDN docs:The :focus-within CSS pseudo-class represents an element that has received focus or contains an element that has received focus. In other words, it represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus.For a practical way to use :focus-within review the tutorial for a CSS-Only Accessible Dropdown Navigation Menu.      Pseudo ElementsPseudo elements allow you to style a specific part of the selected element. They vary quite widely in application, with the (currently) best supported ones being the following:::after::before::first-letter::first-line::selection      Practical Applications For Pseudo Elements      Extra Visual Elements For Styling BenefitsThe ::before and ::after pseudo elements create an additional element that visually appears to be part of the DOM, but is not part of the real HTML DOM. They are as fully style-able as any real DOM element.I have used these elements for all sorts of embellishments. Since they act like real elements, they are computed as child elements when using flexbox or CSS grid layout, which has greatly increased their functionality in my toolbox.A few key concepts for using ::before and ::after:Requires the content property before being made visible, but this property can be set to a blank string - content: """";Critical text content should not be included in the content value since it's inconsistently accessed by assistive technologyUnless positioned otherwise, ::before will display prior to the main element content, and ::after will display after it.Here's a demo of the default behavior of these with just a little bit of styling applied:Notice they act like inline elements by default, and follow the wrapping behavior as well for longer content:And here's with the singular adjustment to add display: flex to the paragraph:And here's with swapping that to display: grid:The ::before and ::after elements are quick ways to add simple, consistent typography flourishes, a few of which can be seen in this CodePen demo:Did you catch the trick in the emoji one?We can retrieve the value of any attribute on the element to use in the content property via the attr() function:/*&lt;h2 class=""emoji"" data-emoji=""😍""&gt;*/.emoji::before {  content: attr(data-emoji);}    Enter fullscreen mode        Exit fullscreen mode    Here's a gist of how to display element id and class values in pseudo elements using this same idea. You can also share the tweet with this tip &gt;      Emphasize an Article LeadThe ""lede"" (pronounced ""lead"") is a newsprint term for the first paragraph within a news article and is intended to be a summary of the key point of the article (you may have heard the phrase ""Don't bury the lede!"").We can combine the pseudo class of :first-of-type with the pseudo element of :first-line to emphasize the first line of paragraph copy. Interestingly, this is dynamic and will change as the viewport size changes.article p:first-of-type:first-line {  font-weight: bold;  font-size: 1.1em;  color: darkcyan;}    Enter fullscreen mode        Exit fullscreen mode    Producing the following inherently responsive result:      Ensure Accessible Contrast For Text SelectionA frequently missed style is for text selection, despite it being an interaction many of us engage in multiple times a day.While browsers try to handle styling this event, it is possible to lose contrast. I encountered this when styling ModernCSS.dev due to the darker theme in use.To resolve, we can use the ::selection pseudo element to supply a custom text color and background color:::selection {  background: yellow;  color: black;}    Enter fullscreen mode        Exit fullscreen mode          Custom List Bullet StylesAn up and coming pseudo element specifically for styling list bullets is ::marker.For the browser support link and an example of how to use it, check out the section in my tutorial on Totally Custom List Styles.      Discover More Pseudo Element Uses on ModernCSS.devHow many other examples can you find by inspecting ModernCSS.dev? I'd love to hear what you find, what you've learned, and any other feedback! Reach out to me on Twitter or tag @5t3ph when you share this or other articles from ModernCSS.dev!      Additional ResourcesMDN Docs on CSS selectorsSelectors Explained - enter any selector to learn what is being affectedCSS specificity calculator by Polypane - discover the level of specificity of a selectorCSS Diner - a game to test your ability to create CSS selectorsStyle Stage - a great place to practice your new selector knowledge is my other project, Style Stage, which is a modern CSS showcase styled by community contributions. A limitation is the inability to add new classes or IDs, so you will need to exercise your selector abilities to successfully create your stylesheet submission!Head back to part one to learn about five other categories of advanced CSS selectors. And, if you learned something from this guide and you're able, I'd appreciate a coffee to help me bring you more tutorials and resources!",2020-12-30T14:38:19Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,"Advent of 2020, Day 29 – Performance tuning for Apache Spark",http://feedproxy.google.com/~r/RBloggers/~3/htT7yo7HCCw/,"Series of Azure Databricks posts: Dec 01: What is Azure Databricks Dec 02: How to get started with Azure Databricks Dec 03: Getting to know the workspace and Azure Databricks platform Dec 04: Creating your first Azure Databricks cluster Dec 05: Understanding Azure Databricks cluster architecture, workers,…Read more ›The post Advent of 2020, Day 29 – Performance tuning for Apache Spark first appeared on R-bloggers.",2020-12-29T04:01:00Z,#datascience #tutorials
DEV Community,https://dev.to,Grocery Inventory Tracker,https://dev.to/thinkc/grocery-inventory-tracker-1il,"This is a Single Page Application (SPA) built using React and context api. In this tutorial you will be able to build a  Grocery Inventory Store that tracks expiration and quantity. We will be able to create, read, update and delete items created.      SetupWe will use npx create react app , this helps us to quickly setup our development environment . We will need to have Node version greater or equal to 8.10 and our npm should be greater than or equal to 5.6 installed on our machine.      InstallationI will be using vscode as my code editor, but we are free to use any code editor.To start, we open the command line and cd to where we want to have our app installed, and run code below:npx create-react-app grocery-inventory-tracker    Enter fullscreen mode        Exit fullscreen mode    This creates a boiler plate we can start using for our app. To start the app, we run npm start and it opens a browser at http://localhost:3000/ if no app is already using the port 3000.For this project we will be using react state and  react context api. React Context Api helps us to create a global variable that can be passed around in our react App. Usually data is passed down from parent to child in a typical react app as props . You can read more on React Context API .      Folder StructureWe create components subfolder in src folder . In the components folder we create the following files, AddGrocery.js, EditGrocery.js, GroceryItem.js, GroceryList.js, Top.js .We also create two other files in the root folder. These are data.js that will host all our grocery objects and a context.js .      DependenciesFor this app we will require and install the following dependencies : (react-router-dom uuid moment react-datepicker)npm install --save react-router-dom uuid moment react-datepicker    Enter fullscreen mode        Exit fullscreen mode    react-router-dom - This helps with client-side routing in a Single Page App that allows for navigation without page refreshing.uuid - They are 128-Bits unique numbers and we will use this to generate unique id's for our application.moment - We will use this to display data/time in friendly and easy way.react-datepicker - We will use this to display dates using calendar dialog.      index.htmlIn our index.html file we will have two cdn links for fontawesome icons and we use bootstrap for styling and rename the title tag as below. Notice that we have a div with id root . This is where our app will be displayed.  &lt;!DOCTYPE html&gt;&lt;html lang=""en""&gt;&lt;head&gt;  &lt;meta charset=""utf-8"" /&gt;  &lt;link rel=""icon"" href=""%PUBLIC_URL%/favicon.ico"" /&gt;  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1"" /&gt;  &lt;meta name=""theme-color"" content=""#000000"" /&gt;  &lt;meta name=""description"" content=""Web site created using create-react-app"" /&gt;  &lt;!--font awesome--&gt;  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js""&gt;&lt;/script&gt;  &lt;!-- bootstrap --&gt;  &lt;link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css""    integrity=""sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"" crossorigin=""anonymous""&gt;  &lt;title&gt;Grocery Inventory Tracking App&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;  &lt;div id=""root""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;    Enter fullscreen mode        Exit fullscreen mode          Data.jsWe now create an array with objects called groceriesDB and we export it because we will be using it in the context.js file.The array contains objects that represent the Groceries we want to track.export const groceriesDB = [    {        image: 'https://images.unsplash.com/photo-1513791053024-3b50799fdd7b?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjF9',        name: 'tomato',        qty: 10,        expiration: Date.now(),        category: 'vegetable',        id: 0.12654367    },    {        image: 'https://images.unsplash.com/photo-1589927986089-35812388d1f4?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjF9',        name: 'carrot',        qty: 5,        expiration: 'Thu Jul 20 2020 12:55:58 GMT+0100 (West Africa Standard Time)',        category: 'vegetable',        id: 0.12656547    },    {        image: 'https://images.unsplash.com/photo-1589469224608-c84d02c71b94?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjF9',        name: 'lettuce',        qty: 20,        expiration: 'Thu Jul 30 2020 12:55:58 GMT+0100 (West Africa Standard Time)',        category: 'vegetable',        id: 0.12656767    },    {        image: 'https://images.unsplash.com/photo-1531191357516-0aa0289ab6c9?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjF9',        name: 'maize',        qty: 20,        expiration: Date.now(),        category: 'grain',        id: 0.12650915    },]    Enter fullscreen mode        Exit fullscreen mode          index.cssbody {  margin: 0;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',    sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}#banner img{  width:85%;    height:300px;    float: left;    border-radius: 8px;    object-fit: cover;    margin-right: 20px;    margin-left: 20px;    margin-bottom: 20px;    margin-top: 30px;}#tomato{  width: 200px;  height: 120px;}h5{  /* color: #E83F6F; */  color: #FFBF00;}a, a:hover, a:focus, a:active{  text-decoration: none;  color:inherit;}    Enter fullscreen mode        Exit fullscreen mode          Context.jsNext we move to the context.js file and we create a class component and name it GroceryProvider . At the top, we import createContext and uuid and data.js and then create a context object and name it GroceryContext. This object has two components: Provider and Consumer . Provder provides all the data for our application, we will set it at the top of our application so that all other component of the application have access to it.To use the data that the Provider provides we use the Consumer and we will be able to have access to the data from anywhere in our application.We then create a state object in the GroceryProvider class with property groceries and set the value to be groceriesDB that we imported from data.js , and set property name, qty, category, id, image to an empty string. We set expiration to a new Date() value . We also create a property updateEdit to an empty array. This will be used later in the app.The GroceryProvider then returns a GroceyContext.Provider . Since the GroceryContext.Provider will be at the top of our application we will also return the children i.e {this.props.children} . The provider returns a value which is an object. In our own case this.state as seen below.Lastly, we create a variable GroceryConsumer which is equal to GroceryContext.Consumer and we export both GroceryProvider and GroceryConsumer .We also create an object headerObj, this will be use to dynamcally display text and image for header of our application. We will also create addGrocery, removeGrocery, editGrocery, onSaveEdit, convertDate changeValue  functions. These will only log to the console for now and add the code later, we then  add them  in our GroceryContext.Provider. At this point when we try to console.log the value of this.state.groceries we get no output since the Provider is not set at the top of our application. We do that next in the index.js file.import React, { Component, createContext } from 'react';import { groceriesDB } from './data';import { v4 } from 'uuid';const GroceryContext = createContext();class GroceryProvider extends Component {    state = {        groceries: groceriesDB,        id: '',        name: '',        qty: '',        expiration: new Date(),        category: '',        image: '',        updateEdit: [],        searchCategory: ''    }   //dynamically displays values for the header of the application      headerObj = {        title: 'Groceries Inventory | Tracker',        text: 'Total number of grocery items',        img: 'https://images.unsplash.com/photo-1542838132-92c53300491e?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjF9'    }      convertDate = (str) =&gt; {        lconsole.log('from convertDate')    };    addGrocery = (grocery) =&gt; {        console.log('add grocery function')    }    removeGrocery = (id) =&gt; {        console.log('remove grocery function')    }    editGrocery = (id) =&gt; {        console.log('edit grocery function')    }    onSaveEdit = (id) =&gt; {        console.log('on save edit function')    }render() {        console.log(this.state.groceries)        return (            &lt;GroceryContext.Provider value={{                ...this.state,                headerObj: this.headerObj,                addGrocery: this.addGrocery,                removeGrocery: this.removeGrocery,                editGrocery: this.editGrocery,                onSaveEdit: this.onSaveEdit            }}&gt;                {this.props.children}            &lt;/GroceryContext.Provider&gt;        )    }}const GroceryConsumer = GroceryContext.Consumer;export { GroceryProvider, GroceryConsumer }     Enter fullscreen mode        Exit fullscreen mode          index.jsNow in index.js we import React from react,  BrowserRouter as Router from react-router-dom , GroceryProvider from context.js and App from App.js .So that the entire app has access to the context api , we wrap the Router and App component inside the GroceryProvider.import React from 'react';import ReactDOM from 'react-dom';import { BrowserRouter as Router } from 'react-router-dom';import { GroceryProvider } from './context';import App from './App';import * as serviceWorker from './serviceWorker';ReactDOM.render(  &lt;GroceryProvider&gt;    &lt;React.StrictMode&gt;      &lt;Router&gt;        &lt;App /&gt;      &lt;/Router&gt;    &lt;/React.StrictMode&gt;  &lt;/GroceryProvider&gt;  ,  document.getElementById('root'));    Enter fullscreen mode        Exit fullscreen mode    Now we can test our console.log in context.js file and it should return the grocey data.      App.jsNext, in our App.js file we create a class base component and import React, switch, route, Top, GroceryList, AddGrocery, EditGrocery, as seen below. react-router-dom , it comes with:Browser router - holds all info about our routeroute - this will display specific routesLink - serves as an anchor tagInside React.Fragment is followed by the Top component which will be displayed at the top of our application . We are using React.Fragment to mimic HTML to serve as a parent div and we export the App.js component. We will then add 3 routes, for Home (/) which will be the GroceryList, routes for adding new Groceries (/add) which is the AddGrocery and edit route (/edit/:id) which is the EditGrocery . We are have :id so as to edit specific Grocery.Next we create the Top component.import React, { Component } from 'react';import { Switch, Route } from 'react-router-dom'import Navbar from './components/Navbar';import GroceryList from './components/GroceryList';import AddGrocery from './components/AddGrocery';import EditGrocery from './components/EditGrocery';import './App.css';class App extends Component {  render() {    return (      &lt;React.Fragment&gt;        &lt;Top /&gt;        &lt;Switch&gt;          &lt;Route exact path=""/"" component={GroceryList} /&gt;          &lt;Route path=""/add"" component={AddGrocery} /&gt;          &lt;Route path=""/edit/:id"" component={EditGrocery} /&gt;        &lt;/Switch&gt;      &lt;/React.Fragment&gt;    )  }}export default App;    Enter fullscreen mode        Exit fullscreen mode          Top.jsTop.js is our header component. We import React, GroceryConsumer so that we have access to all our data, useLocation, and Link . useLocation returns the current url, Link is like an anchor tag such as href and helps with navigation of our app.import React from 'react';import { GroceryConsumer } from '../context';import { useLocation, Link } from 'react-router-dom';function Top() {    let location = useLocation();    //console.log(location.pathname)    return (        &lt;div className=""container""&gt;            &lt;div className=""row""&gt;                &lt;div className=""col-md-8 col-lg-8"" id=""banner""&gt;                    &lt;GroceryConsumer&gt;                        {(value) =&gt; {                            return (                                &lt;img src={value.headerObj.img} alt=""groceries"" /&gt;                            )                        }}                    &lt;/GroceryConsumer&gt;                &lt;/div&gt;                &lt;div className=""col-md-4 col-lg-4""&gt;                    &lt;GroceryConsumer&gt;                        {(value) =&gt; {                            return (                                &lt;div&gt;                                    &lt;h1 className=""mt-3""&gt;                                        {value.headerObj.title}                                    &lt;/h1&gt;                                    &lt;h5&gt;&lt;i&gt;{value.headerObj.text} - {value.groceries.length}&lt;/i&gt;&lt;/h5&gt;                                    &lt;button className=""btn btn-lg btn-success mt-5""&gt;                                        {location.pathname === '/' ? &lt;Link to=""/add""&gt;Add Grocery&lt;/Link&gt; : &lt;Link to=""/""&gt;Home&lt;/Link&gt;}                                    &lt;/button&gt;                                &lt;/div&gt;                            )                        }}                    &lt;/GroceryConsumer&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    )}export default Top    Enter fullscreen mode        Exit fullscreen mode          GroceryListFirst we import react,  GroceryConsumer, GroceryItem . Then return a container div with tables. This will where our grocery items will be added.Since we have access to the groceries array from GroceryConsumer, we loop on the array using the map function which returns a GroceryItem with key and grocery . These are passed as props and will be used in the GroceryItem component . We are also returning  a key because react requires all items to have unique identification.At this point we will an error because our GroceryItem component is not returning anything yet. Next we work on the GroceryItem.import React, { Component } from 'react';import { GroceryConsumer } from '../context';import GroceryItem from './GroceryItem'export default class GroceryList extends Component {    render() {        return (            &lt;React.Fragment&gt;                &lt;div className=""container""&gt;                    &lt;div className=""row""&gt;                        &lt;div className=""col-md-12 col-lg-12""&gt;                            &lt;table className=""table table-striped""&gt;                                &lt;thead&gt;                                    &lt;tr&gt;                                        &lt;th scope=""col""&gt;Name&lt;/th&gt;                                        &lt;th scope=""col""&gt;Qty&lt;/th&gt;                                        &lt;th scope=""col""&gt;Exp&lt;/th&gt;                                        &lt;th scope=""col""&gt;Category&lt;/th&gt;                                        &lt;th scope=""col""&gt;Edit&lt;/th&gt;                                        &lt;th scope=""col""&gt;Delete&lt;/th&gt;                                    &lt;/tr&gt;                                &lt;/thead&gt;                                &lt;tbody&gt;                                    &lt;GroceryConsumer&gt;                                        {(value) =&gt; {                                            console.log(value)                                            return value.groceries.map(grocery =&gt; {                                                return &lt;GroceryItem key={grocery.id} grocery={grocery} /&gt;                                            })                                        }}                                    &lt;/GroceryConsumer&gt;                                &lt;/tbody&gt;                            &lt;/table&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/React.Fragment&gt;        )    }}    Enter fullscreen mode        Exit fullscreen mode          GroceryItemIn GroceryItem compoent we import React, GroceryConsumer, moment from moment (we installed this earlier), and Link from react-router-dom . Next, we create convertDate function that converts the date string for expiration to timestamp and we use the moment funtion to convert to friendly format e.g. 10 hours ago. After, the render method we destructure id, name, image, qty, expiration, category that was passed as props from GroceryList component. We are also using GroceryConsumer here because will need access to two functions editGrocery and removeGrocery. These two functions are not created yet, but we will create them later in context.js. Next, we then pass in the values of name, image, qty, category . Now when we run npm start our application should have all the items displayed on our frontpage. Next we work on the AddGrocery component.import React, { Component } from 'react';import { GroceryConsumer } from '../context';import moment from 'moment';import { Link } from 'react-router-dom';export default class GroceryItem extends Component {//convert date string    convertDate = (str) =&gt; {        let date = new Date(str),            mnth = (""0"" + (date.getMonth() + 1)).slice(-2),            day = (""0"" + date.getDate()).slice(-2);        let covertedDate = [date.getFullYear(), mnth, day].join(""-"");        return moment(covertedDate, 'YYYYMMDD').fromNow();    };    render() {        const { id, name, image, qty, expiration, category } = this.props.grocery;        console.log(this.props.grocery)        return (            &lt;GroceryConsumer&gt;                {(value) =&gt; (                    &lt;tr&gt;                        &lt;th scope=""row""&gt;&lt;img src={image} className=""img-fluid rounded"" id=""tomato"" alt={name} /&gt;&lt;/th&gt;                        &lt;td&gt;{name}&lt;/td&gt;                        &lt;td&gt;{qty}&lt;/td&gt;                        {/* &lt;td&gt;{grocery.expiration}&lt;/td&gt; */}                        &lt;td&gt;{this.convertDate(expiration)}&lt;/td&gt;                        &lt;td&gt;{category}&lt;/td&gt;                        &lt;td&gt;&lt;Link to={""/edit/"" + id}&gt;&lt;span onClick={() =&gt; { value.editGrocery(id) }} &gt;&lt;i className=""fas fa-pen""  &gt;&lt;/i&gt;&lt;/span&gt;&lt;/Link&gt;&lt;/td&gt;                        &lt;td &gt;&lt;span onClick={() =&gt; { value.removeGrocery(id) }} &gt;&lt;i                            className=""fas fa-trash""&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;                    &lt;/tr&gt;                )}            &lt;/GroceryConsumer&gt;        )    }}    Enter fullscreen mode        Exit fullscreen mode          AddGroceryIn AddGrocery component, we go ahead and import React, GroceryConsumer, DatePicker (we installed this as a dependancy before).We then create AddGrocery class component and export it. Next we create a state object with name, image, category, expiration and qty. After, this we create functions that will handle the state changes for each state properties.After the render method we return div container with the AddGrocery form.Notice we are using the GroceryConsumer so that we have access to the addGrocery method, also note the use of the Datepicker for the date calendar. Next we look at the EditGrocery component.import React, { Component } from 'react';import { GroceryConsumer } from '../context';import DatePicker from ""react-datepicker"";import ""react-datepicker/dist/react-datepicker.css"";export default class AddGrocery extends Component {    state = {        name: '',        image: '',        category: '',        expiration: new Date(),        qty: ''    }    handleChangeName = (e) =&gt; {        this.setState({            name: e.target.value        })        console.log(this.state.name)    }    handleChangeImage = (e) =&gt; {        this.setState({            image: e.target.value        })    }    handleChangeCategory = (e) =&gt; {        this.setState({            category: e.target.value        })    }    handleChangeExpiration = (date) =&gt; {        this.setState({            expiration: date        })    }    handleChangeQty = (e) =&gt; {        this.setState({            qty: e.target.value        })    }    render() {        return (            &lt;div className=""container""&gt;                &lt;GroceryConsumer &gt;                    {(value) =&gt; {                        //console.log(value)                        //console.log(this.props)                        this.handleSubmit = (e) =&gt; {                            e.preventDefault();                            value.addGrocery(this.state)                            this.setState({                                name: '',                                image: '',                                qty: '',                                category: '',                                expiration: new Date()                            })                            this.props.history.push('/')                        }                        // value.convertDate(1595886543865)                        return &lt;form onSubmit={this.handleSubmit}&gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""Name"" &gt;Name&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={this.handleChangeName}                                    value={this.state.name}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""Image"" &gt;Image&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={this.handleChangeImage}                                    value={this.state.image}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;div className=""form-control""&gt;                                    &lt;label htmlFor=""Quantity"" &gt;Quantity&lt;/label&gt;                                    &lt;input type=""number""                                        onChange={this.handleChangeQty}                                        value={this.state.qty}                                        required                                    /&gt;                                &lt;/div&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;div className=""form-control""&gt;                                    &lt;label htmlFor=""ExpirationDate""&gt;Expiration&lt;/label&gt;                                    &lt;DatePicker selected={this.state.expiration} required onChange={this.handleChangeExpiration} /&gt;                                &lt;/div&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""Category"" &gt;Category&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={this.handleChangeCategory}                                    value={this.state.category}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group center""&gt;                                &lt;button type=""submit"" className=""btn btn-primary""&gt;Add&lt;/button&gt;                            &lt;/div&gt;                        &lt;/form&gt;                    }}                &lt;/GroceryConsumer&gt;            &lt;/div&gt;        )    }}    Enter fullscreen mode        Exit fullscreen mode          EditGroceyWe import React, Link, GroceryConsumer, DatePicker and create a class component called EditGrocery . After the render method we return a form element and the GroceryConsumer that gives us access to some methods defined in context.js and we export the class component.Next, we will go back to context.js where we complete the functions we created.import React, { Component } from 'react';import { Link } from 'react-router-dom';import { GroceryConsumer } from '../context';import DatePicker from ""react-datepicker"";import ""react-datepicker/dist/react-datepicker.css"";export default class EditGrocery extends Component {    render() {        return (            &lt;div className=""container""&gt;                &lt;GroceryConsumer &gt;                    {(value) =&gt; {                        return &lt;form &gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""Name"" &gt;Name&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={(e) =&gt; { value.changeValue(e, 'name') }}                                    value={value.name}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""Image"" &gt;Image&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={(e) =&gt; { value.changeValue(e, 'image') }}                                    value={value.image}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;div className=""form-control""&gt;                                    &lt;label htmlFor=""Quantity"" &gt;Quantity&lt;/label&gt;                                    &lt;input type=""text""                                        onChange={(e) =&gt; { value.changeValue(e, 'qty') }}                                        value={value.qty}                                        required                                    /&gt;                                &lt;/div&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;div className=""form-control""&gt;                                    &lt;label htmlFor=""ExpirationDate""&gt;Expiration&lt;/label&gt;                                    &lt;DatePicker selected={value.convertDate(value.expiration).selected}                                        required                                    /&gt;                                &lt;/div&gt;                            &lt;/div&gt;                            &lt;div className=""form-group""&gt;                                &lt;label htmlFor=""ChemicalName"" &gt;Category&lt;/label&gt;                                &lt;input type=""text""                                    className=""form-control""                                    onChange={(e) =&gt; { value.changeValue(e, 'category') }}                                    value={value.category}                                    required                                /&gt;                            &lt;/div&gt;                            &lt;div className=""form-group center""&gt;                                &lt;button onClick={() =&gt; { value.onSaveEdit(value.id) }} type=""submit"" className=""btn btn-primary""&gt;&lt;Link to=""/""&gt;Save&lt;/Link&gt;&lt;/button&gt;                            &lt;/div&gt;                        &lt;/form&gt;                    }}                &lt;/GroceryConsumer&gt;            &lt;/div&gt;        )    }}    Enter fullscreen mode        Exit fullscreen mode          Context.js continued      addGrceryThe addGrocery method adds new Grocery item to the inventory. The uuid we imported earlier helps in generating unique id. We create a variable groceries , using the spread operator we add the exiting grocery items in the array and add the new grocery item. We then use setState to update the new object state with the new added grocery item.addGrocery = (grocery) =&gt; {        //let tempGroceries = [...this.state.groceries];        grocery.id = v4();        let groceries = [...this.state.groceries, grocery]        this.setState(() =&gt; {            return { groceries: groceries }        })    }    Enter fullscreen mode        Exit fullscreen mode          getGroceryThe getGrocery method returns a grocery item that is clicked . It does this by comparing the grocery item id that equals to the grocery id that is clicked using the find method.//returns grocery with id that is clicked    getGrocery = (id) =&gt; {        const grocery = this.state.groceries.find(grocery =&gt; grocery.id === id)        return grocery;    }    Enter fullscreen mode        Exit fullscreen mode          removeGroceryThe removeGrocery method, removes grocery item that is clicked.First we create a temporary array with all groceries. Then using the filter method on the temp array, it removes grocery id that is clicked.  removeGrocery = (id) =&gt; {        let tempGroceries = [...this.state.groceries];        tempGroceries = tempGroceries.filter(grocery =&gt; grocery.id !== id);        //const index = groceriesDB.indexOf(this.getGrocery(id))        this.setState(() =&gt; {            return {                groceries: [...tempGroceries]            }        })    }    Enter fullscreen mode        Exit fullscreen mode          changeValueThis method checks the input value if equals to the string e.g. name and updates the the state properties.We created the variable tempArr to get the properties and values of the grocery item to be edited as this will be used later in the saveEdit function.    changeValue = (e, value1) =&gt; {        if (value1 === 'name') {            this.state.name = e.target.value;        }        if (value1 === 'image') {            this.state.image = e.target.value;        }        if (value1 === 'expiration') {            this.state.expiration = e.target.value;        }        if (value1 === 'category') {            this.state.category = e.target.value;        }        if (value1 === 'qty') {            this.state.qty = e.target.value;        }        if (value1 === 'searchCategory') {            this.state.searchCategory = e.target.value;        }        const tempArr = [            this.state.id,            this.state.name,            this.state.image,            this.state.expiration,            this.state.qty,            this.state.category        ]        console.log(tempArr)        this.setState({            updateEdit: tempArr        })        console.log(this.state)    }    Enter fullscreen mode        Exit fullscreen mode          editGroceryThis function is called when the edit icon is clicked in the GroceryItem component. First we  pass in an id as a parameter and create a temporary groceries array, then we get the index of the grocery item clicked and store the index number in the index variable;  and we now assigned the clicked grocery item object to selectedGrocery. Using setState, we update each of the state properties e.g. id, name.editGrocery = (id) =&gt; {        let tempGroceries = this.state.groceries;        const index = tempGroceries.indexOf(this.getGrocery(id));        const selectedGrocery = tempGroceries[index];        this.setState({            id: selectedGrocery['id'],            name: selectedGrocery['name'],            qty: selectedGrocery['qty'],            expiration: selectedGrocery['expiration'],            image: selectedGrocery['image'],            category: selectedGrocery['category']        })    }    Enter fullscreen mode        Exit fullscreen mode          onEditSaveThis function saves the selected grocery item that is changed.If id is true, we create a groceries array as and assign it to a vairable groceriesArr.Get the index of a selected grocery item and assign it to variable indexCreate a variable record, which is the selected grocery item.Update property name of selected grocery item.Update state with setState and reset the input values to be empty. onSaveEdit = (id) =&gt; {        if (id !== null) {            const groceriesArr = this.state.groceries;             const index = groceriesArr.indexOf(this.getGrocery(id));            const record = groceriesArr[index];            //update selected property name            record['name'] = this.state.updateEdit[1];            record['image'] = this.state.updateEdit[2];            record['expiration'] = this.state.updateEdit[3];            record['qty'] = this.state.updateEdit[4];            record['category'] = this.state.updateEdit[5];            this.setState({                groceries: [...this.state.groceries],                id: '', name: '', image: '', expiration: '', qty: '', category: ''            })            console.log(this.state)            console.log(this.state.updateEdit)        }    }    Enter fullscreen mode        Exit fullscreen mode    Running our application, we can now add a new grocery item, edit, and delete grocery item.      ConclusionCongratulation, we have succesfully created a Grocery Inventory Tracker, that tracks expiration and quantity.This app is built using react state , next we will look at building same app using react hook.Cover photo by nrd on Unsplash",2020-12-30T14:30:12Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Vendée globe – Exploratory data analysis,http://feedproxy.google.com/~r/RBloggers/~3/8afLvJDQhIg/,"While looking at Vendée Globe data, I had the feeling of some patterns to explain why are some skippers laggards and why some others are always in the top positions. I wondered what kind of graph could be used to help confirming or disproving such fe...The post Vendée globe - Exploratory data analysis first appeared on R-bloggers.",2020-12-27T18:00:00Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,The covid slump,https://www.economist.com/graphic-detail/2020/10/09/the-covid-slump,Digital finance on the march • The Swedish exception • Distrusted politicians • Nagorno-Karabakh,2020-10-09T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,"As the northern hemisphere gets colder, covid-19 deaths are rising rapidly",https://www.economist.com/graphic-detail/2020/11/09/as-the-northern-hemisphere-gets-colder-covid-19-deaths-are-rising-rapidly,How much weather alone is responsible is unclear,2020-11-09T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,The US 2020 election results,https://www.economist.com/graphic-detail/2020/11/03/the-us-2020-election-results,"The Economist’s breakdown of the votes for the president, Senate and House of Representatives",2020-11-03T00:00:00Z,#dataviz
FlowingData,https://flowingdata.com,Reconstructing the killing of Breonna Taylor,https://flowingdata.com/2020/12/28/reconstructing-the-killing-of-breonna-taylor/,"The New York Times reconstructed the night. Based on a collection of court&#8230;Tags: Breonna Taylor, New York Times, reconstruction",2020-12-28T18:18:10Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,Why Do We Seek Comfort in the Familiar?,https://omny.fm/shows/freakonomics-radio/why-do-we-seek-comfort-in-the-familiar,"In this episode of No Stupid Questions — a Freakonomics Radio Network show launched earlier this year — Stephen Dubner and Angela Duckworth debate why we watch, read, and eat familiar things during a crisis, and if it might in fact be better to try new things instead. Also: is a little knowledge truly as dangerous as they say? ",2020-12-24T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,"420. Which Jobs Will Come Back, and When?",https://omny.fm/shows/freakonomics-radio/which-jobs-will-come-back-and-when,"Covid-19 is the biggest job killer in a century. As the lockdown eases, what does re-employment look like? Who will be first and who last? Which sectors will surge and which will disappear? Welcome to the Great Labor Reallocation of 2020.",2020-06-04T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,411. Is $2 Trillion the Right Medicine for a Sick Economy?,https://omny.fm/shows/freakonomics-radio/is-2-trillion-the-right-medicine-for-a-sick-econom,"Congress just passed the biggest aid package in modern history. We ask six former White House economic advisors and one U.S. Senator: Will it actually work? What are its best and worst features? Where does $2 trillion come from, and what are the long-term effects of all that government spending? ",2020-04-02T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,305. The Demonization of Gluten,https://omny.fm/shows/freakonomics-radio/the-demonization-of-gluten,Celiac disease is thought to affect roughly one percent of the population. The good news: it can be treated by quitting gluten. The bad news: many celiac patients haven't been diagnosed. The weird news: millions of people without celiac disease have quit gluten – which may be a big mistake.,2017-10-19T03:00:00Z,#economics #podcast
Squarespace / Engineering,https://engineering.squarespace.com/,Performance Tuning Postgres within our TLS Infrastructure ,https://engineering.squarespace.com/blog/2019/performance-tuning-postgres-within-our-tls-infrastructure,"At Squarespace, the Edge team manages the TLS infrastructure, which handles the life cycle of millions of SSL certificates used by our customers. This makes us one of the largest users of Let’s Encrypt, a free, automated, and open certificate authority (CA).",2019-08-16T15:10:51Z,#tech #engineering
Dr. Sebastian Raschka,https://sebastianraschka.com/,Numeric matrix manipulation,https://sebastianraschka.com/Articles/2014_matrix_cheatsheet.html,"At its core, this article is about a simple cheat sheet for basic operations on numeric matrices, which can be very useful if you working and experimenting with some of the most popular languages that are used for scientific computing, statistics, and data analysis.",2014-06-19T09:00:00Z,#tech #engineering
Stories by Pinterest Engineering on Medium,https://medium.com/@Pinterest_Engineering?source=rss-ef81ef829bcb------2,Scaling Cache Infrastructure at Pinterest,https://medium.com/pinterest-engineering/scaling-cache-infrastructure-at-pinterest-422d6d294ece?source=rss-ef81ef829bcb------2,NA,2020-12-10T21:22:02Z,#tech #engineering
Google Open Source Blog,http://opensource.googleblog.com/,Announcing the Atheris Python Fuzzer,http://www.blogger.com/feeds/8698702854482141883/posts/default/1556420616351417632,Announcing the Atheris Python Fuzzer,2020-12-04T09:00:19Z,#tech #engineering
Startups – TechCrunch,https://techcrunch.com,CommonGround raises $19M to rethink online communication,https://techcrunch.com/2020/12/29/commonground-funding/,"CommonGround, a startup developing technology for what its founders describe as &#8220;4D collaboration,&#8221; is announcing that it has raised $19 million in funding. This isn&#8217;t the first time Amir Bassan-Eskenazi and Ran Oz have launched a startup together — they also founded video networking company BigBand Networks, which won two technology-related Emmy Awards, went public [&#8230;]",2020-12-29T17:00:30Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,How to sterilise scalpels when no electricity is available,https://www.economist.com/science-and-technology/2020/11/26/how-to-sterilise-scalpels-when-no-electricity-is-available,Sunlight is the best disinfectant,2020-11-26T16:00:52Z,#tech #news
NA,NA,NA,NA,NA,NA,#tech #news
BBC News - Technology,https://www.bbc.co.uk/news/,Cyberpunk 2077: The story behind the video game,https://www.bbc.co.uk/news/technology-55252658,The creators of the highly anticipated title reveal their inspirations.,2020-12-10T06:17:45Z,#tech #news
