feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#289 Discovering exoplanets with Python,https://talkpython.fm/episodes/show/289/discovering-exoplanets-with-python,"When I saw the headline ""Machine learning algorithm confirms 50 new exoplanets in historic first"" I knew the Python angle of this story had to be told! And that's how this episode was born. Join David Armstrong and Jev Gamper as they tell us how they use Python and machine learning to discover not 1, but 50 new exoplanets in pre-existing Keplar satellite data.Links from the showJev Gamper on Twitter: @brutforcimagMachine learning algorithm confirms 50 new exoplanets in historic first article: techrepublic.comSponsorsBrilliantTalk Python Training",2020-11-09T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Bridging The Gap Between Machine Learning And Operations At Iguazio - Episode 174,https://www.dataengineeringpodcast.com/iguazio-machine-learning-operations-episode-174/#utm_source=rss&utm_medium=rss,"The process of building and deploying machine learning projects requires a staggering number of systems and stakeholders to work in concert. In this episode Yaron Haviv, co-founder of Iguazio, discusses the complexities inherent to the process, as well as how he has worked to democratize the technologies necessary to make machine learning operations maintainable.",2021-03-02T03:00:04Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,System Observability For The Cloud Native Era With Chronosphere - Episode 170,https://www.dataengineeringpodcast.com/chronosphere-metrics-observability-episode-170/#utm_source=rss&utm_medium=rss,"Collecting and processing metrics for monitoring use cases is an interesting data problem. It is eminently possible to generate millions or billions of data points per second, the information needs to be propagated to a central location, processed, and analyzed in timeframes on the order of milliseconds or single-digit seconds, and the consumers of the data need to be able to query the information quickly and flexibly. As the systems that we build continue to grow in scale and complexity the need for reliable and manageable monitoring platforms increases proportionately. In this episode Rob Skillington, CTO of Chronosphere, shares his experiences building metrics systems that provide observability to companies that are operating at extreme scale. He describes how the M3DB storage engine is designed to manage the pressures of a critical system component, the inherent complexities of working with telemetry data, and the motivating factors that are contributing to the growing need for flexibility in querying the collected metrics. This is a fascinating conversation about an area of data management that is often taken for granted.",2021-02-02T02:59:59Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,"#283 Web scraping, the 2020 edition",https://talkpython.fm/episodes/show/283/web-scraping-the-2020-edition,"Web scraping is pulling the HTML of a website down and parsing useful data out of it. The use-cases for this type of functionality are endless. Have a bunch of data on governmental sites that are only listed online in HTML without a download? There's an API for that! Do you want to keep abreast of what your competitors are featuring on their site? There's an API for that. Need alerts for changes on a website, for example enrollment is now open at your college and you want to be first to get in and avoid the 8am Monday morning course slot? There's an API for that. That API is screen scraping and Attila Tóth from ScrapingHub is here to tell us all about it.Links from the showAttila Tóth on LinkedIn: linkedin.comScrapy project: scrapy.orgScrapinghub on Twitter: @scrapinghubScrapinghub: scrapinghub.comcookiecutter template for Scrapy projects: github.comSplash: headless browser designed specifically for web scraping: scrapinghub.com/splashAwesome Web Scraping list: github.comTalk Python episode 50 on web scraping: talkpython.fmHow Web Scraping is Revealing Lobbying and Corruption in Peru: blog.scrapinghub.comWeb Data Extraction Summit event: extractsummit.ioSponsorsTalk Python TrainingLinode",2020-09-23T00:00:00Z,#datascience #ds #podcast
Blog – Machine Learning Mastery,https://machinelearningmastery.com,Evolution Strategies From Scratch in Python,https://machinelearningmastery.com/evolution-strategies-from-scratch-in-python/,"Evolution strategies is a stochastic global optimization algorithm. It is an evolutionary algorithm related to others, such as the genetic algorithm, although it is designed specifically for continuous function optimization. In this tutorial, you will discover how to implement the evolution strategies optimization algorithm. After completing this tutorial, you will know: Evolution Strategies is a [&#8230;]The post Evolution Strategies From Scratch in Python appeared first on Machine Learning Mastery.",2021-02-25T18:00:17Z,#datascience #tutorials
DEV Community,https://dev.to,How To Use Styled-Components In React,https://dev.to/paulmercieca/how-to-use-styled-components-in-react-54o5,"Styled components are a CSS-in-JS tool that bridges the gap between components and styling, offering numerous features to get you up and running in styling components in a functional and reusable way. In this article, you’ll learn the basics of styled components and how to properly apply them to your React applications. You should have worked on React previously before going through this tutorial.At the core of CSS is the capability to target any HTML element — globally — no matter its position in the DOM tree. This can be a hindrance when used with components, because components demand, to a reasonable extent, colocation (i.e. keeping assets such as states and styling) closer to where they’re used (known as localisation).In React’s own words, styled components are “visual primitives for components”, and their goal is to give us a flexible way to style components. The result is a tight coupling between components and their styles.      Why Styled Components?Apart from helping you to scope styles, styled components include the following features:Automatic vendor prefixing: You can use standard CSS properties, and styled components will add vendor prefixes should they be needed.Unique class names: Styled components are independent of each other, and you do not have to worry about their names because the library handles that for you.Elimination of dead styles: Styled components remove unused styles, even if they’re declared in your code.      InstallationInstalling styled components is easy. You can do it through a CDN or with a package manager such as Yarn… yarn add styled-components.Our demo uses create-react-app.      Starting OutPerhaps the first thing you’ll notice about styled components is their syntax, which can be daunting if you don’t understand the magic behind styled components. To put it briefly, styled components use JavaScript’s template literals to bridge the gap between components and styles. So, when you create a styled component, what you’re actually creating is a React component with styles. It looks like this:import styled from ""styled-components"";// Styled component named StyledButtonconst StyledButton = styled.button`  background-color: black;  font-size: 32px;  color: white;`;function Component() {  // Use it like any other component.  return &lt;StyledButton&gt; Login &lt;/StyledButton&gt;;}Here, StyledButton is the styled component, and it will be rendered as an HTML button with the contained styles. styled is an internal utility method that transforms the styling from JavaScript into actual CSS.In raw HTML and CSS, we would have this:button {  background-color: black;  font-size: 32px;  color: white;}&lt;button&gt; Login &lt;/button&gt;      Adapting Based On PropsStyled components are functional, so we can easily style elements dynamically. Let’s assume we have two types of buttons on our page, one with a black background, and the other blue. We do not have to create two styled components for them; we can adapt their styling based on their props.import styled from ""styled-components"";const StyledButton = styled.button`  min-width: 200px;  border: none;  font-size: 18px;  padding: 7px 10px;  /* The resulting background color will be based on the bg props. */  background-color: ${props =&gt; props.bg === ""black"" ? ""black"" : ""blue"";`;function Profile() {  return (    &lt;div&gt;      &lt;StyledButton bg=""black""&gt;Button A&lt;/StyledButton&gt;      &lt;StyledButton bg=""blue""&gt;Button B&lt;/StyledButton&gt;    &lt;/div&gt;  )}Because StyledButton is a React component that accepts props, we can assign a different background color based on the existence or value of the bg prop.You’ll notice, though, that we haven’t given our button a type. Let’s do that:function Profile() {  return (    &lt;&gt;      &lt;StyledButton bg=""black"" type=""button""&gt;        Button A      &lt;/StyledButton&gt;      &lt;StyledButton bg=""blue"" type=""submit"" onClick={() =&gt; alert(""clicked"")}&gt;        Button B      &lt;/StyledButton&gt;    &lt;/&gt;  );}Styled components can differentiate between the types of props they receive. They know that type is an HTML attribute, so they actually render &lt;button type=""button""&gt;Button A&lt;/button&gt;, while using the bg prop in their own processing. Notice how we attached an event handler, too?Speaking of attributes, an extended syntax lets us manage props using the attrs constructor. Check this out:const StyledContainer = styled.section.attrs((props) =&gt; ({  width: props.width || ""100%"",  hasPadding: props.hasPadding || false,}))`  --container-padding: 20px;  width: ${(props) =&gt; props.width}; // Falls back to 100%  padding: ${(props) =&gt;    (props.hasPadding &amp;&amp; ""var(--container-padding)"") || ""none""};`;Notice how we don’t need a ternary when setting the width? That’s because we’ve already set a default for it with width: props.width || ""100%"",. Also, we used CSS custom properties because we can!",2021-03-08T13:40:48Z,#datascience #tutorials
DEV Community,https://dev.to,Five Resources to Get Started with AWS CloudFormation,https://dev.to/aws/five-resources-to-get-started-with-aws-cloudformation-1f3p,"What if instead of manually configuring your infrastructure resources, one by one, in a web browser or at the command line, you could manage it all in code? What if you could manage whole environments across the globe, at scale? You can, with Infrastructure as Code (IaC). Here, we'll cover Iac, AWS CloudFormation, and five resources to help you get started.Infrastructure as Code is the management of infrastructure resources and their dependencies with code. It allows you to manage and provision whole environments reliably and at scale, automatically. Historically infrastructure was managed manually, with scripts, or run books, and became out of date quickly if changes were made directly to those resources. When you treat your infrastructure as code, just as you would your application code, you get the same benefits: you can provision the same environment multiple times, it can be version controlled, it's less brittle, it can be reused, and it can be tested. And just like your application code, you edit the source code to make changes to your infrastructure. Infrastructure as code also lets you take advantage of the cloud's pay-as-you-go pricing, provisioning and de-provisioning resources as needed, scaling up or down as needed.AWS CloudFormation is one such tool that allows you to manage and provision AWS infrastructure predictably and repeatedly with code. With a CloudFormation template, you can define a set of AWS resources and manage that collection of resources together as one stack. By treating your infrastructure as code, you can manage the CloudFormation template in version control, just like you do your application code. With CloudFormation, you can automate your best practices, scale your infrastructure across the globe, and integrate with other AWS services to control access, improve automation, testing, and controls.      CloudFormation ResourcesIf you’re looking to start managing your AWS infrastructure resources in code, CloudFormation is a good place to start. Here are five resources that I found helpful as I was getting started with CloudFormation.      The AWS CloudFormation workshop      🔗 https://cfn101.workshop.aws/This is a self-guided workshop that walks you through the foundational features and concepts of using CloudFormation to provision an Amazon EC2 instance and related services and configuration. It introduces Nested Stacks and Layered Stacks for reusing templates and stacks and also covers the basics of packaging and deployment as your stacks become more complex.      More hands-on CloudFormation      🔗 https://dev.to/tiamatt/hands-on-aws-cloudformation-part-1-it-all-starts-here-5153A five-part series by Samira Yusifova, covering the foundational concepts of CloudFormation. She even explains what the dependent resources are and why you'll need them, including CIDR blocks, Internet Gateways, public and private subnets, and VPCs.      Organizing your templates      🔗 https://dev.to/aws-builders/how-to-organize-cloudformation-stacks-to-minimize-blast-radius-1leeGert Leenders explains ways to organize your stacks to reflect the volatility of your resources.      Sample AWS CloudFormation templates      🔗 https://github.com/awslabs/aws-cloudformation-templatesThese sample templates can help you learn how to solve a specific problem and serve as a good starting point for your templates. Both the AWS team and community contribute and maintain these samples.      The official AWS documentation      🔗 https://docs.aws.amazon.com/cloudformation/Official documentation that goes into more detail, like how to use CloudFormation at the command line and how to configure each and every resource type supported in your template.      What is AWS CDK?Are you interested in managing your infrastructure with TypeScript, JavaScript, Python, Java, and C#/.Net? Check out the AWS CDK. The AWS CDK lets you define your cloud infrastructure in familiar programming languages (as opposed to JSON and YAML with CloudFormation) and provisions your cloud resources through CloudFormation.Hopefully, these resources have been helpful to you. Feel free to share your own suggestions in the comments!",2021-03-08T14:25:45Z,#datascience #tutorials
DEV Community,https://dev.to,4 Steps to Debug Any Problem,https://dev.to/mikechrupcala/4-steps-to-debug-any-problem-3565,"IntroductionYour leg started to cramp ten minutes ago, but you barely noticed.The chatter from a distant TV is nothing but background noise...white noise, a gentle reminder of the outside world.Your only focus is the sound from the strokes of your keyboard…click click click…a rapid-fire staccato of instructions to your machine...Create Object…insert method…then suddenly, the moment of truth when you test the lines you’ve just added……Success! Great, now you just have to add that one last function…broken! What!! Which line???Writing code isn't easy, no matter how much experience you have with it. When you get something wrong, some errors are more helpful than others at pointing you toward the mistake. Usually it just takes one obvious re-write to get your program back up-and-running.But what happens when you’re stuck? Completely at a loss, and staring at 200+lines of computer-speak that seemed very familiar to you just a second ago, and very unfamiliar in an instant. How do you work your way out of the problem? Try these steps to debug your code:      Step 0: Check for Grammar/Spelling MistakesObvious? Sure, but I’ve noticed that 98% of my mistakes come from a misplaced comma or a misspelled “this”. Code is a fickle, unforgiving tool, and one extra letter or missing syntax can confuse your compiler.(Pictured below: me, for 2 hours, trying to find the extra “.” in my code)The good news is, most IDE’s will come with features to help you catch errors faster. Personally I love all of the following features: auto-complete, error detection, and color-coding. That last one’s my favorite because it means I can skim through a bunch of orange text strings and notice that little red stinker with the missing quotation mark. But if that didn’t work, ask yourself…      Step 1: What do you know?It can feel really frustrating when your confidence is dashed by a bright red ‘ERROR’ across the screen. But you knew enough to get yourself here, and that means you probably know enough to get yourself out! So first, you should pick apart the error message and take a mental note of what’s familiar.“Syntax error…I’ve seen this before, and the last time it was just a typo.”“Null value….well I know that means that some value is either undefined or it doesn’t exist. Oh, and I also know that the value is probably considered ‘false’.”Another thing you can try is, if you added more than a few lines of code, then you can isolate them and read slowly line-by-line. Explain to yourself what each of the lines should be doing, or read every word and remind yourself of the definitions. Maybe you forgot the “OR” operator, or you wrote splice() when you needed slice(). Which leads me to the next step…      Step 2: What are you missing?Here, it could be really helpful to make a list of what you’re not familiar with. Do you have an idea of which line of code is the problem? If not, check the error message again to isolate the problem. Is there a new word in the error message that you haven’t seen before? Are you practicing a new concept, one that’s complicated and might be interacting with your code in a way that you wouldn’t expect? Maybe the asynchronous function you're calling has timing problem that you've never seen before.If that’s the case then you might need to…      Step 3: Research the unfamiliar.This is, hands-down, my favorite part of coding. Every day you might face a new challenge, and every day that challenge can be an opportunity for growth. The amount of resources available online for computer programming is staggering. From articles that break down highly-specific edge cases, all the way up to complete Ivy League courses. Try not to feel discouraged when you run into a new term/concept. Programming languages are massive, and this can happen every day! Instead, try seeing it as an invitation to go down the research rabbit hole. You never know which doors your curiosity could open.For beginners, reading the documentation is a secret weapon. Every popular framework &amp; library will have its own website that's dedicated to explaining its features and to show you examples. You should use a library's docs as your starting place for research, so that you can build a mental model of how a feature should work, which will give you a better idea of how you're trying to use it.      Step 4: Find somebody who shares your problem.It’s rare, and especially rare at the beginning of your career, for you to have a problem that nobody’s ever grappled with. There are more than seven billion people on this planet- that’s a lot of engineers!At this stage I like to get creative with my Google searches. Say I’m writing in JavaScript and I’m uncomfortable with ‘closure’ (and no, we're not asking my ex-girlfriend). Searching for the phrase “Javascript closure” is a good start, but “stackoverflow closure” will give me pages full of community-answered code examples, “r/javascript closure” will include 10+ posts on a wildly popular Reddit community, and that’s not even the tip of the iceberg. If the first few walkthroughs that you find are dry or poorly explained, then there’s no limit to the amount of information you’ll find online.      ConclusionNo matter where you’re at with your professional development, and no matter what you’re working on, the best thing you can do is keep going. Even if you went through all these steps and you’re still stuck, taking a 5-minute walk outside can usually break down that nasty roadblock. Follow me on Twitter for more programming tips, and DM me if you have any questions or if you’d like some advice. I hope this helped, and thank you for reading!",2021-03-08T17:55:53Z,#datascience #tutorials
Information is Beautiful,https://informationisbeautiful.net,Global #Coronavirus Vaccination Tracker,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/31KfI5N6I-U/,"Total vaccinations, doses per 100 people, % of population inoculated now available on our live Coronavirus tracker. &#187; See the visualisation Thanks to a great datastream at Our World in Data and sterling coding and design work from UniversLab and Neuker.",2021-03-03T18:13:20Z,#dataviz
FlowingData,https://flowingdata.com,"✚ Visualization Tools and Resources, February 2021 Roundup",https://flowingdata.com/2021/03/04/process-129-roundup/,Every month I collect new visualization tools and learning resources to help you make better charts. Here's the good stuff for February 2021.Tags: roundup,2021-03-04T19:45:01Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Myanmar records its deadliest day of pro-democracy protests,https://www.economist.com/graphic-detail/2021/02/28/myanmar-records-its-deadliest-day-of-pro-democracy-protests,The repression on February 28th marked a distinct escalation in violence by the army,2021-02-28T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Is the lot of female executives improving?,https://www.economist.com/graphic-detail/2021/03/04/is-the-lot-of-female-executives-improving,Our glass-ceiling index shows some progress in some places. But not enough,2021-03-04T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,213. Aziz Ansari Needs Another Toothbrush,https://omny.fm/shows/freakonomics-radio/aziz-ansari-needs-another-toothbrush,"The comedian, actor -- and now, author -- answers our FREAK-quently Asked Questions",2015-07-23T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,225. Am I Boring You?,https://omny.fm/shows/freakonomics-radio/am-i-boring-you,Researchers are trying to figure out who gets bored - and why - and what it means for ourselves and the economy. But maybe there's an upside to boredom?,2015-10-29T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,410. What Does Covid-19 Mean for Cities (and Marriages)?,https://omny.fm/shows/freakonomics-radio/what-does-covid-19-mean-for-cities-and-marriages,There are a lot of upsides to urban density — but viral contagion is not one of them. Also: a nationwide lockdown will show if familiarity really breeds contempt. And: how to help your neighbor.,2020-03-26T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,451. Can I Ask You a Ridiculously Personal Question?,https://omny.fm/shows/freakonomics-radio/can-i-ask-you-a-ridiculously-personal-question,"Most of us are are afraid to ask sensitive questions about money, sex, politics, etc. New research shows this fear is largely unfounded. Time for some interesting conversations!",2021-02-11T04:00:00Z,#economics #podcast
Squarespace / Engineering,https://engineering.squarespace.com/,How We Hacked Our Virtual Hack Week,https://engineering.squarespace.com/blog/2020/how-we-hacked-our-virtual-hack-week,"A buzz enters the air at the start of Hack Week. A week of boundless exploration begins. Exploration, collaboration, creativity, ingenuity, and optimism reign supreme. Yet, would these qualities still reign supreme when we’re all working remotely? Would Hack Week even work remotely?",2020-08-21T17:30:00Z,#tech #engineering
Acing AI - Medium,https://medium.com/acing-ai?source=rss----f3225cc85e15---4,Building scalable and efficient ML Pipelines,https://medium.com/acing-ai/building-scalable-and-efficient-ml-pipelines-a9f61d2ecbbd?source=rss----f3225cc85e15---4,Using Kubernetes to build ML pipelines that scaleContinue reading on Acing AI »,2020-09-18T15:22:26Z,#tech #engineering
Zillow Tech Hub,https://www.zillow.com/tech/,How Zillow tests Clickstream Analytics,https://www.zillow.com/tech/how-zillow-tests-clickstream-analytics/,"At Zillow, the largest real estate network on the web with the most unique visitors in the U.S., we enable people to unlock life's next chapter, by turning on the lights on the housing market. In order to find out how the users are behaving on the site, we use analytics. Analytics implementations allow developers [&#8230;]The post How Zillow tests Clickstream Analytics appeared first on Zillow Tech Hub.",2020-11-18T02:13:04Z,#tech #engineering
Google Open Source Blog,http://opensource.googleblog.com/,Season of Docs 2020: 5 Technical communication learnings as an open source contributor,http://www.blogger.com/feeds/8698702854482141883/posts/default/5914419826458111000,Season of Docs 2020: 5 Technical communication learnings as an open source contributor,2021-03-03T09:00:18Z,#tech #engineering
MIT Technology Review,https://www.technologyreview.com,Data-driven humanitarianism,https://www.technologyreview.com/2021/03/02/1020118/data-driven-humanitarianism/,"It’s one of the most beautiful places on Earth, but its people are among the most vulnerable. Afghanistan’s snowy mountains and fertile foothills give way to arid plateaus, offering a contrast often described as stark and gorgeous. The nexus of ancient East-West trade routes, this landlocked country hosts many languages, artisan traditions, and centuries of&#8230;",2021-03-02T16:08:13Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Conversational computers have come a long way,https://www.economist.com/science-and-technology/2021/02/11/conversational-computers-have-come-a-long-way,But still have a long way to go,2021-02-11T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Two arthritis medicines prove effective for covid-19,https://www.economist.com/science-and-technology/2021/01/14/two-arthritis-medicines-prove-effective-for-covid-19,A pair of aces,2021-01-14T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,A new generation of electric motorboats takes to the water,https://www.economist.com/science-and-technology/2021/02/17/a-new-generation-of-electric-motorboats-takes-to-the-water,Clean and quiet,2021-02-17T00:00:00Z,#tech #news
