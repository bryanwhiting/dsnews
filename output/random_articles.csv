feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Building A Self Service Data Platform For Alternative Data Analytics At YipitData - Episode 163,https://www.dataengineeringpodcast.com/yipitdata-alternative-data-analytics-episode-163/#utm_source=rss&utm_medium=rss,"As a data engineer you're familiar with the process of collecting data from databases, customer data platforms, APIs, etc. At YipitData they rely on a variety of alternative data sources to inform investment decisions by hedge funds and businesses. In this episode Andrew Gross, Bobby Muldoon, and Anup Segu describe the self service data platform that they have built to allow data analysts to own the end-to-end delivery of data projects and how that has allowed them to scale their output. They share the journey that they went through to build a scalable and maintainable system for web scraping, how to make it reliable and resilient to errors, and the lessons that they learned in the process. This was a great conversation about real world experiences in building a successful data-oriented business.",2020-12-15T01:50:53Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#272 No IoT things in hand? Simulate them with Device Simulator Express,https://talkpython.fm/episodes/show/272/no-iot-things-in-hand-simulate-them-with-device-simulator-express,"Python is one of the primary languages for IoT devices. With runtimes such as CircuitPython and MicroPython, they are ideal for the really small IoT chips. Maybe you've heard of the Circuit Playground Express, BBC micro:bit, or the fancy Adafruit CLUE.  They aren't too expensive (ranging from $25 to $50 each). But for large groups such as classrooms, this can be a lot of money. Moreover, getting your hands on these devices can sometimes be tricky as well. With an extension for VS Code called Device simulator express, you can have instant access to all three (virtually of course). This cool extension adds a visual emulator as well as the native interactions such as buttons and temperature sensors.Get your IoT on without a real device using VS code today. Let's meet the most recent team behind this project:Guests* Andrea Mah* Sayyeda Mussa* Vandy Liu* Xuan-Nam Kevin NguyenLinks from the showDevice simulator express: microsoft.comSource code: github.comMakecode: microsoft.comMeet the team (short video intro): youtu.beOverview video: youtu.beDevicesCircuit Playground Express: adafruit.comCLUE: adafruit.comBBC micro:bit: microbit.orgSponsorsLinodeTalk Python Training",2020-07-12T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,"#283 Web scraping, the 2020 edition",https://talkpython.fm/episodes/show/283/web-scraping-the-2020-edition,"Web scraping is pulling the HTML of a website down and parsing useful data out of it. The use-cases for this type of functionality are endless. Have a bunch of data on governmental sites that are only listed online in HTML without a download? There's an API for that! Do you want to keep abreast of what your competitors are featuring on their site? There's an API for that. Need alerts for changes on a website, for example enrollment is now open at your college and you want to be first to get in and avoid the 8am Monday morning course slot? There's an API for that. That API is screen scraping and Attila Tóth from ScrapingHub is here to tell us all about it.Links from the showAttila Tóth on LinkedIn: linkedin.comScrapy project: scrapy.orgScrapinghub on Twitter: @scrapinghubScrapinghub: scrapinghub.comcookiecutter template for Scrapy projects: github.comSplash: headless browser designed specifically for web scraping: scrapinghub.com/splashAwesome Web Scraping list: github.comTalk Python episode 50 on web scraping: talkpython.fmHow Web Scraping is Revealing Lobbying and Corruption in Peru: blog.scrapinghub.comWeb Data Extraction Summit event: extractsummit.ioSponsorsTalk Python TrainingLinode",2020-09-23T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Add Version Control To Your Data Lake With LakeFS - Episode 157,https://www.dataengineeringpodcast.com/lakefs-data-lake-versioning-episode-157/#utm_source=rss&utm_medium=rss,"Data lakes are gaining popularity due to their flexibility and reduced cost of storage. Along with the benefits there are some additional complexities to consider, including how to safely integrate new data sources or test out changes to existing pipelines. In order to address these challenges the team at Treeverse created LakeFS to introduce version control capabilities to your storage layer. In this episode Einat Orr and Oz Katz explain how they implemented branching and merging capabilities for object storage, best practices for how to use versioning primitives to introduce changes to your data lake, how LakeFS is architected, and how you can start using it for your own data platform.",2020-11-03T00:47:03Z,#datascience #ds #podcast
Towards Data Science - Medium,https://towardsdatascience.com?source=rss----7f60cf5620c9---4,The Step-by-Step Curriculum I’m Using to Teach Myself Data Science in 2021,https://towardsdatascience.com/the-step-by-step-curriculum-im-using-to-teach-myself-data-science-in-2021-c8eab834a87c?source=rss----7f60cf5620c9---4,Exactly how I plan on teaching myself data science without spending a single dollar.Continue reading on Towards Data Science »,2020-12-24T00:18:33Z,#datascience #tutorials
DEV Community,https://dev.to,An Annotated Guide to React Server Components,https://dev.to/swyx/an-annotated-guide-to-the-react-server-components-demo-2a83,"The React team announced React Server Components this week with a talk, RFC, and demo. It is a lot to go through (especially for a holiday week), but I did. Here are my notes.      TL;DRWhat are React Server Components?They are an experimental, upcoming feature of React that lets you render Components only on the Server. This has a few implications; here are my top 2:RSCs have Zero client JS bundle impact, so they can greatly reduce your overall bundle size. Despite only rendering on the server, they don't have to be static; you can refetch Server Components and the server will stream updates down, without losing state in Client Components.You can directly query your database inside a Server Component without setting up GraphQL, API endpoints, or state management - and keep the query up to date as your serverside data changes. These queries are also faster because you save client-server roundtrips and waterfalls.Note: They must be named with a .server.js extension and follow some constraints - mainly, they can't use state, effects, or DOM APIs.What problems do React Server Components solve?They solve for Good User Experience, Cheap Maintenance, and Fast Performance in React apps (as defined in the talk notes below). There are multiple benefits for both developers and users, and the size of benefit depends on the use case, which makes this difficult to fully explain. However the headline opportunity here is to greatly reduce production React app bundle sizes (tests have seen as much as 29% reduction, but can easily be higher depending on your app) while not sacrificing modern app-like user experiences (this again has multiple meanings - demonstrated in the demo below).Finally, React Server Components make it easy to create hybrid apps - giving you the power to pick a sliding scale between a fully clientside app or a fully serverside app and everything in between - and not have to do major rewrites to change paradigms as requirements change.      Annotated Talk With TimestampsI will link to the timestamps with my commentary below, but you can view Dan Abramov and Lauren Tan's full talk here:1:45 Dan introduces the main constraints that React is trying to solve for:Good User Experience - we want to orchestrate intentionally designed loading states. Items that should appear together must appear together, instead of jumping around on screen based on async API requests resolving.Cheap Maintenance - we want to optimize for change. Make it easy to delete and move code around from component to component or from client to server or from stateless to stateful. To do this, data requirements should be delegated as low down the component tree as possible, rather than hoisted up to the highest common parent.Fast Performance - we want to decrease JS bundle size, avoid client-server roundtrips and network waterfalls. If components are not dynamic, we should render them once on the server (and fetch their data), and not send their JS to the client. We should cache results on the client if possible. Requests that can be done in parallel should not be done in sequence.Historically, React forced you to choose 2 out of 3 of these constraints. With React Server Components, you can have all 3. (Facebook already had all 3 with Relay and GraphQL, but not everyone has a GraphQL backend, nor should they. React Server Components are a more general and easily adopted alternative.)12:05 Lauren introduces the React Server Components DemoServer Components are indicated by the new .server.js extension (separate Module Conventions RFC here).Client Components are also indicated by a .client.js extension. You can switch Client Components to Server Components simply by renaming them.(Explained later) Shared Components just have the standard .js extension.(Explained later) There are three new React I/O libraries used in the demo:react-fetch (wraps the fetch API)react-pg (to access PostgreSQL)react-fs (to access the Filesystem)These are caches that let you Suspend rendering while data is being requested.Fetching data on the server is much faster than fetching from the client, so this is a good optimization16:10 Server Components have zero bundle size impactReact doesn't download any JS for Server Components, including for any of their dependencies. This is a great strategy for heavy dependencies that are only used on the server.(Explained later) JSX props/children will be rendered by the Server Component before it reaches the Client. So you can pass them Shared Components and save on bundle size too.17:25 Limitation: Server Components cannot be interactiveNo useState or useEffect, no event handlers (e.g. onClick)Client Components must receive serializable props from Server Components (e.g. no functions. JSX children/props is fine)The RFC has more on the limitations of Server and Client Components.22:50 Difference between SSR and Server ComponentsYou can refetch the Server Component tree so that HTML updates stream down, without any extra JS for the refetched Server Components.But the parts of the app with clientside state are preserved. This is the main difference!Lauren later elaborated: ""SSR of client JS apps is an illusion. You render your JS on the server into HTML. You serve that HTML to your client so it appears to have fast startup. But you still have to wait for your JS to reach the user before anything can be interactive (hydration).  After hydration, SSR can't be used again - it's typically only used for initial loads. We can refetch React Server Components as many times as we like.""The RFC FAQ also comments on the differences and complementarity of SSR and Server Components.26:45 Shared ComponentsShared Components can render on either the server OR the client. They just have a .js extension.Shared Components have the combined limitations of Server and Client Components, explained in the RFC.Shared Components rendered on the server won't be sent to the client, unless they are rendered on the client, in which case they will be downloaded on demand!30:26 Server Components can directly query the databaseBecause we can refetch the Server Component tree (as explained above)...a single Server Component that takes dynamic props and runs a database query (like a Search component) can update live! No local state management or API requests needed. Just changing props and refetching the Server Component.This Component stays updated even as you add new items to the database!Don't skim over this part - This is a literal WOW moment - see us realize this at the 1h 10min mark on the React Serverless Components demo livestream33:21 Suspense and Slow Network UXWhen the network is slow, we should show some immediate feedback to users as they wait. Suspense and Server Components work well together for this.Method 1: We can use Suspense fallbacks to show user some feedback on Server Components, even while waiting for the rest of the server tree to be rendered (eg due to fetching data)This is possible because Server Components don't render to HTML, they render to a special format to be streamed down to clients.Method 2: We can also use Suspense transitions to respond immediately even before the response has started streaming down.36:50 Recap of Demo Points. Server Components...36:54 have ZERO effect on bundle sizehaving the ability to decide which components to put on the client or on the server gives you more control over bundle size37:42 let you access backend resources DIRECTLYYou can use the same paradigm for server &amp; client data fetchingThe community will be able to create more React IO library wrappers to cache results for more data sources41:04 let you only load the code that is necessaryif a Server Component conditionally renders a Client Component, the server will only send an instruction to download the Client Component if it is present in the server outputThis works like dynamic imports, but is automatically done instead of requiring manual loadingTo enable this, Integrated plugins are being written with webpack, Next.js, and Parcel teams.43:17 let you decide the tradeoff for every concrete usecaseEliminate the artificial boundary between client and server:Put data fetching and preprocessing code on ServerPut fast interaction response code on ClientBut they expect that the majority of components will be Shared.Example: CMS where you render articles on the server (so can be Server component most of the time) but when in admin panel you want to edit them (so need to render on client)44:25 provide modern UX with server-driven mental modelcreate modern and app-like UI'sbut write them like an old-school web pageExample: the Search component in Lauren's demo is a Server Component that refetches based on a Client Component's state, but that Client Component's state persistsUsecase: CSS animation on property change can fire because now the DOM will not be destroyed47:14 Recap of Recap &amp; looking aheadIt's Opt-in, still in R&amp;D (missing core APIs eg Server Component Router, and need to finalize Concurrent Mode), and will be available to everyone even those who don't use Next.jsProduction tests at FB have seen up to 29% reduction in bundle sizesDon't make courses on this or put this in production. Just play with the demo.You can also see more commentary on the Twitter thread here.      Demo WalkthroughThe React Team also released the demo shown in the talk: https://github.com/reactjs/server-components-demo/However there are some difficult setup steps and a lot of things to try in the demo. I recently did a 2 hour walkthrough of every part, with timestamps.You can also put Server Components into a serverless function, as I found today with a lot of difficulty.      Personal ReflectionsThis is the beginning of the end of a very, very long journey in React stretching as far back as 2014, when Jordan Walke first mentioned Async Rendering (the old name for Concurrent React) was a possibility.My relationship with React Suspense started just after Dan Abramov's JSConf Iceland 2018 talk introducing it. It blew everyone's mind and ripped up everything I thought I knew about how React apps could and should be written. I stayed up all night to write a walkthrough of that demo. I had no React presence at the time but I've been following this idea throughout the ensuing 2.5 years.I suspect how React Server Components look to people who have followed the journey are wholly different to people who are only just looking at this today. Kind of like how you might really enjoy a movie just for your snobby annoying friend to tell you ""the book was better"".To me, ""the book"" provided a whole lot more context that, while it is irrelevant today, gives me a great deal more appreciation for how we got here and how things might work under the hood.Here is all the jargon we did NOT discuss at any point in the talk or demo (because they are implementation details or irrelevant today):maxDuration and Just Noticeable Difference heuristicsPriority Laneshidden={true}Progressive HydrationSelective HydrationSchedulingTransparent AsynchronyIdempotency vs PurityCoroutinesConcurrency, Algebraic Effects, Lazy EvalTwo pass SSRStreaming SSRTrisomorphic RenderingIslands ArchitectureInstead, we are given one concept today - Server Components. If you squint hard enough, you might even observe there is no API.      TakeawaysBecause the React team has consistently communicated their thoughts through the years, the main benefit of React Server Components is the same as I've commented on in my writing and speaking.Given a baseline React runtime, React Server Components let you:Greatly reduce real-world app sizes by making it easy for you to not send down unnecessary JS (the proverbial disappearing app)Have Client and Server components seamlessly operate in the same tree so you don't have to change paradigms when requirements change. Serve data much faster and easier by skipping client-server waterfalls and directly accessing backend resources.Preserve clientside state and DOM nodes even when loading Server Components so you can even do page transitions, CSS animations and persist input focus.This is a wonderful new area of opportunity for React developers, and the ecosystem is set to see tremendous growth in 2021. I feel certain that it is also going to spark similar efforts in other frameworks (because the case for Concurrent Mode has for the first time been made beyond time slicing and lazy loading components).      Related ReadsI will update this with selected other pieces over time. Addy Osmani's take on React Server Componentshttps://hotwire.dev DHH's bundling of the Turbolinks + Stimulus + Strada stack used in the Hey email app. RSCs have been (loosely!) compared to ""Turbolinks for Virtual DOM""",2020-12-23T01:18:46Z,#datascience #tutorials
Blog – Machine Learning Mastery,https://machinelearningmastery.com,Autoencoder Feature Extraction for Classification,https://machinelearningmastery.com/autoencoder-for-classification/,"Autoencoder is a type of neural network that can be used to learn a compressed representation of raw data. An autoencoder is composed of an encoder and a decoder sub-models. The encoder compresses the input and the decoder attempts to recreate the input from the compressed version provided by the encoder. After training, the encoder [&#8230;]The post Autoencoder Feature Extraction for Classification appeared first on Machine Learning Mastery.",2020-12-06T18:00:35Z,#datascience #tutorials
DEV Community,https://dev.to,"Hello, World! I Started My Blog In Plain HTML",https://dev.to/phuctm97/hello-world-i-started-my-blog-in-plain-html-1nnm,"Today is a special day for me: I finally created my blog, what I has been thinking of for years 🎉. If you are reading this on another platform, it is an automatic crosspost, feel free to check out my website.      Plain HTML is fun 🤓Because I didn't want to give myself another reason to keep procrastinating, I decided to start this blog dead simple: plain HTML, no inline style, no CSS, no JS, whatsoever.Surprisingly, after making the decision, I realized that HTML and the web were originally created for people to write, share, and communicate information. That why we have HTML tags title, article, header, headings ( h1 h2 h3 h4 h5 h6), paragraph (p), etc, they're all for writing articles and sharing stories. Over time, thanks to more and more powerful computers and browsers, HTML/CSS/JS became more and more like a framework to create interactive applications on the web.This is such an interesting Aha! movement for me because I started with game and desktop programming, which are all about visualization and interactivity. All of my previous experience with web development were also about creating beautiful and interactive web applications. I've never happened to think of HTML as a means for writing and sharing stories.This also answered one of my biggest unsolved questions in programming - why on earth there're many different HTML tags that have the same visualization and all the weird workaround-like positioning techniques ( float, clear: fix, etc). Coming from game and desktop development, absolute position, flex, and grid were always obvious options when it comes to layout and positioning for me. Now, it all makes sense 🤯 and it's very interesting to see how HTML - the core of The Internet has evolved over time.Alright, that is it. I thought that I were gonna write more about why I started this blog and what value you can get from it, but I ran out of time, gotta write it tomorrow then.",2020-12-23T05:04:02Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,"In America, your absentee ballot is more likely to be counted if you’re white",https://www.economist.com/graphic-detail/2020/09/24/in-america-your-absentee-ballot-is-more-likely-to-be-counted-if-youre-white,The reasons are unclear: a patchy postal service or racism?,2020-09-24T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Protestant Christianity is booming in China,https://www.economist.com/graphic-detail/2020/09/15/protestant-christianity-is-booming-in-china,President Xi does not approve,2020-09-15T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,"Why Europe’s second, less severe lockdowns are working",https://www.economist.com/graphic-detail/2020/11/28/why-europes-second-less-severe-lockdowns-are-working,"The restrictions have limited the rate of new infections, especially from long trips",2020-11-28T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,"Once again, less-educated whites spurned America’s Democratic nominee",https://www.economist.com/graphic-detail/2020/11/11/once-again-less-educated-whites-spurned-americas-democratic-nominee,Polls incorrectly predicted that Joe Biden would claw back some of his party’s losses with this group,2020-11-11T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,421. How to Prevent Another Great Depression,https://omny.fm/shows/freakonomics-radio/how-to-prevent-another-great-depression,"Millions and millions are out of work, with some jobs never coming back. We speak with four economists — and one former presidential candidate — about the best policy options and the lessons (good and bad) from the past.",2020-06-11T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,429. Is Economic Growth the Wrong Goal?,https://omny.fm/shows/freakonomics-radio/is-economic-growth-the-wrong-goal,"The endless pursuit of G.D.P., argues the economist Kate Raworth, shortchanges too many people and also trashes the planet. Economic theory, she says, “needs to be rewritten” — and Raworth has tried, in a book called Doughnut Economics. It has found an audience among reformers, and now the city of Amsterdam is going whole doughnut.",2020-08-13T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,418. What Will College Look Like in the Fall (and Beyond)?,https://omny.fm/shows/freakonomics-radio/what-will-college-look-like-in-the-fall-and-beyond,Three university presidents try to answer our listeners’ questions. The result? Not much pomp and a whole lot of circumstance.,2020-05-14T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,Why the Left Had to Steal the Right’s Dark-Money Playbook,https://omny.fm/shows/freakonomics-radio/why-the-left-had-to-steal-the-right-s-dark-money-p,"The sociologist Sudhir Venkatesh spent years studying crack dealers, sex workers, and the offspring of billionaires. Then he wandered into an even stranger world: social media. He spent the past five years at Facebook and Twitter. Now that he’s back in the real world, he’s here to tell us how the digital universe really works. In this pilot episode of a new podcast, Venkatesh interviews the progressive political operative Tara McGowan about her digital successes with the Obama campaign, her noisy failure with the Iowa caucus app, and why the best way for Democrats to win more elections was to copy the Republicans.",2020-10-31T03:55:00Z,#economics #podcast
Medium Engineering - Medium,https://medium.engineering?source=rss----2817475205d3---4,Scaling Email Infrastructure for Medium Digest,https://medium.engineering/scaling-email-infrastructure-for-medium-digest-254223c883b8?source=rss----2817475205d3---4,NA,2020-09-29T20:08:08Z,#tech #engineering
Google Developers Blog,http://developers.googleblog.com/,Celebrating devs from Brazil on Black Consciousness Day,http://developers.googleblog.com/feeds/7038361515906650714/comments/default,Celebrating devs from Brazil on Black Consciousness Day,2020-11-20T12:49:18Z,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,Building a Large-scale Transactional Data Lake at Uber Using Apache Hudi,https://eng.uber.com/apache-hudi-graduation/,"From ensuring accurate ETAs to predicting optimal traffic routes, providing safe, seamless transportation and delivery experiences on the Uber platform requires reliable, performant large-scale data storage and analysis. In 2016, Uber developed Apache Hudi, an incremental processing framework, to power &#8230;The post Building a Large-scale Transactional Data Lake at Uber Using Apache Hudi appeared first on Uber Engineering Blog.",2020-06-09T16:00:51Z,#tech #engineering
Kickstarter Engineering - Medium,https://kickstarter.engineering?source=rss----c5ef8826f270---4,onCreate()-ing Kickstarter’s Android app,https://kickstarter.engineering/oncreate-ing-kickstarters-android-app-90f567846750?source=rss----c5ef8826f270---4,NA,2017-12-12T23:13:21Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,What the million-mile battery means for electric cars,https://www.economist.com/science-and-technology/2020/07/30/what-the-million-mile-battery-means-for-electric-cars,It is mainly about greater reliability,2020-07-30T14:51:11Z,#tech #news
MIT Technology Review,https://www.technologyreview.com,“Vaccine passports could further erode trust”,https://www.technologyreview.com/2020/12/22/1015451/vaccine-passports-nita-farahany-trust/,Experts are debating the pros and cons of covid-19 vaccine passports or other types of certification as they attempt to begin reopening public spaces. The idea seems simple on its face: those who can prove they’ve been vaccinated for covid-19 would be able to go places and do things that unvaccinated people would not. There’s&#8230;,2020-12-22T20:36:07Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,A second vaccine against covid-19 arrives,https://www.economist.com/science-and-technology/2020/11/19/a-second-vaccine-against-covid-19-arrives,And there are surely more to come,2020-11-19T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Siberia’s heatwave would not have happened without climate change,https://www.economist.com/science-and-technology/2020/07/15/siberias-heatwave-would-not-have-happened-without-climate-change,Few extreme weather events can be wholly pinned on greenhouse-gas emissions. This one can,2020-07-15T00:00:00Z,#tech #news
