feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Low Friction Data Governance With Immuta - Episode 164,https://www.dataengineeringpodcast.com/immuta-data-governance-episode-164/#utm_source=rss&utm_medium=rss,"Data governance is a term that encompasses a wide range of responsibilities, both technical and process oriented. One of the more complex aspects is that of access control to the data assets that an organization is responsible for managing. The team at Immuta has built a platform that aims to tackle that problem in a flexible and maintainable fashion so that data teams can easily integrate authorization, data masking, and privacy enhancing technologies into their data infrastructure. In this episode Steve Touw and Stephen Bailey share what they have built at Immuta, how it is implemented, and how it streamlines the workflow for everyone involved in working with sensitive data. If you are starting down the path of implementing a data governance strategy then this episode will provide a great overview of what is involved.",2020-12-21T23:10:14Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Bringing Feature Stores and MLOps to the Enterprise At Tecton - Episode 166,https://www.dataengineeringpodcast.com/tecton-mlops-feature-store-episode-166/#utm_source=rss&utm_medium=rss,"As more organizations are gaining experience with data management and incorporating analytics into their decision making, their next move is to adopt machine learning. In order to make those efforts sustainable, the core capability they need is for data scientists and analysts to be able to build and deploy features in a self service manner. As a result the feature store is becoming a required piece of the data platform. To fill that need Kevin Stumpf and the team at Tecton are building an enterprise feature store as a service. In this episode he explains how his experience building the Michelanagelo platform at Uber has informed the design and architecture of Tecton, how it integrates with your existing data systems, and the elements that are required for well engineered feature store.",2021-01-05T00:44:57Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#284 Modern and fast APIs with FastAPI,https://talkpython.fm/episodes/show/284/modern-and-fast-apis-with-fastapi,"As Python 3 has eclipsed the old constrains of Python 2 and web frameworks that adopted them, we have seen a big jump in new frameworks appearing on the scene taking full advantage of things like type hints, async and await, and more.  No framework has done this more successfully than FastAPI recently. That's why we are here with the creator of FastAPI, Sebastián Ramírez to dive into this exciting new Python web framework.Links from the showSebastian: @tiangoloFastAPI: fastapi.tiangolo.comFastAPI: One of the fastest Python frameworks available: fastapi.tiangolo.comFastAPI for Flask Users: amitness.comFastAPI Docker image:  https://github.com/tiangolo/uvicorn-gunicorn-fastapi-dockerujson: github.comuvicorn: uvicorn.orgTraffic server: docs.traefik.ioStarlette: starlette.ioPydantic: pydantic-docs.helpmanual.ioSponsorsLinodeTalk Python Training",2020-10-04T00:00:00Z,#datascience #ds #podcast
Data Engineering Podcast,https://www.dataengineeringpodcast.com,Self Service Open Source Data Integration With AirByte - Episode 173,https://www.dataengineeringpodcast.com/airbyte-open-source-data-integration-episode-173/#utm_source=rss&utm_medium=rss,"Data integration is a critical piece of every data pipeline, yet it is still far from being a solved problem. There are a number of managed platforms available, but the list of options for an open source system that supports a large variety of sources and destinations is still embarrasingly short. The team at Airbyte is adding a new entry to that list with the goal of making robust and easy to use data integration more accessible to teams who want or need to maintain full control of their data. In this episode co-founders John Lafleur and Michel Tricot share the story of how and why they created Airbyte, discuss the project's design and architecture, and explain their vision of what an open soure data integration platform should offer. If you are struggling to maintain your extract and load pipelines or spending time on integrating with a new system when you would prefer to be working on other projects then this is definitely a conversation worth listening to.",2021-02-23T02:04:59Z,#datascience #ds #podcast
DEV Community,https://dev.to,Creating Mentions And Hashtags In ReactJS,https://dev.to/gauravadhikari1997/creating-mentions-and-hashtags-in-reactjs-1el6,"# And @ In React AppsThere are many use cases in real-world applications where you need to implement triggers like showing a list of users to mention on pressing @ symbol or to write a tag after pressing the # key, which should actually save to DB as tag/mention and then render it correctly to the screen.It is understandable for a social media app to have such a feature, but this can be taken further to some apps where you need to trigger functions on some special keypresses, like in a Library Management Software to tag a Resource in someplace.      Prerequisites— Node.js ≥v6 is installed on your machine— npm/yarn is installed on your machine— You have a basic understanding of React.js      We Will Be Using— Create-React-App template.— Functional components with hooks.— TailwindCSS to style our app.— NPM package called react-mentions— Backend API to fetch posts, users, tags, and create posts. (No worries, I have already created the API)Now let’s get our hands dirty?Setup our app using CRA templateOnce it is done, move in the directory and start the show!We will create the UI first then implement functionality ;-)This is the folder structure of our final applicationBefore anything else, we will install TailwindCSS and configure it in our appYou can refer to their doc - https://tailwindcss.com/docs/guides/create-react-app or  ~ Take the boilerplate code till this point from here https://github.com/gauravadhikari1997/hashtags-and-mentions-in-react/tree/98737fc89586d6697f23349f1e0c98fa7ac38cfbyarn add react-router-dom axios react-mentions html-react-parser    Enter fullscreen mode        Exit fullscreen mode    App.jsimport { BrowserRouter, Route } from ""react-router-dom"";import { Filter, Header, NewPost, Posts } from ""./components"";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Header /&gt;      &lt;Route exact path=""/""&gt;        &lt;section className=""px-4 sm:px-6 lg:px-4 xl:px-6 pt-4 pb-4 sm:pb-6 lg:pb-4 xl:pb-6 space-y-4""&gt;          &lt;Filter /&gt;          &lt;Posts /&gt;        &lt;/section&gt;      &lt;/Route&gt;      &lt;Route path=""/new""&gt;        &lt;NewPost /&gt;      &lt;/Route&gt;    &lt;/BrowserRouter&gt;  );}export default App;    Enter fullscreen mode        Exit fullscreen mode    components/Header.jsimport { Link } from ""react-router-dom"";const Header = () =&gt; {  return (    &lt;header className=""flex items-center justify-between""&gt;      &lt;Link to=""/""&gt;        &lt;h2 className=""text-lg leading-6 font-medium text-black px-4 py-2""&gt;          &lt;span className=""text-green-400""&gt;#&lt;/span&gt;n          &lt;span className=""text-blue-400""&gt;@&lt;/span&gt;        &lt;/h2&gt;      &lt;/Link&gt;      &lt;Link        to=""/new""        className=""hover:bg-light-blue-200 hover:text-light-blue-800 group flex items-center rounded-md bg-light-blue-100 text-light-blue-600 text-sm font-medium px-4 py-2""      &gt;        New      &lt;/Link&gt;    &lt;/header&gt;  );};export default Header;    Enter fullscreen mode        Exit fullscreen mode    components/Filter.jsconst Filter = () =&gt; {  return (    &lt;form className=""relative""&gt;      &lt;svg        width=""20""        height=""20""        fill=""currentColor""        className=""absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400""      &gt;        &lt;path          fillRule=""evenodd""          clipRule=""evenodd""          d=""M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z""        /&gt;      &lt;/svg&gt;      &lt;input        className=""focus:ring-1 focus:ring-light-blue-500 focus:outline-none w-full text-sm text-black placeholder-gray-500 border border-gray-200 rounded-md py-2 pl-10""        type=""text""        aria-label=""Filter posts""        placeholder=""Filter posts""      /&gt;    &lt;/form&gt;  );};export default Filter;    Enter fullscreen mode        Exit fullscreen mode    services/service.jsimport axios from ""axios"";const instance = axios.create({  baseURL:    process.env.REACT_APP_SERVER_API ||    ""https://hashtags-n-mentions.herokuapp.com/api"",  headers: { ""Content-Type"": ""application/json"" },  timeout: 1000 * 2, // Wait for request to complete in 2 seconds});export default instance;Here we have created an instance from axios so that next time we do not have to pass baseURL and headers in every request.services/index.jsexport { default as APIservice } from ""./service"";    Enter fullscreen mode        Exit fullscreen mode    components/Posts.jsimport { useEffect, useState } from ""react"";import { Link } from ""react-router-dom"";import { APIservice } from ""../services"";import Card from ""./Card"";const Posts = () =&gt; {  const [posts, setPosts] = useState([]);  useEffect(() =&gt; {    getPosts();  }, []);  async function getPosts() {    try {      const res = await APIservice.get(""/posts"");      setPosts(res.data.posts);    } catch (error) {      console.error(error);    }  }  return (    &lt;ul className=""grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2 gap-4""&gt;      {posts &amp;&amp; posts.length &gt; 0        ? posts            .sort((a, b) =&gt; b.createdAt - a.createdAt)            .map((post) =&gt; (              &lt;Card key={post._id} title={post.title} content={post.content} /&gt;            ))        : null}      &lt;li className=""hover:shadow-lg flex rounded-lg""&gt;        &lt;Link          to=""/new""          className=""hover:border-transparent hover:shadow-xs w-full flex items-center justify-center rounded-lg border-2 border-dashed border-gray-200 text-sm font-medium py-4""        &gt;          New Post        &lt;/Link&gt;      &lt;/li&gt;    &lt;/ul&gt;  );};export default Posts;    Enter fullscreen mode        Exit fullscreen mode    Here we are getting the posts from the server in useEffect, and we are populating that data to our state posts using setPosts.Later in the return statement we are checking if there are posts and then sorting posts based on created time.Finally the posts are rendered in the Card component which takes title and content as props.Card.jsimport parse from ""html-react-parser"";import { Link } from ""react-router-dom"";const Card = ({ title, content }) =&gt; {  return (    &lt;li x-for=""item in items""&gt;      &lt;div        href=""item.url""        className=""hover:bg-light-blue-500 hover:border-transparent hover:shadow-lg group block rounded-lg p-4 border border-gray-200""      &gt;        &lt;div className=""grid sm:block lg:grid xl:block grid-cols-2 grid-rows-1 items-center""&gt;          &lt;div&gt;            &lt;span className=""leading-6 font-medium text-black""&gt;{title}&lt;/span&gt;          &lt;/div&gt;          &lt;div&gt;            &lt;span className=""group-hover:text-light-blue-200 text-gray-500 text-sm font-medium sm:mb-4 lg:mb-0 xl:mb-4""&gt;              {parse(content, {                replace: (domNode) =&gt; {                  if (domNode.name === ""a"") {                    const node = domNode.children[0];                    return (                      &lt;Link                        to={domNode.attribs.href}                        className={                          node.data[0] === ""#""                            ? ""text-green-400""                            : ""text-blue-400""                        }                      &gt;                        {node.data}                      &lt;/Link&gt;                    );                  }                },              })}            &lt;/span&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/li&gt;  );};export default Card;    Enter fullscreen mode        Exit fullscreen mode    Important thing to note in this component is the parse which we have imported from html-react-parser. We are parsing our content so that if we get an anchor tag(a href), we replace it with Link (from react-router-dom) else the anchor tag will refresh the whole page on click.By the way, these anchor tags(now Link) are the hashtags or mentions, now you can create dynamic routes for /tags/:tag_name or /user/:user_id to show relevant data./index.css/* ./src/index.css */@tailwind base;@tailwind components;@tailwind utilities;.mentions {  margin: 1em 0;}.mentions--singleLine .mentions__control {  display: inline-block;}.mentions--singleLine .mentions__higlighter {  padding: 1px;  border: 2px inset transparent;}.mentions--singleLine .mentions__input {  padding: 5px;  border: 2px inset;}.mentions--multiLine .mentions__control {  font-family: monospace;  font-size: 11pt;  border: 1px solid silver;}.mentions--multiLine .mentions__highlighter {  padding: 9px;}.mentions--multiLine .mentions__input {  padding: 9px;  min-height: 63px;  outline: 0;  border: 0;}.mentions__suggestions__list {  background-color: white;  border: 1px solid rgba(0, 0, 0, 0.15);  font-size: 10pt;}.mentions__suggestions__item {  padding: 5px 15px;  border-bottom: 1px solid rgba(0, 0, 0, 0.15);}.mentions__suggestions__item--focused {  background-color: #cee4e5;}.mentions__mention {  background-color: #cee4e5;}    Enter fullscreen mode        Exit fullscreen mode    /components/NewPost.jsimport { useEffect, useState, useRef } from ""react"";import { MentionsInput, Mention } from ""react-mentions"";import { Link, useHistory } from ""react-router-dom"";import { APIservice } from ""../services"";const NewPost = () =&gt; {  const [title, setTitle] = useState("""");  const [content, setContent] = useState("""");  const [users, setUsers] = useState([]);  const [tagNames, setTagNames] = useState([]);  const myInput = useRef();  const history = useHistory();  useEffect(() =&gt; {    getActors();  }, []);  function addContent(input) {    if (input.length &lt;= 350) {      setContent(input);    }  }  async function getActors() {    const res = await APIservice.get(`/users`);    // Transform the users to what react-mentions expects    const usersArr = [];    res.data.users.map((item) =&gt;      usersArr.push({        id: item._id,        display: item.name,      })    );    setUsers(usersArr);  }  async function asyncTags(query, callback) {    if (?query) return;    APIservice.get(`/tag/search?name=${query}`)      .then((res) =&gt; {        if (res.data.tags.length) {          const suggestion = { id: query, display: query };          const tagsArray = res.data.tags.map((tag) =&gt; ({            id: tag._id,            display: tag.name,          }));          return [...tagsArray, suggestion];        } else {          return [{ id: query, display: query }];        }      })      .then(callback);  }  async function savePost(e) {    e.preventDefault();    let newContent = content;    newContent = newContent.split(""@@@__"").join('&lt;a href=""/user/');    newContent = newContent.split(""^^^__"").join(`""&gt;@`);    newContent = newContent.split(""@@@^^^"").join(""&lt;/a&gt;"");    newContent = newContent.split(""$$$__"").join('&lt;a href=""/tag/');    newContent = newContent.split(""~~~__"").join(`""&gt;#`);    newContent = newContent.split(""$$$~~~"").join(""&lt;/a&gt;"");    if (newContent !== """") {      let body = newContent.trim();      //Call to your DataBase like backendModule.savePost(body,  along_with_other_params);      tagNames.map(async (tag) =&gt; {        try {          await APIservice.post(""/tag"", {            name: tag,          });        } catch (error) {          console.log(error);        }      });      console.log(body);      try {        await APIservice.post(""/post"", {          title,          content: body,          createdAt: new Date().getTime(),        });        history.push(""/"");      } catch (error) {        console.error(error);      }    }  }  return (    &lt;&gt;      &lt;div className=""heading text-center font-bold text-2xl m-5 text-gray-800""&gt;        New Post      &lt;/div&gt;      &lt;form        onSubmit={savePost}        className=""editor mx-auto w-10/12 flex flex-col text-gray-800 border border-gray-300 p-4 shadow-lg max-w-2xl""      &gt;        &lt;input          value={title}          onChange={(e) =&gt; setTitle(e.target.value)}          className=""title border border-gray-300 p-2 mb-4 outline-none""          spellCheck=""false""          placeholder=""Title""          type=""text""        /&gt;        &lt;div className=""description outline-none""&gt;          &lt;MentionsInput            className=""mentions""            inputRef={myInput}            spellCheck=""false""            placeholder=""Describe everything about this post here""            value={content}            onChange={(event) =&gt; addContent(event.target.value)}          &gt;            &lt;Mention              trigger=""@""              data={users}              markup=""@@@____id__^^^____display__@@@^^^""              style=`{{                backgroundColor: ""#daf4fa"",              }}`              // onAdd={(id) =&gt; setActorIds((actorIds) =&gt; [...actorIds, id])}              appendSpaceOnAdd={true}            /&gt;            &lt;Mention              trigger=""#""              data={asyncTags}              markup=""$$$____id__~~~____display__$$$~~~""              style=`{{                backgroundColor: ""#daf4fa"",              }}`              onAdd={(display) =&gt;                setTagNames((tagNames) =&gt; [...tagNames, display])              }              appendSpaceOnAdd={true}            /&gt;          &lt;/MentionsInput&gt;        &lt;/div&gt;        &lt;div className=""icons flex text-gray-500 m-2""&gt;          &lt;div            onClick={() =&gt; {              myInput.current.focus();              setContent((content) =&gt; content + ""@"");            }}            className=""mr-2 cursor-pointer hover:text-gray-700 border rounded-full py-1 px-6""          &gt;            @          &lt;/div&gt;          &lt;div            onClick={() =&gt; {              myInput.current.focus();              setContent((content) =&gt; content + ""#"");            }}            className=""mr-2 cursor-pointer hover:text-gray-700 border rounded-full py-1 px-6""          &gt;            #          &lt;/div&gt;          &lt;div className=""count ml-auto text-gray-400 text-xs font-semibold""&gt;            {350 - content.length}/350          &lt;/div&gt;        &lt;/div&gt;        &lt;div className=""buttons flex""&gt;          &lt;Link            to=""/""            className=""btn border border-gray-300 p-1 px-4 font-semibold cursor-pointer text-gray-500 ml-auto""          &gt;            Cancel          &lt;/Link&gt;          &lt;button className=""btn border border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500""&gt;            Post          &lt;/button&gt;        &lt;/div&gt;      &lt;/form&gt;    &lt;/&gt;  );};export default NewPost;    Enter fullscreen mode        Exit fullscreen mode    Note: Please remove single backticks from style tags from both Mention, I had to put it as I was getting error(liquid) in publishing the post to dev.to, Sorry for inconvenience. Pretty big component ha?Actually, this is the component that is the essence for this article so bear with me some more time ;-)Here we have states for title and content of post which are self explanatory.Users and tagNames are the data which we will get from backend and render on @ and # trigger respectively.There are two ways in which we can show data to user in React Mentions inputLoad data initially (like we did for users ie in useEffect)Load data asynchronously (asyncTags function which will get executed every time tag input changes)Now have a look at MentionsInput in return statementThe first thing to note is that MentionsInput is a textarea, so we have given value and set onChange for content to it.The second thing is there are two Mention components inside it which are nothing but the triggers for @ and # respectively.For every Mention, there are two required things ie trigger(like @ # $..) and data(either static or async) and we are good to go.      Saving Post Data To DBBefore saving the data to DB, we will have to handle it so that we can render it correctly later. After extracting the mentions and tags from the content, we save it to DB.Also, we have called add/tag API so that new tags added by users are saved to DBtoo.At the last of code, we have two buttons for adding @ or # by clicking the UI(like linkedin), we have just made a ref of content input, and call — myInput.current.focus() to focus cursor to content input box— setContent((content) =&gt; content + ""@"") to append @/# after whatever the state of content is.Github repo link for the above app https://github.com/gauravadhikari1997/hashtags-and-mentions-in-reactThanks for reading. Hope you like the article and find it useful.",2021-02-27T06:39:16Z,#datascience #tutorials
DEV Community,https://dev.to,Uploading files to node.js server,https://dev.to/mstanciu552/uploading-files-to-node-js-server-4m9i,"This is a guide on how to use the multer library with express.We start with setting up a basic form for uploading a file and other text information(optional).I used React for this tutorial but the same result can be easily achieved with any other framework or with plain JavaScript.      Creating a basic React projectIn order to start we need a working React project. Simply run this command in your terminal to set up a basic React project.npx create-react-app &lt;project_name&gt;    Enter fullscreen mode        Exit fullscreen mode    Note: Replace &lt;project_name&gt; with whatever you want to call your project.To check that everything is working run cd &lt;project_name&gt; and npm start. You should see a boilerplate React app in your browser.      Creating the form for uploadingWe will make a form that will be used to upload files and a title for that file.App.jsimport React from 'react';const App = () =&gt; {    return (        &lt;form&gt;            &lt;input type=""text"" name=""text"" /&gt;            &lt;input type=""file"" name=""file"" /&gt;            &lt;input type=""submit"" value=""Submit"" /&gt;        &lt;/form&gt;);    };export default App;    Enter fullscreen mode        Exit fullscreen mode          Now we will set up a server using multer.jsNote: In order to start run the following command in a folder on the same level as the React project.First initialize a node project in the folder for the server.npm init -y    Enter fullscreen mode        Exit fullscreen mode    2.Then install express and multer using the following command.npm i -D express multer cors body-parser    Enter fullscreen mode        Exit fullscreen mode    3.In your package.json we need to change some things      Add the following to your scripts""scripts"": {    ""start"": ""node index.js""}    Enter fullscreen mode        Exit fullscreen mode          Also add type setting""type"": ""module""    Enter fullscreen mode        Exit fullscreen mode    4.Make a index.js file for the serverimport express from 'express';import bodyparser from 'body-parser';import cors from 'cors';const app = express();app.get('/posts', (req, res) =&gt; {});app.post('/submit', (req, res) =&gt; {});app.listen(3030, () =&gt; console.log('server listening on port 3030'));    Enter fullscreen mode        Exit fullscreen mode          We also need to set up some middlewareimport express from 'express';import bodyparser from 'body-parser';import cors from 'cors';const app = express();app.use(cors());app.use(bodyParser.urlencoded({ extended: true }));app.use(bodyParser.json());app.use('/uploads', express.static('./uploads'));app.get('/posts', (req, res) =&gt; {});app.post('/submit', (req, res) =&gt; {});app.listen(3030, () =&gt; console.log('server listening on port 3030'));    Enter fullscreen mode        Exit fullscreen mode    5.Now let's prepare multerimport express from 'express';import bodyparser from 'body-parser';import cors from 'cors';import multer from 'multer';const app = express();app.use(cors());app.use(bodyParser.urlencoded({ extended: true }));app.use(bodyParser.json());var storage = multer.diskStorage({  destination: function (req, file, cb) {    cb(null, './uploads');  },  filename: function (req, file, cb) {    cb(null, file.fieldname + '-' + Date.now() + '.jpg');  },});var upload = multer({ storage: storage });app.use('/uploads', express.static('./uploads'));app.get('/posts', (req, res) =&gt; {});app.post('/submit', upload.single('file'), (req, res) =&gt; {});app.listen(3030, () =&gt; console.log('server listening on port 3030'));    Enter fullscreen mode        Exit fullscreen mode    6.Now make a uploads file right next to the index.js7.Let's set up MongoDBRun this commandnpm i -D mongoose    Enter fullscreen mode        Exit fullscreen mode    index.jsimport express from 'express';import bodyparser from 'body-parser';import cors from 'cors';import multer from 'multer';import mongoose from 'mongoose';const app = express();app.use(cors());app.use(bodyParser.urlencoded({ extended: true }));app.use(bodyParser.json());var storage = multer.diskStorage({  destination: function (req, file, cb) {    cb(null, './uploads');  },  filename: function (req, file, cb) {    cb(null, file.fieldname + '-' + Date.now() + '.jpg');  },});var upload = multer({ storage: storage });mongoose  .connect('mongodb://localhost:27017/multer-test', {    useNewUrlParser: true,    useUnifiedTopology: true,  })  .then(res =&gt; console.log('DB connected'))  .catch(err =&gt; console.error(err));app.use('/uploads', express.static('./uploads'));app.get('/posts', (req, res) =&gt; {});app.post('/submit', upload.single('file'), (req, res) =&gt; {});app.listen(3030, () =&gt; console.log('server listening on port 3030'));    Enter fullscreen mode        Exit fullscreen mode          Now we will create a model for the databasemodels/Test.jsimport mongoose from 'mongoose';const test_schema = new mongoose.Schema({  file_path: {    type: String,    required: true,  },  description: {    type: String,    required: true,  },});export default mongoose.model('Test', test_schema);    Enter fullscreen mode        Exit fullscreen mode    And after that we can use the databaseindex.jsimport express from 'express';import bodyparser from 'body-parser';import cors from 'cors';import multer from 'multer';import mongoose from 'mongoose';import Test from './models/Test.js';const app = express();app.use(cors());app.use(bodyParser.urlencoded({ extended: true }));app.use(bodyParser.json());var storage = multer.diskStorage({  destination: function (req, file, cb) {    cb(null, './uploads');  },  filename: function (req, file, cb) {    cb(null, file.fieldname + '-' + Date.now() + '.jpg');  },});var upload = multer({ storage: storage });mongoose  .connect('mongodb://localhost:27017/multer-test', {    useNewUrlParser: true,    useUnifiedTopology: true,  })  .then(res =&gt; console.log('DB connected'))  .catch(err =&gt; console.error(err));app.use('/uploads', express.static('./uploads'));app.get('/posts', (req, res) =&gt; {    Test.find({})        .then(response =&gt; res.json(response))        .catch(err =&gt; console.error(err));});app.post('/submit', upload.single('file'), (req, res) =&gt; {    const data = new Test({ description: req.body.text, file_path: req.file.path });    data.save()        .then(response =&gt; console.log(response))        .catch(err =&gt; console.error(err));});app.listen(3030, () =&gt; console.log('server listening on port 3030'));    Enter fullscreen mode        Exit fullscreen mode    Note: This completes our server.      Now we will make a request from the server in order to upload a fileBack in our React project we run:npm i -D axios    Enter fullscreen mode        Exit fullscreen mode    src/App.jsimport React, { useRef } from 'react';import axios from 'axios';const App = () =&gt; {    const formRef = useRef(null);    const submit_file = e =&gt; {        e.preventDefault();        const form_data = new FormData(formRef.current);        axios({            url: 'http://localhost:3030/submit',            method: 'post',            headers: { 'Content-Type': 'multipart/form-data' },            data: form_data        })            .then(res =&gt; console.log(res))            .catch(err =&gt; console.error(err));    };    return (        &lt;form onSubmit={submit_file} ref={formRef}&gt;            &lt;input type=""text"" name=""text"" /&gt;            &lt;input type=""file"" name=""file"" /&gt;            &lt;input type=""submit"" value=""Submit"" /&gt;        &lt;/form&gt;);    };export default App;    Enter fullscreen mode        Exit fullscreen mode          Now we can upload files and save their path to the databaseAlso if we want access to our files and the data related to them we can make another axios request to http://localhost:3030/posts.src/App.jsimport React, { useRef, useState, useEffect } from 'react';import axios from 'axios';const App = () =&gt; {    const formRef = useRef(null);    const [data, setData] = useState([]);    useEffect(() =&gt; {        axios.get('http://localhost:3030/posts')            .then(res =&gt; setData(res.data))            .catch(err =&gt; console.error(err));    }, []);    const submit_file = e =&gt; {        e.preventDefault();        const form_data = new FormData(formRef.current);        axios({            url: 'http://localhost:3030/submit',            method: 'post',            headers: { 'Content-Type': 'multipart/form-data' },            data: form_data        })            .then(res =&gt; console.log(res))            .catch(err =&gt; console.error(err));    };    return (        &lt;form onSubmit={submit_file} ref={formRef}&gt;            &lt;input type=""text"" name=""text"" /&gt;            &lt;input type=""file"" name=""file"" /&gt;            &lt;input type=""submit"" value=""Submit"" /&gt;        &lt;/form&gt;);    };export default App;    Enter fullscreen mode        Exit fullscreen mode    Now we have acces to the file path and text within our data array.src/App.jsimport React, { useRef, useState, useEffect } from 'react';import axios from 'axios';const App = () =&gt; {    const formRef = useRef(null);    const [data, setData] = useState([]);    useEffect(() =&gt; {        axios.get('http://localhost:3030/posts')            .then(res =&gt; setData(res.data))            .catch(err =&gt; console.error(err));    }, []);    const submit_file = e =&gt; {        e.preventDefault();        const form_data = new FormData(formRef.current);        axios({            url: 'http://localhost:3030/submit',            method: 'post',            headers: { 'Content-Type': 'multipart/form-data' },            data: form_data        })            .then(res =&gt; console.log(res))            .catch(err =&gt; console.error(err));    };    return (        &lt;&gt;            &lt;form onSubmit={submit_file} ref={formRef}&gt;                &lt;input type=""text"" name=""text"" /&gt;                &lt;input type=""file"" name=""file"" /&gt;                &lt;input type=""submit"" value=""Submit"" /&gt;            &lt;/form&gt;            &lt;div&gt;            {data.map(el =&gt; (                &lt;div key={el._id}&gt;                    &lt;h2&gt;{ el.description }&lt;/h2&gt;                    &lt;img src={`http://localhost:3030/${el.file_path.replace('\\', '/')}`} /&gt;                &lt;/div&gt;            ))}            &lt;/div&gt;        &lt;/&gt;    );};export default App;    Enter fullscreen mode        Exit fullscreen mode    This is it now you can upload files through a form.If you have any questions please address them in the comments.I also have all the source code for a project like this onn my GitHub profile, here.",2021-02-27T18:40:27Z,#datascience #tutorials
Blog – Machine Learning Mastery,https://machinelearningmastery.com,A Gentle Introduction to Stochastic Optimization Algorithms,https://machinelearningmastery.com/stochastic-optimization-for-machine-learning/,"Stochastic optimization refers to the use of randomness in the objective function or in the optimization algorithm. Challenging optimization algorithms, such as high-dimensional nonlinear objective problems, may contain multiple local optima in which deterministic optimization algorithms may get stuck. Stochastic optimization algorithms provide an alternative approach that permits less optimal local decisions to be made [&#8230;]The post A Gentle Introduction to Stochastic Optimization Algorithms appeared first on Machine Learning Mastery.",2021-02-14T18:00:51Z,#datascience #tutorials
R-bloggers,https://www.r-bloggers.com,Empirical Economics with R (Part D): Instrumental Variable Estimation and Potential Outcomes,http://feedproxy.google.com/~r/RBloggers/~3/zLVOwPlaHow/,"Chapter 5 of my course Empirical Economics with R covers instrumental variable (IV) estimation.While being one of the most popular methods in academic economic papers for estimating causal effects (see e.g. the statistics here), I was not sure whethe...The post Empirical Economics with R (Part D): Instrumental Variable Estimation and Potential Outcomes first appeared on R-bloggers.",2021-02-23T05:00:00Z,#datascience #tutorials
Graphic detail,https://www.economist.com/graphic-detail/,Biden: his time,https://www.economist.com/graphic-detail/2021/01/22/biden-his-time,Infections v injections • Dealing with China • Chip wars • Ethiopia’s famine crimes,2021-01-22T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Most governments are not yet on track to hit their vaccine roll-out targets,https://www.economist.com/graphic-detail/2021/01/06/most-governments-are-not-yet-on-track-to-hit-their-vaccine-roll-out-targets,"Some countries aim to inoculate millions of people a day. So far, most are falling short",2021-01-06T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,America’s eviction moratorium has probably saved thousands of lives,https://www.economist.com/graphic-detail/2021/02/19/americas-eviction-moratorium-has-probably-saved-thousands-of-lives,Policies to prevent a housing crisis also stopped covid-19 infections and deaths,2021-02-19T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,The price of bitcoin has soared to record heights,https://www.economist.com/graphic-detail/2021/01/04/the-price-of-bitcoin-has-soared-to-record-heights,Some in the financial establishment seem to have been won round,2021-01-04T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,"189. How to Fix a Broken High Schooler, in Four Easy Steps",https://omny.fm/shows/freakonomics-radio/how-to-fix-a-broken-high-schooler-in-four-easy-s-1,"Okay, maybe the steps aren’t so easy. But a program run out of a Toronto housing project has had great success in turning around kids who were headed for trouble.",2014-12-04T05:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,328. Extra: Mark Zuckerberg Full Interview,https://omny.fm/shows/freakonomics-radio/extra-mark-zuckerberg-full-interview,"Stephen Dubner's conversation with the Facebook founder and C.E.O., recorded for the Freakonomics Radio series “The Secret Life of a C.E.O.”",2018-04-02T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,316. “I Wasn’t Stupid Enough to Say This Could Be Done Overnight”,https://omny.fm/shows/freakonomics-radio/i-wasn-t-stupid-enough-to-say-this-could-be-done-o,"Indra Nooyi became C.E.O. of PepsiCo just in time for a global financial meltdown. She also had a portfolio full of junk food just as the world decided that junk food is borderline toxic. Here's the story of how she overhauled that portfolio, stared down activist investors, and learned to ""leave the crown in the garage."" (Part 3 of a special series, ""The Secret Life of C.E.O.'s"")",2018-02-01T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,103. Free-conomics,https://omny.fm/shows/freakonomics-radio/free-conomics,Economists are a notoriously self-interested bunch. But a British outfit called Pro Bono Economics is giving away its services to selected charities.,2012-11-28T22:00:00Z,#economics #podcast
QuickBooks Engineering - Medium,https://quickbooks-engineering.intuit.com?source=rss----aafcab06cc52---4,Resiliency: two alternatives for fault tolerance to deprecated Hystrix,https://quickbooks-engineering.intuit.com/resiliency-two-alternatives-for-fault-tolerance-to-deprecated-hystrix-de58870a8c3f?source=rss----aafcab06cc52---4,NA,2020-03-03T18:48:16Z,#tech #engineering
tech-at-instacart - Medium,https://tech.instacart.com?source=rss----587883b5d2ee---4,“Avacado” or Avocado? ,https://tech.instacart.com/avacado-or-avocado-4b4b78dc0698?source=rss----587883b5d2ee---4,NA,2020-10-14T19:14:19Z,#tech #engineering
English (US),https://blog.twitter.com/engineering/en_us.html,Kafka as a storage system,https://blog.twitter.com/engineering/en_us/topics/infrastructure/2020/kafka-as-a-storage-system.html,Kafka is traditionally used to power streaming infrastructures. Learn how we used Kafka as a storage system to build the Account Activity API Replay Feature.,NA,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,Under the Hood of Uber ATG’s Machine Learning Infrastructure and Versioning Control Platform for Self-Driving Vehicles,https://eng.uber.com/machine-learning-model-life-cycle-version-control/,"As Uber experienced exponential growth over the last few years, now supporting 14 million trips each day, our engineers proved they could build for scale. That value extends to other areas, including Uber ATG (Advanced Technologies Group) and its quest &#8230;The post Under the Hood of Uber ATG’s Machine Learning Infrastructure and Versioning Control Platform for Self-Driving Vehicles appeared first on Uber Engineering Blog.",2020-03-04T17:00:38Z,#tech #engineering
Science & technology,https://www.economist.com/science-and-technology/,A device called Nemo will shed light on small-scale fisherfolk,https://www.economist.com/science-and-technology/2020/12/05/a-device-called-nemo-will-shed-light-on-small-scale-fisherfolk,No one knows the size of their catch,2020-12-05T00:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,Dusting the upper atmosphere could help counter climate change,https://www.economist.com/science-and-technology/2021/02/27/dusting-the-upper-atmosphere-could-help-counter-climate-change,An experiment to test the idea could soon start in Sweden,2021-02-27T00:00:00Z,#tech #news
MIT Technology Review,https://www.technologyreview.com,Why covid-19 might finally usher in the era of health care based on a patient’s data,https://www.technologyreview.com/2021/02/24/1018094/lee-hood-precision-health-care-covid-pandemic/,"Back in the 1990s, Lee Hood, a technologist and immunologist famous for co-­inventing the automated DNA sequencer, made a bold prediction. By 2016, he suggested, all Americans would carry a data card  recording their personal genomes and medical histories in vast detail. Upon arriving at a hospital or doctor’s office, they would present it to&#8230;",2021-02-24T12:00:00Z,#tech #news
Science & technology,https://www.economist.com/science-and-technology/,"Viruses hitch lifts on some bacteria, the better to kill others",https://www.economist.com/science-and-technology/2021/01/16/viruses-hitch-lifts-on-some-bacteria-the-better-to-kill-others,A hitchhiker’s guide to the microverse,2021-01-16T00:00:00Z,#tech #news
