feed_title,feed_link,item_title,item_link,item_description,item_pub_date,topic
Talk Python To Me,https://talkpython.fm/,#297 Python year in review (2020 edition),https://talkpython.fm/episodes/show/297/python-year-in-review-2020-edition,"2020 will be one for the history books, won't it? I've put together a great group to look back on 2020 - from the Python perspective. Join me along with Cecil Phillip, Ines Montani, Jay Miller, Paul Everitt, Reuven Lerner, Matt Harrison, and Brian Okken for a light-hearted and fun look back on the major Python events of 2020.Links from the showVideo version of this episode: youtube.comGuestsCecil Phillip: @cecilphillipInes Montani: @_inesmontaniJay Miller: @kjaymillerPaul Everitt: @paulweverittReuven Lerner: @reuvenmlernerMatt Harrison: @__mharrison__Brian Okken: @brianokkenSponsorsTalk Python Training",2020-12-28T00:00:00Z,#datascience #ds #podcast
Talk Python To Me,https://talkpython.fm/,#298 Building ML teams and finding ML jobs,https://talkpython.fm/episodes/show/298/building-ml-teams-and-finding-ml-jobs,"Are you building or running an internal machine learning team? How about looking for a new ML position? On this episode, I talk with Chip Huyen from Snorkel AI about building ML teams, finding ML positions, and teach ML at Stanford.Links from the showChip on Twitter: @chiproSnorkel AI: snorkel.aiChip's Book Preview: twitter.comhandcalcs project: github.comIBM Buzzword Bingo: youtube.comSponsorsDatadogLinodeTalk Python Training",2021-01-11T00:00:00Z,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,How Data Science is Used in Every Step of the Automotive Lifecycle,https://www.datacamp.com/community/blog/automotive-data-science,"Making better, safer vehicles requires a data-driven approach. Data science unlocks better mobility solutions for all with connected and autonomous vehicles.",NA,#datascience #ds #podcast
DataCamp Community,https://www.datacamp.com/community,pandas Tutorial for Beginners,https://www.datacamp.com/community/tutorials/pandas,Are you ready to begin your pandas journey? Here’s a step-by-step guide on how to get started.,NA,#datascience #ds #podcast
DEV Community,https://dev.to,How To Find Broken Images Using Selenium WebDriver?,https://dev.to/himanshusheth004/how-to-find-broken-images-using-selenium-webdriver-i9b,"A web product’s user experience is one of the key elements that help in user acquisition and user retention. Though immense focus should be given to the design &amp; development of new product features, a continuous watch should be kept on the overall user experience. Like 404 pages (or dead links), broken images on a website (or web app) could also irk the end-users. Manual inspection and removal of broken images is not a feasible and scalable approach. Instead of using third-party tools to inspect broken images, you should leverage Selenium automation testing and see how to find broken images using Selenium WebDriver on your website.In this part of the Selenium Tutorial, we look at how to find broken images on websites using Selenium WebDriver. From an end-user’s perspective, even a single broken image on a page could be an experience dampener – a prime reason to find broken images on websites.By the end of this blog, you would be able to find broken images using Selenium WebDriver with Python, Java, C#, and PHP.      What are Broken Images in Web Testing?Broken image is a link/image that does not show up as a picture, clicking upon which takes the end-user to a defunct picture. The user encounters a 404 Error when clicked on the broken image. This error means that there is an issue with the image URL, and the image is not loaded properly (due to various reasons).Shown below is an example of broken images on a website:From an end-user experience and retention point of view, fixing broken images should be considered equally important as fixing broken links on websites. Selenium WebDriver can be used to find broken images on websites. The internal logic for locating broken images might vary based on how the images are fetched from the server.Here are two ways in which images are read from the server:Absolute Path – As the name indicates, the website uses the absolute path (or complete path) in the ‘src’ attribute that specifies the path to the intended image. The &lt;img&gt; tag in HTML creates a holding space for the referenced image.Shown below is an example of usage of an absolute path in the ‘src’ attribute of the &lt;img&gt; tag:The image shown above is fetched from an absolute location (i.e., the HostName is used in the &lt;src&gt; attribute):Relative Path – On many websites, a relative image on a path is placed in the attribute. The relative path is always relative to the root of the document (i.e., website/web app).For example, in &lt;img src=”assets/img/image.jpg” alt=”some text”&gt;; the path of image.jpg is relative to the root. If the website URL is https://www.someexample.com, the relative path of the image (image.jpg) will equate to https://www.someexample.com/assets/img/image.jpgHere is a sample usage of relative path in the &lt;src&gt; attribute of the &lt;img&gt; tag:You would be curious to know what leads to broken images on a website. Let’s look at the ‘why part’ of broken images?      Major reasons for Broken images on a webpageHere are some of the prominent reasons that lead to broken images (i.e., file not found or 404 error for images) on a website (or web apps):Incorrect Image Format – In case you have uploaded the image in a .jpg format, but the image is identified as a .png format in the code, it leads to an error when the image is getting displayed. It is necessary to ensure that the image formats coincide when uploading to the server and referring to the same in the code.Incorrect Image URL – When rendering the specified image, the browser reads the image location from the &lt;src&gt; attribute in the &lt;img&gt; tag. If a wrong image path or incorrect filename is mentioned in the &lt;src&gt; attribute, it leads to issues in displaying the image (and 404 errors).Deleted Image file – The HTML code link could be referring to a file that is either wrongly spelled in the code or no longer exist on the server.Site relocation – After relocating the site from one provider to another, a thorough check should be conducted to verify whether all the site assets are available and accessible on the new server.301 redirection – During a website redesign activity, 301 redirects should be done for the site content and the images used on the site. Along with the redirection of URLs, utmost attention should be given to the redirection of the images that reside in those URLs.Unavailability of the server – In scenarios where the server does not give a response within a certain time-frame, images would fail to appear on the site.Like broken links, attention should be given to ensure that your web product is free from broken images.      Why should you check for broken images?Here are the two major reasons for checking for broken images on websites:Broken images on a website hamper the end-user experience, which could negatively impact the growth of the product.Images are an essential part of the content marketing strategy. However, broken images could create SEO issues. Images with missing ALT tags and broken internal images are problematic from an SEO point of view and should be looked into on a high priority.      How to Find Broken Images Using Selenium WebDriver?When a user visits a website, the user request is sent to the website’s server, which processes the request. In response to the browser’s request, the server sends a three-digit code referred to as the HTTP Status Code to the browser.Some of the commonly used classes of HTTP Status Codes are 1xx, 2xx, 3xx, 4xx, and 5xx.To find broken images using the Selenium WebDriver, we would be using the 4xx class of status code, indicating that the particular page or the complete website is not reachable. The status code of class 2xx (particularly 200) suggests that the request sent by the web browser was successful, and the appropriate response was sent to the browser.When an image is not available on the server, a response code 404 (Page Not Found) is sent to the web browser. You can refer to our earlier blog for detailed information on HTTP Status Codes and Status Codes presented on the detection of broken links/images.Irrespective of the programming language being used to detect broken images, the basic principles remain the same. Here are some of the steps that can be followed to find broken images on websites:Use the &lt;img&gt; tag to collect details of the images present on the page.For each &lt;img&gt; tag, get the attribute &lt;src&gt; from the tag.Convert the path obtained from the &lt;src&gt; attribute to an ‘Absolute Path.’ Conversion to absolute path might not be required for Selenium Java, Selenium C#, and Selenium Python. Converting the ‘relative path’ of the image(s) to ‘absolute path’ is a must when Selenium PHP is used.Send an HTTP request to the image link obtained from step(3) and capture the response code received in response to the request.Based on the response code sent by the server, you should validate whether the image is broken. Response code 200 (i.e., HttpStatusCode.OK) means that the image is available on the server.Validate whether the link is broken or not based on the response code sent by the server.Repeat steps (2-6) for every image present on the page.The naturalWidth attribute returns the original width of the image, and it is zero for a broken image. For Selenium with Java, you could also check if the naturalWidth attribute of the image is zero or not.In this Selenium Tutorial, we demonstrate how to find broken images using Selenium WebDriver in Java, Python, C#, and PHP. The tests are run on the latest version of the Chrome Browser on the Windows 10 platform. The execution is carried out on the cloud-based Selenium Grid provided by LambdaTest.To get started with LambdaTest, you should create an account on the website and note the user-name &amp; access-key from the profile section on LambdaTest. The browser capabilities are generated using LambdaTest Capabilities Generator.Here is the test scenario to find broken images on the website:Test ScenarioGo to https://the-internet.herokuapp.com/broken_images on Chrome (latest)Read the details about the images present on the pageSend HTTP request for each imageCheck the response code of the HTTP request. If the response code is 200, the image is not broken; else, the image is broken.Print whether the image is broken or not on the terminalThe URL under test https://the-internet.herokuapp.com/broken_images has two broken images and two proper images.Shown below are the two broken images on the website:Here are the two proper (or not broken) images on the website:      How to find Broken Images using Selenium Java?FileName – pom.xmlImplementation&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&lt;project xmlns=""http://maven.apache.org/POM/4.0.0""         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd""&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;org.brokenimages&lt;/groupId&gt;    &lt;artifactId&gt;BrokenImages&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.testng&lt;/groupId&gt;            &lt;artifactId&gt;testng&lt;/artifactId&gt;            &lt;version&gt;6.9.10&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt;            &lt;version&gt;1.7.28&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;            &lt;version&gt;4.0.0-alpha-7&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;            &lt;artifactId&gt;selenium-remote-driver&lt;/artifactId&gt;            &lt;version&gt;4.0.0-alpha-7&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;            &lt;artifactId&gt;selenium-chrome-driver&lt;/artifactId&gt;            &lt;version&gt;4.0.0-alpha-7&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;            &lt;version&gt;4.5.13&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;defaultGoal&gt;install&lt;/defaultGoal&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                &lt;version&gt;3.0&lt;/version&gt;                &lt;configuration&gt;                    &lt;source&gt;1.8&lt;/source&gt;                    &lt;target&gt;1.8&lt;/target&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;                &lt;configuration&gt;                    &lt;source&gt;11&lt;/source&gt;                    &lt;target&gt;11&lt;/target&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;FileName – testng.xml&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&lt;!DOCTYPE suite SYSTEM ""http://testng.org/testng-1.0.dtd""&gt;&lt;suite name=""Broken Images Detection Demo""&gt;    &lt;test verbose=""2"" preserve-order=""true"" name=""Detect broken images in Selenium WebDriver""&gt;        &lt;classes&gt;            &lt;class name=""brokenimages.test_brokenimages""&gt;            &lt;/class&gt;        &lt;/classes&gt;    &lt;/test&gt;&lt;/suite&gt;FileName – test_brokenimages.javapackage brokenimages;import java.io.IOException;import java.net.MalformedURLException;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.HttpClientBuilder;import org.openqa.selenium.By;import java.net.URL;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import org.testng.annotations.AfterClass;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;public class test_brokenimages{    /*  protected static ChromeDriver driver; */    WebDriver driver = null;    String URL = ""https://the-internet.herokuapp.com/broken_images"";    public static String status = ""passed"";    String username = ""user-name"";    String access_key = ""access-key"";    @BeforeClass    public void testSetUp() throws MalformedURLException {        DesiredCapabilities capabilities = new DesiredCapabilities();        capabilities.setCapability(""build"", ""[Java] Finding broken images on a webpage using Selenium"");        capabilities.setCapability(""name"", ""[Java] Finding broken images on a webpage using Selenium"");        capabilities.setCapability(""platform"", ""Windows 10"");        capabilities.setCapability(""browserName"", ""Chrome"");        capabilities.setCapability(""version"",""latest"");        capabilities.setCapability(""tunnel"",false);        capabilities.setCapability(""network"",true);        capabilities.setCapability(""console"",true);        capabilities.setCapability(""visual"",true);        driver = new RemoteWebDriver(new URL(""http://"" + username + "":"" + access_key + ""@hub.lambdatest.com/wd/hub""),                capabilities);        System.out.println(""Started session"");    }    @Test(description=""Approach 1: Find broken images on a web page using Selenium WebDriver"", enabled=true)    protected void test_selenium_broken_images_appr_1()    {        Integer iBrokenImageCount = 0;        driver.navigate().to(URL);        driver.manage().window().maximize();        try        {            iBrokenImageCount = 0;            List&lt;WebElement&gt; image_list = driver.findElements(By.tagName(""img""));            /* Print the total number of images on the page */            System.out.println(""The page under test has "" + image_list.size() + "" images"");            for (WebElement img : image_list)            {                if (img != null)                {                    HttpClient client = HttpClientBuilder.create().build();                    HttpGet request = new HttpGet(img.getAttribute(""src""));                    HttpResponse response = client.execute(request);                    /* For valid images, the HttpStatus will be 200 */                    if (response.getStatusLine().getStatusCode() != 200)                    {                        System.out.println(img.getAttribute(""outerHTML"") + "" is broken."");                        iBrokenImageCount++;                    }                }            }        }        catch (Exception e)        {            e.printStackTrace();            status = ""failed"";            System.out.println(e.getMessage());        }        status = ""passed"";        System.out.println(""The page "" + URL + "" has "" + iBrokenImageCount + "" broken images"");    }    @Test(description=""Approach 2: Find broken images on a web page using Selenium WebDriver"", enabled = true)    protected void test_selenium_broken_images_appr_2()    {        Integer iBrokenImageCount = 0;        driver.navigate().to(URL);        driver.manage().window().maximize();        try        {            iBrokenImageCount = 0;            List&lt;WebElement&gt; image_list = driver.findElements(By.tagName(""img""));            /* Print the total number of images on the page */            System.out.println(""The page under test has "" + image_list.size() + "" images"");            for (WebElement img : image_list)            {                if (img != null)                {                    if (img.getAttribute(""naturalWidth"").equals(""0""))                    {                        System.out.println(img.getAttribute(""outerHTML"") + "" is broken."");                        iBrokenImageCount++;                    }                }            }        }        catch (Exception e)        {            e.printStackTrace();            status = ""failed"";            System.out.println(e.getMessage());        }        status = ""passed"";        System.out.println(""The page "" + URL + "" has "" + iBrokenImageCount + "" broken images"");    }    @AfterClass    public void tearDown()    {        if (driver != null) {            ((JavascriptExecutor) driver).executeScript(""lambda-status="" + status);            driver.quit();        }    }}Code Walkthrough [Approach – 1]1. Import the required packagesThe Apache HttpClient library is used for handling the HTTP requests. To use the latest version of HttpClient library, the dependency for the library is added to the Maven Build file (pom.xml).&lt;dependency&gt;      &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;      &lt;artifactId&gt;httpclient&lt;/artifactId&gt;      &lt;version&gt;4.5.13&lt;/version&gt;&lt;/dependency&gt;To find the broken images on the page under test, the HttpClient library is used for checking the status codes of the images present on the page. The necessary packages are imported so that its methods can be used in the implementation.import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.HttpClientBuilder;2. Find all the images on the pageThe findElements method in Selenium is used for fetching the details of all the images present on the page. The images are located using the tagName ‘ img.’The images are placed in a list, which will be further iterated to find broken images on the page.List&lt;WebElement&gt; image_list = driver.findElements(By.tagName(""img""));System.out.println(""The page under test has "" + image_list.size() + "" images"");3. Create a new instance of HttpClientThe HttpClient class offers an API that primarily consists of three core classes – HttpClient, HttpRequest, and HttpResponse. HttpResponse describes the result of an HttpRequest call. For reading the response body, we create a new instance of HttpClient and request the objects. The new instance of the class is created with the build() method of HttpClientBuilder class.HttpClient client = HttpClientBuilder.create().build();4. Create a new instance of HttpGetCloseableHttpClient provides the execute method for sending and receiving the data. The execute method uses the parameter of type HttpUriRequest, which has many sub-classes, including HttpGet and HttpPost.We first create a new HttpGet object with the HttpUriRequest set to path retrieved by reading the src attribute in the WebElement img.HttpGet request = new HttpGet(img.getAttribute(""src""));For example – getAttribute(“src”) for the image “Fork me on GitHub” will return /img/forkme_right_green_007200.png.5. Retrieve the response objectThe execute method executes the HTTP request using the default context. It returns the response body (i.e. HttpResponse).HttpResponse response = client.execute(request);6. Read the Status CodeThe getStatusLine method of the HttpResponse class obtains the status line of the response [obtained from step(5)]. The getStatusCode method returns the HttpStatus in an integer format. Response Code 200 (SC_OK) means that the HTTP request was executed successfully.if (response.getStatusLine().getStatusCode() != 200){    System.out.println(img.getAttribute(""outerHTML"") + "" is broken."");    iBrokenImageCount++;}If HttpStatus is 200, the concerned image is not broken, whereas HttpStatus for a broken image is 404. Steps (3) thru’ (6) are repeated for all the WebElement entries in the image list. The outerHTML attribute for the broken images is printed for reference on the terminal.Code Walkthrough [Approach – 2]1. Find all the images on the pageSimilar to Step(2) in Approach – 1, the findElements method in Selenium is used to fetch the details of images present on the image. The tagName img is used with the findElements method to achieve the same.List&lt; WebElement &gt; image_list = driver.findElements(By.tagName(""img""));2. Read the naturalWidth attributeThe naturalWidth attribute of the WebElements identified in Step(1) is read. For broken images, naturalWidth will be zero whereas it is non-zero for normal images.if (img.getAttribute(""naturalWidth"").equals(""0"")){    System.out.println(img.getAttribute(""outerHTML"") + "" is broken."");      iBrokenImageCount++;}Step (2) is repeated for all the WebElements in the list image_list, which was obtained in Step (1). The variable iBrokenImageCount indicates the number of broken images on the page.ExecutionShown below are the execution snapshots of Approach – 1 and Approach – 2. As expected, we see that there are two broken images on the webpage under test.      How to find Broken Images using Selenium Python?ImplementationFileName – test_brokenimages.pyimport requestsimport urllib3import pytestfrom requests.exceptions import MissingSchema, InvalidSchema, InvalidURLfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.keys import Keyscapabilities = {    ""build"": ""[Python] Finding broken images on a webpage using Selenium"",    ""name"": ""[Python] Finding broken images on a webpage using Selenium"",    ""platform"": ""Windows 10"",    ""browserName"": ""Chrome"",    ""version"": ""latest""}user_name = ""user-name""app_key = ""access-key""URL = ""https://the-internet.herokuapp.com/broken_images""iBrokenImageCount = 0urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)remote_url = ""http://"" + user_name + "":"" + app_key + ""@hub.lambdatest.com/wd/hub""driver = webdriver.Remote(command_executor=remote_url, desired_capabilities=capabilities)driver.maximize_window()driver.get(URL)image_list = driver.find_elements(By.TAG_NAME, ""img"")print('Total number of images on '+ URL + ' are ' + str(len(image_list)))for img in image_list:    try:        response = requests.get(img.get_attribute('src'), stream=True)        if (response.status_code != 200):            print(img.get_attribute('outerHTML') + "" is broken."")            iBrokenImageCount = (iBrokenImageCount + 1)    except requests.exceptions.MissingSchema:        print(""Encountered MissingSchema Exception"")    except requests.exceptions.InvalidSchema:        print(""Encountered InvalidSchema Exception"")    except:        print(""Encountered Some other Exception"")driver.quit()print('The page ' + URL + ' has ' + str(iBrokenImageCount) + ' broken images')Code Walkthrough1. Import ModulesThe requests module is imported so that we can send HTTP requests to the target URL. In case the requests module is not installed on the dev machine, run the command pip install requests to install the same.import requestsimport urllib3from requests.exceptions import MissingSchema, InvalidSchema, InvalidURL2. Fetch details about the images present on the pageWebElements with the ‘img’ tag are read using the find_elements method in Selenium.image_list = driver.find_elements(By.TAG_NAME, ""img"")3. Send an HTTP requestThe get() method in the requests module sends a GET request to the URL passed to it. The src attribute in the img tag contains the location of the image on the server. It is passed to the requests.get() method. Stream in the get() method is set to true, so the response to the HTTP request is immediately downloaded.response = requests.get(img.get_attribute('src'), stream=True)In return, we get requests.Response() object that contains the server’s response to the HTTP request.4. Read the Status Code from the Response objectThe status_code property in requests.Response() object indicates the status of the HTTP request. HTTP Status Code of 200 means that the image is not broken whereas the image is broken if the Status Code is 404.if (response.status_code != 200):   print(img.get_attribute('outerHTML') + "" is broken."")   iBrokenImageCount = (iBrokenImageCount + 1)Repeat steps (3) through (4) for all the WebElement entries in the list (i.e., image_list).ExecutionWe run the file by triggering the command python &lt;file_name.py&gt; on the terminal. As shown below, two broken images were found on the page under test.      How to find Broken Images using Selenium C#?ImplementationFileName – BrokenImageTest.csusing OpenQA.Selenium;using OpenQA.Selenium.Remote;using OpenQA.Selenium.Chrome;using NUnit.Framework;using System.Threading;using System.Collections.Generic;using System.Linq;using System.Net;using OpenQA.Selenium.Remote;using System;using System.Threading;using System.Net.Http;using System.Threading.Tasks;namespace TestBrokenImages{    [TestFixture(""chrome"", ""latest"", ""Windows 10"")]    public class TestBrokenImages    {        private String browser;        private String version;        private String os;        IWebDriver driver;        public TestBrokenImages(String browser, String version, String os)        {            this.browser = browser;            this.version = version;            this.os = os;        }        [SetUp]        public void Init()        {            String username = ""user-name"";            String accesskey = ""access-key"";            String gridURL = ""@hub.lambdatest.com/wd/hub"";            DesiredCapabilities capabilities = new DesiredCapabilities();            capabilities.SetCapability(""user"", username);            capabilities.SetCapability(""accessKey"", accesskey);            capabilities.SetCapability(""browserName"", browser);            capabilities.SetCapability(""version"", version);            capabilities.SetCapability(""platform"", os);            capabilities.SetCapability(""build"", ""[C#] Finding broken images on a webpage using Selenium"");            capabilities.SetCapability(""name"", ""[C#] Finding broken images on a webpage using Selenium"");            driver = new RemoteWebDriver(new Uri(""https://"" + username + "":"" + accesskey + gridURL), capabilities, TimeSpan.FromSeconds(600));            System.Threading.Thread.Sleep(2000);        }        [Test]        public async Task LT_Broken_Images_Test()        {            int broken_images = 0;            String test_url = ""https://the-internet.herokuapp.com/broken_images"";            driver.Url = test_url;            using var client = new HttpClient();            var image_list = driver.FindElements(By.TagName(""img""));            /* Loop through all the images */            foreach (var img in image_list)            {                try                {                    /* Get the URI */                    HttpResponseMessage response = await client.GetAsync(img.GetAttribute(""src""));                    /* Reference - https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebresponse.statuscode?view=netcore-3.1 */                    if (response.StatusCode == HttpStatusCode.OK)                    {                        System.Console.WriteLine(""Image at the link "" + img.GetAttribute(""src"") + "" is OK, status is ""                                + response.StatusCode);                    }                    else                    {                        System.Console.WriteLine(""Image at the link "" + img.GetAttribute(""src"") + "" is Broken, status is ""                                + response.StatusCode);                        broken_images++;                    }                }                catch (Exception ex)                {                    if ((ex is ArgumentNullException) ||                       (ex is NotSupportedException))                    {                        System.Console.WriteLine(""Exception occured\n"");                    }                }            }            /* Perform wait to check the output */            System.Threading.Thread.Sleep(2000);            Console.WriteLine(""\nThe page "" + test_url + "" has "" + broken_images + "" broken images"");        }        [TearDown]        public void Cleanup()        {            if (driver != null)                driver.Quit();        }    }}Code WalkthroughWe have used the NUnit framework for demonstration. You can check out our earlier blog on NUnit Test automation with Selenium C# to get started with the NUnit framework.1. Include HttpClient namespaceThe HttpClient class provides the base class used for sending HTTP requests and receiving the corresponding response from the resource identified by URI.It is recommended to use HttpClient instead of HttpWebRequest (of the System.Net.HttpWebRequest namespace) for detecting broken images using Selenium WebDriver.using System.Net.Http;using System.Threading.Tasks;2. Create a method that returns an async taskThe GetAsync method is used for sending a GET request to the specified URI as an asynchronous operation.[Test]public async Task LT_Broken_Images_Test(){3. Create an instance of HttpClientAn instance of the HttpClient is created. The methods offered by HttpClient class will be further used for fetching the details of images present on the page under test.using var client = new HttpClient();4. Read the images present on the pageThe details of the images present on the page are fetched by locating the WebElements with TagName ‘img’ property.var image_list = driver.FindElements(By.TagName(""img""));The findElements method returns a list that is iterated to check the broken images on the page.5. Iterate through the image list to check for broken imagesThe GetAsync method in HttpClient class sends an async GETrequest to the corresponding URI. The value of the anchor’s ‘src’ attribute collected using the GetAttribute method is passed in the GetAsync method.foreach (var img in image_list){  try  {    /* Get the URI */    HttpResponseMessage response=await client.GetAsync(img.GetAttribute(""src""));6. Read the HttpStatus CodeOn completion of the Async operation in Step(5), HttpResponseMessage is returned. The response includes the data and status code. Response code HttpStatusCode.OK (i.e., 200) indicates that the image was located on the server, and it was read successfully. We keep a counter of the number of broken images on the page.if (response.StatusCode == HttpStatusCode.OK){    System.Console.WriteLine(""Image at the link "" + img.GetAttribute(""src"") + "" is OK, status is ""+ response.StatusCode);}else{    System.Console.WriteLine(""Image at the link "" + img.GetAttribute(""src"") + "" is Broken, status is ""+ response.StatusCode);    broken_images++;}The exceptions NotSupportedException and ArgumentNullException are handled as part of exception handling.catch (Exception ex){    if ((ex is ArgumentNullException) ||  (ex is NotSupportedException))    {            System.Console.WriteLine(""Exception occured\n"");    }}ExecutionHere is the execution snapshot, which indicates that two broken images were present on the page under test.      How to find Broken Images using Selenium PHP?ImplementationFileName – composer.json{   ""require"":{      ""php"":""&gt;=7.1"",      ""phpunit/phpunit"":""^9"",      ""phpunit/phpunit-selenium"": ""*"",      ""php-webdriver/webdriver"":""*""   }}FileName – tests\BrokenImageTest.php&lt;?phprequire 'vendor/autoload.php';use PHPUnit\Framework\TestCase;use Facebook\WebDriver\Remote\DesiredCapabilities;use Facebook\WebDriver\Remote\RemoteWebDriver;use Facebook\WebDriver\WebDriverBy;$GLOBALS['LT_USERNAME'] = ""user-name"";# accessKey:  AccessKey can be generated from automation dashboard or profile section$GLOBALS['LT_APPKEY'] = ""access-key"";class BrokenImageTest extends TestCase{  protected $webDriver;  public function build_browser_capabilities(){    /* $capabilities = DesiredCapabilities::chrome(); */    $capabilities = array(      ""build"" =&gt; ""[PHP] Finding broken images on a webpage using Selenium"",      ""name"" =&gt; ""[PHP] Finding broken images on a webpage using Selenium"",      ""platform"" =&gt; ""macOS High Sierra"",      ""browserName"" =&gt; ""MicrosoftEdge"",      ""version"" =&gt; ""latest""    );    return $capabilities;  }  public function setUp(): void  {    $capabilities = $this-&gt;build_browser_capabilities();    /* Download the Selenium Server 3.141.59 from     https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar    */    $url = ""https://"". $GLOBALS['LT_USERNAME'] ."":"" . $GLOBALS['LT_APPKEY'] .""@hub.lambdatest.com/wd/hub"";    $this-&gt;webDriver = RemoteWebDriver::create($url, $capabilities);  }  public function tearDown(): void  {    $this-&gt;webDriver-&gt;quit();  }  /*  * @test  */   public function test_searchbrokenimages()  {    $test_url = ""https://the-internet.herokuapp.com/broken_images"";    # For site with absolute path    # $test_url = ""https://www.lambdatest.com/blog"";    # End - For site with absolute path    $base_url = ""https://the-internet.herokuapp.com/"";    $driver = $this-&gt;webDriver;    $driver-&gt;get($test_url);    $this-&gt;assertEquals(""The Internet"", $driver-&gt;getTitle());    # For site with absolute path    # $this-&gt;assertEquals(""LambdaTest | A Cross Browser Testing Blog"", $driver-&gt;getTitle());    # End - For site with absolute path    $driver-&gt;manage()-&gt;window()-&gt;maximize();    $iBrokenImageCount = 0;    /* file_get_contents is used to get the page's HTML source */    $html = file_get_contents($test_url);    /* Instantiate the DOMDocument class */    $htmlDom = new DOMDocument;    /* The HTML of the page is parsed using DOMDocument::loadHTML */    @$htmlDom-&gt;loadHTML($html);    /* Extract the links from the page */    $image_list = $htmlDom-&gt;getElementsByTagName('img');    /* The DOMNodeList object is traversed to check for its validity */    foreach($image_list as $img)    {        $img_path = $img-&gt;getAttribute('src');        # Convert relative path to absolute path        $search_path = ""/"" . $img_path;        $abs_path = relative2absolute($search_path, $base_url);        # When absolute path is used for fetching the images        # For site with absolute path        # $abs_path = $img_path;        # For site with absolute path        $response = @get_headers($abs_path);        if (preg_match(""|200|"", $response[0]))        {          print($abs_path . "" is not broken\n"");        }        else        {          print($abs_path . "" is broken\n"");          $iBrokenImageCount = $iBrokenImageCount + 1;        }    }    print(""\nThe page "" . $test_url . "" has "" . $iBrokenImageCount . "" broken images"");  }}?&gt;&lt;?php    function relative2absolute($rel_path, $base_path)    {        /* return if already absolute URL */        if (parse_url($rel_path, PHP_URL_SCHEME) != '') return $rel_path;        /* queries and anchors */        if ($rel_path[0]=='#' || $rel_path[0]=='?') return $base_path.$rel_path;        /* parse base URL and convert to local variables:            $scheme, $host, $path */        extract(parse_url($base_path));        /* remove non-directory element from path */        $new_path = preg_replace('#/[^/]*$#', '', $base_path);        /* destroy path if relative url points to root */        if ($rel_path[0] == '/') $new_path = '';        /* dirty absolute URL */        $abs_path = ""$host$new_path/$rel_path"";        /* replace '//' or '/./' or '/foo/../' with '/' */        $repl = array('#(/\.?/)#', '#/(?!\.\.)[^/]+/\.\./#');        for($counter=1; $counter&gt;0; $abs_path=preg_replace($repl, '/', $abs_path, -1, $counter)) {}        /* absolute URL is ready! */        return $scheme.'://'.$abs_path;    }?&gt;Code WalkthroughTo find broken images with Selenium PHP, we would be using the PHPUnit framework with Selenium. Refer to our detailed Selenium PHP tutorial for a quick recap on Selenium with PHPUnit.Run the command composer require on the terminal for installing the packages mentioned in composer.json.Here is the overall walkthrough of the source code:1. Read the page sourceHTML source of the page under test (i.e. https://the-internet.herokuapp.com/) is read using the file_get_contents function in PHP. HTML source is read in a local String variable $html.$html = file_get_contents($test_url);2. Instantiate the DOMDocument classThe entire HTML document is represented in the DOMDocument class. It also serves as the root of the source tree.$htmlDom = new DOMDocument;3. Parse HTML source of the pageDOMDocument::loadHTML() function in PHP parses the HTML source available in the String variable $html. The function returns a DOMDocument object when executed successfully.@$htmlDom-&gt;loadHTML($html);4. Extract the Images using ‘img’ tagEntries in the &lt;img&gt; HTML tag are read using the getElementsByTagName method of the DOMDocument class. As we are looking for broken images, search is based on the &lt;img&gt; tag from the parsed HTML source.$image_list = $htmlDom-&gt;getElementsByTagName('img');5. Read the entries enclosed in ‘src’ attributeThe values of the ‘src’ attribute are read from the &lt;img&gt; entries extracted in Step(4).$img_path = $img-&gt;getAttribute('src');For example – The ‘src’ attribute in &lt;img src=”img/avatar-blank.jpg”&gt; is “img/avatar-blank.jpg”.6. Convert the relative path to absolute pathThis step is only applicable if the ‘src’ attribute in the &lt;img&gt; tag returns a relative path from the root of the document.In the case of http://the-internet.herokuapp.com/broken_images, the images are read using the relative path.Take the LambdaTest blog case, the images in the blogs are read using the absolute path of the images on the server. Shown below is an example of how the absolute path of the image is used in the ‘src’ attribute of the &lt;img&gt; tag:We created a new function relative2absolute() that takes the following arguments – relative path obtained from the &lt;src&gt; attribute and root document of the URL under test.&lt;?phpfunction relative2absolute($rel_path, $base_path){        /* return if already absolute URL */        if (parse_url($rel_path, PHP_URL_SCHEME) != '') return $rel_path;        /* queries and anchors */        if ($rel_path[0]=='#' || $rel_path[0]=='?') return $base_path.$rel_path;        /* parse base URL and convert to local variables:            $scheme, $host, $path */        extract(parse_url($base_path));      .............................................        .............................................        .............................................}Relative Path (Sample)For http://the-internet.herokuapp.com/broken_images, the relative path would equate to /$img_path. If the $img_path is img/avatar-blank.jpg; the final relative path used by the relative2absolute function would be /img/avatar-blank.jpg The base URL is set to https://the-internet.herokuapp.com/$test_url = ""https://the-internet.herokuapp.com/broken_images"";..............................................................................................................................................................................# Convert relative path to absolute path$search_path = ""/"" . $img_path;$abs_path = relative2absolute($search_path, $base_url);Absolute path (Sample)If an absolute path is used in the &lt;src&gt; attribute, the absolute path and the relative path would be the same. In such a scenario, Step (6) becomes optional.$test_url = ""https://www.lambdatest.com/blog"";..............................................................................................................................................................................$img_path = $img-&gt;getAttribute('src');$abs_path = $img_path;We came up with the relative2absolute function with support from the StackOverflow Community ☺.7. Convert the relative path to absolute pathThe get_headers() function is used to fetch all the headers sent by the server in response to the HTTP request. For a broken image, the HTTP status code is 404, whereas the status code is 200 if the image is present on the server.The preg_match() function in PHP does a case-insensitive search for “200” (HTTP Status Code if the request is completed successfully) in the response code. The local variable iBrokenImageCount is incremented when a broken image is present on the page.$response = @get_headers($abs_path);if (preg_match(""|200|"", $response[0])){    print($abs_path . "" is not broken\n"");}else{    print($abs_path . "" is broken\n"");    $iBrokenImageCount = $iBrokenImageCount + 1;}ExecutionTo run the test that is using the PHPUnit framework, run the following command from the root folder:vendor\bin\phpunit  --debug testWhen the test is run against https://the-internet.herokuapp.com/broken_images, it shows that the page has two broken images.We executed the same test against the LambdaTest blog after doing the minimal changes in the code under the ‘For a site with absolute path’ comment.The site uses the absolute path in &lt;src&gt; attribute of img tag. As seen below, there are zero broken images on the LambdaTest blog.      That’s all folksLike broken links on web pages, broken images could also hinder the overall user experience. It also creates a negative impact on the search rankings, thereby hampering your SEO efforts. Instead of relying on third-party tools where you are putting the privacy &amp; data at stake, you should find broken images using Selenium WebDriver. In this Selenium tutorial, we had a look at how to find broken images using Selenium WebDriver with Java, Python, C#, and PHP languages.What strategy do you follow for finding broken images on webpage(s)? Do leave your thoughts in the comments section…Happy Testing ☺",2021-04-13T10:01:11Z,#datascience #tutorials
DataCamp Community,https://www.datacamp.com/community,How Data Science is Transforming Healthcare,https://www.datacamp.com/community/blog/data-science-in-healthcare,"The integrated use of data science and machine learning in healthcare has many applications for improving patient care, business processes and operations, and pharmaceuticals. But the healthcare industry faces considerable challenges in data quality and infrastructure, compliance and governance, and upskilling.",NA,#datascience #tutorials
DEV Community,https://dev.to,What do appsec and fire extinguishers have in common?,https://dev.to/cossacklabs/what-do-appsec-and-fire-extinguishers-have-in-common-5efe,"Application security is awesome, learn when to start with it. To get the answer imagine you move to a new apartment and decide to equip it with a fire extinguisher. It can be really of help in case of fire but... it does not have legs, arms, brains, and skills to fight fire by itself. Fire alarm, flood control, construction netting, etc. do the same—they all require skills for further actions.Having a fire extinguisher doesn’t prevent fire, but certainly, it reduces the risks of burning down.Similarly, appsec helps companies to diminish business risks and stay successful as long as it is possible.⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰ ⟰In your case, first, identify and assess your business risks.Risk assessment does not provide absolute numbers, it deals with events and probability—find out what pitfalls your product can meet on its way and their magnitude. By adding stronger security controls you avoid potential threats and minimize their impact. 💎 The rule of thumb is: mind the loss and watch the money.In application security, you can do less if there's nothing to lose and do more if you have crown jewels to secure or want no more security fixes, financial, legal or reputational aftermaths. So, relax if you can afford loss to happen and feel pretty sure you can overcome it with no stress. Start with a risk mitigation strategy if you can not bear it.      What’s next?The latter choice will bring you and your calculator to your company strategic plans, technical assets, potential threat events and worst-case scenarios, etc. At this point you will get acquainted with existing risk assessment frameworks.💎 If you haven’t heard anything about typical application security mistakes, start with OWASP Top Ten (take the bare bones or follow the rabbit to open a whole brand-new world) and regulations applicable to your project (GDPR, PCI DSS, etc.). This will give you an overview of technical aspects and organisational procedures to keep in mind. Then deepen your knowledge with OWASP ASVS, OWASP MASVS, OWASP SAMM.💎 Next level of risk assessment adventure will lead you to FAIR, a quantitative model for information security and operational risk. Through rather simple to follow instructions and mathematical formulae it will help you to measure security risks.💎 Down under these levels, there lie deep waters and pleasures of NIST and hundreds of pages of its Risk Management Framework for Information Systems and Organizations document (NIST SP 800-37) designed for large enterprises. It explains how big organisations handle information security risks.To get closer to applied risk/data management, you can look through the materials from the workshop on security data management for appdevs by  Anastasiia Voitova or follow her/@vixentael and @Cossack Labs for future talks/workshop announcements and updates, like this:                          02:28                                  Which encryption control to choose for your app protection, by Anastasiia Voitova      Cossack Labs ・ Mar 15 ・ 1 min read              #security        #cryptography        #encryption        #privacy                                      09:28                                  📱Building reliable mobile app security      Cossack Labs ・ Nov 13 '20 ・ 1 min read              #security        #mobile        #cryptography        #ios",2021-04-13T10:50:12Z,#datascience #tutorials
DataCamp Community,https://www.datacamp.com/community,Achieving Organizational Data Fluency with IPTOP,https://www.datacamp.com/community/blog/achieving-organizational-data-fluency,"The blueprint for ramping your organization’s data maturity from data reactive to data scaling, data progressive, and data fluent.",NA,#datascience #tutorials
Information is Beautiful,https://informationisbeautiful.net,New Coronavirus COVID-19 Interactive Visuals,http://feedproxy.google.com/~r/InformationIsBeautiful/~3/TRu5yXT_1AI/,We&#8217;ve revised our live generative Coronavirus data-visuals and added a new Country Comparer and Hotspot Map. Great code &#038; design work from UniversLab and Nueker. &#187; see the visualisations &#187; see the visualisations,2021-01-19T18:31:55Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Why are American politicians more pious than their constituents?,https://www.economist.com/graphic-detail/2021/02/08/why-are-american-politicians-more-pious-than-their-constituents,"As Americans ditch the church, Congress still fills the pews",2021-02-08T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Democrats are more likely than Republicans to have heard of QAnon,https://www.economist.com/graphic-detail/2021/01/19/democrats-are-more-likely-than-republicans-to-have-heard-of-qanon,Americans who have tend to hold it in an unfavourable light,2021-01-19T00:00:00Z,#dataviz
Graphic detail,https://www.economist.com/graphic-detail/,Tracking covid-19 excess deaths across countries,https://www.economist.com/graphic-detail/coronavirus-excess-deaths-tracker,"In many parts of the world, official death tolls undercount the total number of fatalities",2021-03-09T00:00:00Z,#dataviz
Freakonomics Radio,http://freakonomics.com/,150. What’s the “Best” Exercise?,https://omny.fm/shows/freakonomics-radio/what-s-the-best-exercise,Most people blame lack of time for being out of shape. So maybe the solution is to exercise more efficiently.,2014-01-02T14:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,How the Supermarket Helped America Win the Cold War (Ep. 386 Rebroadcast),https://omny.fm/shows/freakonomics-radio/how-the-supermarket-helped-america-win-the-cold-1,"Aisle upon aisle of fresh produce, cheap meat, and sugary cereal — a delicious embodiment of free-market capitalism, right? Not quite. The supermarket was in fact the endpoint of the U.S. government’s battle for agricultural abundance against the U.S.S.R. Our farm policies were built to dominate, not necessarily to nourish — and we are still living with the consequences.",2020-08-06T03:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,192. Parking Is Hell (Rebroadcast),https://omny.fm/shows/freakonomics-radio/parking-is-hell-rebroadcast,There ain't no such thing as a free parking spot. Somebody has to pay for it -- and that somebody is everybody.,2014-08-21T04:00:00Z,#economics #podcast
Freakonomics Radio,http://freakonomics.com/,"189. How to Fix a Broken High Schooler, in Four Easy Steps (Rebroadcast)",https://omny.fm/shows/freakonomics-radio/how-to-fix-a-broken-high-schooler-in-four-easy-ste,"Okay, maybe the steps aren't so easy. But a program run out of a Toronto housing project has had great success in turning around kids who were headed for trouble.",2016-02-04T04:00:00Z,#economics #podcast
Google AI Blog,http://ai.googleblog.com/,Massively Parallel Graph Computation: From Theory to Practice,http://ai.googleblog.com/feeds/8066863477269580496/comments/default,Massively Parallel Graph Computation: From Theory to Practice,2021-03-18T10:02:01Z,#tech #engineering
Squarespace / Engineering,https://engineering.squarespace.com/,The Nuts and Bolts with Tanya Reilly,https://engineering.squarespace.com/blog/2020/the-nuts-and-bolts-with-tanya-reilly,“The Nuts and Bolts” is a reoccurring Q&A with Squarespace engineers. Questions are compiled by their peers to guarantee we get right to the good stuff.,2020-09-25T17:30:00Z,#tech #engineering
Google AI Blog,http://ai.googleblog.com/,Constructing Transformers For Longer Sequences with Sparse Attention Methods,http://ai.googleblog.com/feeds/8066863477269580496/comments/default,Constructing Transformers For Longer Sequences with Sparse Attention Methods,2021-03-25T13:08:45Z,#tech #engineering
Uber Engineering Blog,https://eng.uber.com,Introducing Domain-Oriented Microservice Architecture,https://eng.uber.com/microservice-architecture/,"IntroductionRecently there has been substantial discussion around the downsides of service oriented architectures and microservice architectures in particular. While only a few years ago, many people readily adopted microservice architectures due to the numerous benefits they provide such as &#8230;The post Introducing Domain-Oriented Microservice Architecture appeared first on Uber Engineering Blog.",2020-07-23T16:01:24Z,#tech #engineering
Startups – TechCrunch,https://techcrunch.com,Memic raises $96M for its robot-assisted surgery platform,https://techcrunch.com/2021/04/12/memic-raises-96m-for-its-robot-assisted-surgery-platform/,"Memic, a startup developing a robotic-assisted surgical platform that recently received marketing authorization from the U.S. Food and Drug Administration, today announced that it has closed a $96 million Series D funding round. The round was led by Peregrine Ventures and Ceros, with participation from OurCrowd and Accelmed. The company plans to use the new [&#8230;]",2021-04-12T12:00:00Z,#tech #news
VentureBeat,https://venturebeat.com,Nvidia debuts Drive Atlan system-on-chip for autonomous vehicles,https://venturebeat.com/2021/04/12/nvidia-debuts-drive-atlan-system-on-chip-for-autonomous-vehicles/,Nvidia's new Drive Atlan system-on-chip for autonomous driving can deliver up to 33 times the performance of the previous generation.,2021-04-12T16:55:03Z,#tech #news
Dataconomy,https://dataconomy.com,DataRobot CEO calls for ‘a new era of democratization of AI’,https://dataconomy.com/2021/03/datarobot-ceo-calls-new-era-democratization-ai/,"This article was originally published at VentureBeat and has been reproduced with permission. Dan Wright just became CEO of DataRobot, a company valued at more than $2.7 billion that is promising to automate the building, deployment, and management of AI models in a way that makes AI accessible to every",2021-03-26T09:05:55Z,#tech #news
MIT Technology Review,https://www.technologyreview.com,Facebook’s ad algorithms are still excluding women from seeing jobs,https://www.technologyreview.com/2021/04/09/1022217/facebook-ad-algorithm-sex-discrimination/,"Facebook is withholding certain job ads from women because of their gender, according to the latest audit of its ad service. The audit, conducted by independent researchers at the University of Southern California (USC), reveals that Facebook’s ad-delivery system shows different job ads to women and men even though the jobs require the same qualifications.&#8230;",2021-04-09T12:00:00Z,#tech #news
